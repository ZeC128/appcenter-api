<?php
/**
 * XamarinSDKBundle
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * XamarinSDKBundle Class Doc Comment
 *
 * @category Class
 * @description The Xamarin SDK bundle
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XamarinSDKBundle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XamarinSDKBundle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mono_version' => 'string',
        'sdk_bundle' => 'string',
        'current' => 'bool',
        'stable' => 'bool',
        'xcode_versions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mono_version' => null,
        'sdk_bundle' => null,
        'current' => null,
        'stable' => null,
        'xcode_versions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mono_version' => 'monoVersion',
        'sdk_bundle' => 'sdkBundle',
        'current' => 'current',
        'stable' => 'stable',
        'xcode_versions' => 'xcodeVersions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mono_version' => 'setMonoVersion',
        'sdk_bundle' => 'setSdkBundle',
        'current' => 'setCurrent',
        'stable' => 'setStable',
        'xcode_versions' => 'setXcodeVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mono_version' => 'getMonoVersion',
        'sdk_bundle' => 'getSdkBundle',
        'current' => 'getCurrent',
        'stable' => 'getStable',
        'xcode_versions' => 'getXcodeVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mono_version'] = isset($data['mono_version']) ? $data['mono_version'] : null;
        $this->container['sdk_bundle'] = isset($data['sdk_bundle']) ? $data['sdk_bundle'] : null;
        $this->container['current'] = isset($data['current']) ? $data['current'] : null;
        $this->container['stable'] = isset($data['stable']) ? $data['stable'] : null;
        $this->container['xcode_versions'] = isset($data['xcode_versions']) ? $data['xcode_versions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mono_version
     *
     * @return string
     */
    public function getMonoVersion()
    {
        return $this->container['mono_version'];
    }

    /**
     * Sets mono_version
     *
     * @param string $mono_version The Mono version
     *
     * @return $this
     */
    public function setMonoVersion($mono_version)
    {
        $this->container['mono_version'] = $mono_version;

        return $this;
    }

    /**
     * Gets sdk_bundle
     *
     * @return string
     */
    public function getSdkBundle()
    {
        return $this->container['sdk_bundle'];
    }

    /**
     * Sets sdk_bundle
     *
     * @param string $sdk_bundle The Xamarin SDK version
     *
     * @return $this
     */
    public function setSdkBundle($sdk_bundle)
    {
        $this->container['sdk_bundle'] = $sdk_bundle;

        return $this;
    }

    /**
     * Gets current
     *
     * @return bool
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param bool $current If the SDK is latest stable
     *
     * @return $this
     */
    public function setCurrent($current)
    {
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets stable
     *
     * @return bool
     */
    public function getStable()
    {
        return $this->container['stable'];
    }

    /**
     * Sets stable
     *
     * @param bool $stable If the SDK is stable
     *
     * @return $this
     */
    public function setStable($stable)
    {
        $this->container['stable'] = $stable;

        return $this;
    }

    /**
     * Gets xcode_versions
     *
     * @return string[]
     */
    public function getXcodeVersions()
    {
        return $this->container['xcode_versions'];
    }

    /**
     * Sets xcode_versions
     *
     * @param string[] $xcode_versions Specific for iOS SDK. A list of Xcode versions supported by current SDK version
     *
     * @return $this
     */
    public function setXcodeVersions($xcode_versions)
    {
        $this->container['xcode_versions'] = $xcode_versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


