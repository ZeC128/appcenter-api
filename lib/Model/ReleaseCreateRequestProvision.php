<?php
/**
 * ReleaseCreateRequestProvision
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReleaseCreateRequestProvision Class Doc Comment
 *
 * @category Class
 * @description An object containing information about an iOS provisioning profile.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseCreateRequestProvision implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseCreateRequest_provision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'application_identifier' => 'string',
        'team_identifier' => 'string',
        'profile_type' => 'string',
        'expired_at' => '\DateTime',
        'udids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'application_identifier' => null,
        'team_identifier' => null,
        'profile_type' => null,
        'expired_at' => 'date-time',
        'udids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'application_identifier' => 'application_identifier',
        'team_identifier' => 'team_identifier',
        'profile_type' => 'profile_type',
        'expired_at' => 'expired_at',
        'udids' => 'udids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'application_identifier' => 'setApplicationIdentifier',
        'team_identifier' => 'setTeamIdentifier',
        'profile_type' => 'setProfileType',
        'expired_at' => 'setExpiredAt',
        'udids' => 'setUdids'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'application_identifier' => 'getApplicationIdentifier',
        'team_identifier' => 'getTeamIdentifier',
        'profile_type' => 'getProfileType',
        'expired_at' => 'getExpiredAt',
        'udids' => 'getUdids'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROFILE_TYPE_ADHOC = 'adhoc';
    const PROFILE_TYPE_ENTERPRISE = 'enterprise';
    const PROFILE_TYPE_OTHER = 'other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileTypeAllowableValues()
    {
        return [
            self::PROFILE_TYPE_ADHOC,
            self::PROFILE_TYPE_ENTERPRISE,
            self::PROFILE_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['application_identifier'] = isset($data['application_identifier']) ? $data['application_identifier'] : null;
        $this->container['team_identifier'] = isset($data['team_identifier']) ? $data['team_identifier'] : null;
        $this->container['profile_type'] = isset($data['profile_type']) ? $data['profile_type'] : null;
        $this->container['expired_at'] = isset($data['expired_at']) ? $data['expired_at'] : null;
        $this->container['udids'] = isset($data['udids']) ? $data['udids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['application_identifier'] === null) {
            $invalidProperties[] = "'application_identifier' can't be null";
        }
        if ($this->container['team_identifier'] === null) {
            $invalidProperties[] = "'team_identifier' can't be null";
        }
        if ($this->container['profile_type'] === null) {
            $invalidProperties[] = "'profile_type' can't be null";
        }
        $allowedValues = $this->getProfileTypeAllowableValues();
        if (!is_null($this->container['profile_type']) && !in_array($this->container['profile_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'profile_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['expired_at'] === null) {
            $invalidProperties[] = "'expired_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the provisioning profile.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets application_identifier
     *
     * @return string
     */
    public function getApplicationIdentifier()
    {
        return $this->container['application_identifier'];
    }

    /**
     * Sets application_identifier
     *
     * @param string $application_identifier The application identifier.
     *
     * @return $this
     */
    public function setApplicationIdentifier($application_identifier)
    {
        $this->container['application_identifier'] = $application_identifier;

        return $this;
    }

    /**
     * Gets team_identifier
     *
     * @return string
     */
    public function getTeamIdentifier()
    {
        return $this->container['team_identifier'];
    }

    /**
     * Sets team_identifier
     *
     * @param string $team_identifier The team identifier.
     *
     * @return $this
     */
    public function setTeamIdentifier($team_identifier)
    {
        $this->container['team_identifier'] = $team_identifier;

        return $this;
    }

    /**
     * Gets profile_type
     *
     * @return string
     */
    public function getProfileType()
    {
        return $this->container['profile_type'];
    }

    /**
     * Sets profile_type
     *
     * @param string $profile_type profile_type
     *
     * @return $this
     */
    public function setProfileType($profile_type)
    {
        $allowedValues = $this->getProfileTypeAllowableValues();
        if (!in_array($profile_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'profile_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profile_type'] = $profile_type;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return \DateTime
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param \DateTime $expired_at The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z
     *
     * @return $this
     */
    public function setExpiredAt($expired_at)
    {
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets udids
     *
     * @return string[]
     */
    public function getUdids()
    {
        return $this->container['udids'];
    }

    /**
     * Sets udids
     *
     * @param string[] $udids udids
     *
     * @return $this
     */
    public function setUdids($udids)
    {
        $this->container['udids'] = $udids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


