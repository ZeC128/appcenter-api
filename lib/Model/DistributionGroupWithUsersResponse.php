<?php
/**
 * DistributionGroupWithUsersResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DistributionGroupWithUsersResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DistributionGroupWithUsersResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DistributionGroupWithUsersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'total_user_count' => 'float',
        'total_groups_count' => 'float',
        'notified_user_count' => 'float',
        'is_public' => 'bool',
        'users' => '\Swagger\Client\Model\InlineResponse20010[]',
        'aad_groups' => '\Swagger\Client\Model\DistributionGroupWithUsersResponseAadGroups[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'total_user_count' => null,
        'total_groups_count' => null,
        'notified_user_count' => null,
        'is_public' => null,
        'users' => null,
        'aad_groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'total_user_count' => 'total_user_count',
        'total_groups_count' => 'total_groups_count',
        'notified_user_count' => 'notified_user_count',
        'is_public' => 'is_public',
        'users' => 'users',
        'aad_groups' => 'aad_groups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'total_user_count' => 'setTotalUserCount',
        'total_groups_count' => 'setTotalGroupsCount',
        'notified_user_count' => 'setNotifiedUserCount',
        'is_public' => 'setIsPublic',
        'users' => 'setUsers',
        'aad_groups' => 'setAadGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'total_user_count' => 'getTotalUserCount',
        'total_groups_count' => 'getTotalGroupsCount',
        'notified_user_count' => 'getNotifiedUserCount',
        'is_public' => 'getIsPublic',
        'users' => 'getUsers',
        'aad_groups' => 'getAadGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['total_user_count'] = isset($data['total_user_count']) ? $data['total_user_count'] : null;
        $this->container['total_groups_count'] = isset($data['total_groups_count']) ? $data['total_groups_count'] : null;
        $this->container['notified_user_count'] = isset($data['notified_user_count']) ? $data['notified_user_count'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['aad_groups'] = isset($data['aad_groups']) ? $data['aad_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['total_user_count'] === null) {
            $invalidProperties[] = "'total_user_count' can't be null";
        }
        if ($this->container['notified_user_count'] === null) {
            $invalidProperties[] = "'notified_user_count' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the distribution group
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the distribution group used in URLs
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets total_user_count
     *
     * @return float
     */
    public function getTotalUserCount()
    {
        return $this->container['total_user_count'];
    }

    /**
     * Sets total_user_count
     *
     * @param float $total_user_count The count of users in the distribution group
     *
     * @return $this
     */
    public function setTotalUserCount($total_user_count)
    {
        $this->container['total_user_count'] = $total_user_count;

        return $this;
    }

    /**
     * Gets total_groups_count
     *
     * @return float
     */
    public function getTotalGroupsCount()
    {
        return $this->container['total_groups_count'];
    }

    /**
     * Sets total_groups_count
     *
     * @param float $total_groups_count The count of aad groups in the distribution group
     *
     * @return $this
     */
    public function setTotalGroupsCount($total_groups_count)
    {
        $this->container['total_groups_count'] = $total_groups_count;

        return $this;
    }

    /**
     * Gets notified_user_count
     *
     * @return float
     */
    public function getNotifiedUserCount()
    {
        return $this->container['notified_user_count'];
    }

    /**
     * Sets notified_user_count
     *
     * @param float $notified_user_count The count of non-pending users in the distribution group who will be notified by new releases
     *
     * @return $this
     */
    public function setNotifiedUserCount($notified_user_count)
    {
        $this->container['notified_user_count'] = $notified_user_count;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public Whether the distribution group is public
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Swagger\Client\Model\InlineResponse20010[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Swagger\Client\Model\InlineResponse20010[] $users The distribution group users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets aad_groups
     *
     * @return \Swagger\Client\Model\DistributionGroupWithUsersResponseAadGroups[]
     */
    public function getAadGroups()
    {
        return $this->container['aad_groups'];
    }

    /**
     * Sets aad_groups
     *
     * @param \Swagger\Client\Model\DistributionGroupWithUsersResponseAadGroups[] $aad_groups The distribution group aad groups
     *
     * @return $this
     */
    public function setAadGroups($aad_groups)
    {
        $this->container['aad_groups'] = $aad_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


