<?php
/**
 * V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript Class Doc Comment
 *
 * @category Class
 * @description Build configuration when React Native, or other JavaScript tech, is part of the build steps
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v0.1appsowner_nameapp_namebranchesbranchconfig_toolsets_javascript';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_json_path' => 'string',
        'run_tests' => 'bool',
        'react_native_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_json_path' => null,
        'run_tests' => null,
        'react_native_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_json_path' => 'packageJsonPath',
        'run_tests' => 'runTests',
        'react_native_version' => 'reactNativeVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_json_path' => 'setPackageJsonPath',
        'run_tests' => 'setRunTests',
        'react_native_version' => 'setReactNativeVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_json_path' => 'getPackageJsonPath',
        'run_tests' => 'getRunTests',
        'react_native_version' => 'getReactNativeVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_json_path'] = isset($data['package_json_path']) ? $data['package_json_path'] : null;
        $this->container['run_tests'] = isset($data['run_tests']) ? $data['run_tests'] : null;
        $this->container['react_native_version'] = isset($data['react_native_version']) ? $data['react_native_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_json_path
     *
     * @return string
     */
    public function getPackageJsonPath()
    {
        return $this->container['package_json_path'];
    }

    /**
     * Sets package_json_path
     *
     * @param string $package_json_path Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"
     *
     * @return $this
     */
    public function setPackageJsonPath($package_json_path)
    {
        $this->container['package_json_path'] = $package_json_path;

        return $this;
    }

    /**
     * Gets run_tests
     *
     * @return bool
     */
    public function getRunTests()
    {
        return $this->container['run_tests'];
    }

    /**
     * Sets run_tests
     *
     * @param bool $run_tests Whether to run Jest unit tests, via npm test, during the build
     *
     * @return $this
     */
    public function setRunTests($run_tests)
    {
        $this->container['run_tests'] = $run_tests;

        return $this;
    }

    /**
     * Gets react_native_version
     *
     * @return string
     */
    public function getReactNativeVersion()
    {
        return $this->container['react_native_version'];
    }

    /**
     * Sets react_native_version
     *
     * @param string $react_native_version Version of React Native from package.json files
     *
     * @return $this
     */
    public function setReactNativeVersion($react_native_version)
    {
        $this->container['react_native_version'] = $react_native_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


