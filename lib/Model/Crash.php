<?php
/**
 * Crash
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Crash Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Crash implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Crash';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'details' => '\Swagger\Client\Model\CrashDetails',
        'new_crash_group_id' => 'string',
        'crash_id' => 'string',
        'new_crash_id' => 'string',
        'display_id' => 'string',
        'timestamp' => '\DateTime',
        'version' => 'string',
        'build' => 'string',
        'device' => 'string',
        'device_name' => 'string',
        'os_version' => 'string',
        'os_type' => 'string',
        'stacktrace' => '\Swagger\Client\Model\Stacktrace',
        'user_name' => 'string',
        'user_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'details' => null,
        'new_crash_group_id' => null,
        'crash_id' => null,
        'new_crash_id' => null,
        'display_id' => null,
        'timestamp' => 'date-time',
        'version' => null,
        'build' => null,
        'device' => null,
        'device_name' => null,
        'os_version' => null,
        'os_type' => null,
        'stacktrace' => null,
        'user_name' => null,
        'user_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'details' => 'details',
        'new_crash_group_id' => 'new_crash_group_id',
        'crash_id' => 'crash_id',
        'new_crash_id' => 'new_crash_id',
        'display_id' => 'display_id',
        'timestamp' => 'timestamp',
        'version' => 'version',
        'build' => 'build',
        'device' => 'device',
        'device_name' => 'device_name',
        'os_version' => 'os_version',
        'os_type' => 'os_type',
        'stacktrace' => 'stacktrace',
        'user_name' => 'user_name',
        'user_email' => 'user_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'details' => 'setDetails',
        'new_crash_group_id' => 'setNewCrashGroupId',
        'crash_id' => 'setCrashId',
        'new_crash_id' => 'setNewCrashId',
        'display_id' => 'setDisplayId',
        'timestamp' => 'setTimestamp',
        'version' => 'setVersion',
        'build' => 'setBuild',
        'device' => 'setDevice',
        'device_name' => 'setDeviceName',
        'os_version' => 'setOsVersion',
        'os_type' => 'setOsType',
        'stacktrace' => 'setStacktrace',
        'user_name' => 'setUserName',
        'user_email' => 'setUserEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'details' => 'getDetails',
        'new_crash_group_id' => 'getNewCrashGroupId',
        'crash_id' => 'getCrashId',
        'new_crash_id' => 'getNewCrashId',
        'display_id' => 'getDisplayId',
        'timestamp' => 'getTimestamp',
        'version' => 'getVersion',
        'build' => 'getBuild',
        'device' => 'getDevice',
        'device_name' => 'getDeviceName',
        'os_version' => 'getOsVersion',
        'os_type' => 'getOsType',
        'stacktrace' => 'getStacktrace',
        'user_name' => 'getUserName',
        'user_email' => 'getUserEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['new_crash_group_id'] = isset($data['new_crash_group_id']) ? $data['new_crash_group_id'] : null;
        $this->container['crash_id'] = isset($data['crash_id']) ? $data['crash_id'] : null;
        $this->container['new_crash_id'] = isset($data['new_crash_id']) ? $data['new_crash_id'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
        $this->container['stacktrace'] = isset($data['stacktrace']) ? $data['stacktrace'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_crash_group_id'] === null) {
            $invalidProperties[] = "'new_crash_group_id' can't be null";
        }
        if ($this->container['crash_id'] === null) {
            $invalidProperties[] = "'crash_id' can't be null";
        }
        if ($this->container['new_crash_id'] === null) {
            $invalidProperties[] = "'new_crash_id' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['build'] === null) {
            $invalidProperties[] = "'build' can't be null";
        }
        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['os_version'] === null) {
            $invalidProperties[] = "'os_version' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\CrashDetails
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\CrashDetails $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets new_crash_group_id
     *
     * @return string
     */
    public function getNewCrashGroupId()
    {
        return $this->container['new_crash_group_id'];
    }

    /**
     * Sets new_crash_group_id
     *
     * @param string $new_crash_group_id 
     *
     * @return $this
     */
    public function setNewCrashGroupId($new_crash_group_id)
    {
        $this->container['new_crash_group_id'] = $new_crash_group_id;

        return $this;
    }

    /**
     * Gets crash_id
     *
     * @return string
     */
    public function getCrashId()
    {
        return $this->container['crash_id'];
    }

    /**
     * Sets crash_id
     *
     * @param string $crash_id 
     *
     * @return $this
     */
    public function setCrashId($crash_id)
    {
        $this->container['crash_id'] = $crash_id;

        return $this;
    }

    /**
     * Gets new_crash_id
     *
     * @return string
     */
    public function getNewCrashId()
    {
        return $this->container['new_crash_id'];
    }

    /**
     * Sets new_crash_id
     *
     * @param string $new_crash_id 
     *
     * @return $this
     */
    public function setNewCrashId($new_crash_id)
    {
        $this->container['new_crash_id'] = $new_crash_id;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param string $display_id display_id
     *
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version 
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets build
     *
     * @return string
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param string $build 
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device 
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name 
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string $os_version 
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param string $os_type 
     *
     * @return $this
     */
    public function setOsType($os_type)
    {
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets stacktrace
     *
     * @return \Swagger\Client\Model\Stacktrace
     */
    public function getStacktrace()
    {
        return $this->container['stacktrace'];
    }

    /**
     * Sets stacktrace
     *
     * @param \Swagger\Client\Model\Stacktrace $stacktrace stacktrace
     *
     * @return $this
     */
    public function setStacktrace($stacktrace)
    {
        $this->container['stacktrace'] = $stacktrace;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name 
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string $user_email 
     *
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


