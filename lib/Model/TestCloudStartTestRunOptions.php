<?php
/**
 * TestCloudStartTestRunOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestCloudStartTestRunOptions Class Doc Comment
 *
 * @category Class
 * @description Options required to start the test run
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestCloudStartTestRunOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Test Cloud Start Test Run Options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'test_framework' => 'string',
        'device_selection' => 'string',
        'language' => 'string',
        'locale' => 'string',
        'test_series' => 'string',
        'test_parameters' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'test_framework' => null,
        'device_selection' => null,
        'language' => null,
        'locale' => null,
        'test_series' => null,
        'test_parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'test_framework' => 'test_framework',
        'device_selection' => 'device_selection',
        'language' => 'language',
        'locale' => 'locale',
        'test_series' => 'test_series',
        'test_parameters' => 'test_parameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'test_framework' => 'setTestFramework',
        'device_selection' => 'setDeviceSelection',
        'language' => 'setLanguage',
        'locale' => 'setLocale',
        'test_series' => 'setTestSeries',
        'test_parameters' => 'setTestParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'test_framework' => 'getTestFramework',
        'device_selection' => 'getDeviceSelection',
        'language' => 'getLanguage',
        'locale' => 'getLocale',
        'test_series' => 'getTestSeries',
        'test_parameters' => 'getTestParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['test_framework'] = isset($data['test_framework']) ? $data['test_framework'] : null;
        $this->container['device_selection'] = isset($data['device_selection']) ? $data['device_selection'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['test_series'] = isset($data['test_series']) ? $data['test_series'] : null;
        $this->container['test_parameters'] = isset($data['test_parameters']) ? $data['test_parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['test_framework'] === null) {
            $invalidProperties[] = "'test_framework' can't be null";
        }
        if ($this->container['device_selection'] === null) {
            $invalidProperties[] = "'device_selection' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets test_framework
     *
     * @return string
     */
    public function getTestFramework()
    {
        return $this->container['test_framework'];
    }

    /**
     * Sets test_framework
     *
     * @param string $test_framework Test framework used by tests.
     *
     * @return $this
     */
    public function setTestFramework($test_framework)
    {
        $this->container['test_framework'] = $test_framework;

        return $this;
    }

    /**
     * Gets device_selection
     *
     * @return string
     */
    public function getDeviceSelection()
    {
        return $this->container['device_selection'];
    }

    /**
     * Sets device_selection
     *
     * @param string $device_selection Device selection string.
     *
     * @return $this
     */
    public function setDeviceSelection($device_selection)
    {
        $this->container['device_selection'] = $device_selection;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Language that should be used to run tests.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Locale that should be used to run tests.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets test_series
     *
     * @return string
     */
    public function getTestSeries()
    {
        return $this->container['test_series'];
    }

    /**
     * Sets test_series
     *
     * @param string $test_series Name of the test series.
     *
     * @return $this
     */
    public function setTestSeries($test_series)
    {
        $this->container['test_series'] = $test_series;

        return $this;
    }

    /**
     * Gets test_parameters
     *
     * @return object
     */
    public function getTestParameters()
    {
        return $this->container['test_parameters'];
    }

    /**
     * Sets test_parameters
     *
     * @param object $test_parameters A JSON dictionary with additional test parameters
     *
     * @return $this
     */
    public function setTestParameters($test_parameters)
    {
        $this->container['test_parameters'] = $test_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


