<?php
/**
 * InlineResponse20051
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20051 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20051 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_51';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'error_group_id' => 'string',
        'error_id' => 'string',
        'errors_deleted' => 'int',
        'attachments_deleted' => 'int',
        'blobs_succeeded' => 'int',
        'blobs_failed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'error_group_id' => null,
        'error_id' => null,
        'errors_deleted' => null,
        'attachments_deleted' => null,
        'blobs_succeeded' => null,
        'blobs_failed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'appId',
        'error_group_id' => 'errorGroupId',
        'error_id' => 'errorId',
        'errors_deleted' => 'errorsDeleted',
        'attachments_deleted' => 'attachmentsDeleted',
        'blobs_succeeded' => 'blobsSucceeded',
        'blobs_failed' => 'blobsFailed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'error_group_id' => 'setErrorGroupId',
        'error_id' => 'setErrorId',
        'errors_deleted' => 'setErrorsDeleted',
        'attachments_deleted' => 'setAttachmentsDeleted',
        'blobs_succeeded' => 'setBlobsSucceeded',
        'blobs_failed' => 'setBlobsFailed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'error_group_id' => 'getErrorGroupId',
        'error_id' => 'getErrorId',
        'errors_deleted' => 'getErrorsDeleted',
        'attachments_deleted' => 'getAttachmentsDeleted',
        'blobs_succeeded' => 'getBlobsSucceeded',
        'blobs_failed' => 'getBlobsFailed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['error_group_id'] = isset($data['error_group_id']) ? $data['error_group_id'] : null;
        $this->container['error_id'] = isset($data['error_id']) ? $data['error_id'] : null;
        $this->container['errors_deleted'] = isset($data['errors_deleted']) ? $data['errors_deleted'] : null;
        $this->container['attachments_deleted'] = isset($data['attachments_deleted']) ? $data['attachments_deleted'] : null;
        $this->container['blobs_succeeded'] = isset($data['blobs_succeeded']) ? $data['blobs_succeeded'] : null;
        $this->container['blobs_failed'] = isset($data['blobs_failed']) ? $data['blobs_failed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets error_group_id
     *
     * @return string
     */
    public function getErrorGroupId()
    {
        return $this->container['error_group_id'];
    }

    /**
     * Sets error_group_id
     *
     * @param string $error_group_id error_group_id
     *
     * @return $this
     */
    public function setErrorGroupId($error_group_id)
    {
        $this->container['error_group_id'] = $error_group_id;

        return $this;
    }

    /**
     * Gets error_id
     *
     * @return string
     */
    public function getErrorId()
    {
        return $this->container['error_id'];
    }

    /**
     * Sets error_id
     *
     * @param string $error_id error_id
     *
     * @return $this
     */
    public function setErrorId($error_id)
    {
        $this->container['error_id'] = $error_id;

        return $this;
    }

    /**
     * Gets errors_deleted
     *
     * @return int
     */
    public function getErrorsDeleted()
    {
        return $this->container['errors_deleted'];
    }

    /**
     * Sets errors_deleted
     *
     * @param int $errors_deleted errors_deleted
     *
     * @return $this
     */
    public function setErrorsDeleted($errors_deleted)
    {
        $this->container['errors_deleted'] = $errors_deleted;

        return $this;
    }

    /**
     * Gets attachments_deleted
     *
     * @return int
     */
    public function getAttachmentsDeleted()
    {
        return $this->container['attachments_deleted'];
    }

    /**
     * Sets attachments_deleted
     *
     * @param int $attachments_deleted attachments_deleted
     *
     * @return $this
     */
    public function setAttachmentsDeleted($attachments_deleted)
    {
        $this->container['attachments_deleted'] = $attachments_deleted;

        return $this;
    }

    /**
     * Gets blobs_succeeded
     *
     * @return int
     */
    public function getBlobsSucceeded()
    {
        return $this->container['blobs_succeeded'];
    }

    /**
     * Sets blobs_succeeded
     *
     * @param int $blobs_succeeded blobs_succeeded
     *
     * @return $this
     */
    public function setBlobsSucceeded($blobs_succeeded)
    {
        $this->container['blobs_succeeded'] = $blobs_succeeded;

        return $this;
    }

    /**
     * Gets blobs_failed
     *
     * @return int
     */
    public function getBlobsFailed()
    {
        return $this->container['blobs_failed'];
    }

    /**
     * Sets blobs_failed
     *
     * @param int $blobs_failed blobs_failed
     *
     * @return $this
     */
    public function setBlobsFailed($blobs_failed)
    {
        $this->container['blobs_failed'] = $blobs_failed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


