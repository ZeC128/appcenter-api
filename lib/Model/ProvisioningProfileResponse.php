<?php
/**
 * ProvisioningProfileResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProvisioningProfileResponse Class Doc Comment
 *
 * @category Class
 * @description A response containing information about an iOS provisioning profile.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvisioningProfileResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProvisioningProfileResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'provisioning_profile_type' => 'string',
        'udids' => 'string[]',
        'provisioning_profile_name' => 'string',
        'team_identifier' => 'string',
        'provisioning_bundle_id' => 'string',
        'appex_profiles' => '\Swagger\Client\Model\ProvisioningProfileResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'provisioning_profile_type' => null,
        'udids' => null,
        'provisioning_profile_name' => null,
        'team_identifier' => null,
        'provisioning_bundle_id' => null,
        'appex_profiles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provisioning_profile_type' => 'provisioning_profile_type',
        'udids' => 'udids',
        'provisioning_profile_name' => 'provisioning_profile_name',
        'team_identifier' => 'team_identifier',
        'provisioning_bundle_id' => 'provisioning_bundle_id',
        'appex_profiles' => 'appex_profiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provisioning_profile_type' => 'setProvisioningProfileType',
        'udids' => 'setUdids',
        'provisioning_profile_name' => 'setProvisioningProfileName',
        'team_identifier' => 'setTeamIdentifier',
        'provisioning_bundle_id' => 'setProvisioningBundleId',
        'appex_profiles' => 'setAppexProfiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provisioning_profile_type' => 'getProvisioningProfileType',
        'udids' => 'getUdids',
        'provisioning_profile_name' => 'getProvisioningProfileName',
        'team_identifier' => 'getTeamIdentifier',
        'provisioning_bundle_id' => 'getProvisioningBundleId',
        'appex_profiles' => 'getAppexProfiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROVISIONING_PROFILE_TYPE_ADHOC = 'adhoc';
    const PROVISIONING_PROFILE_TYPE_ENTERPRISE = 'enterprise';
    const PROVISIONING_PROFILE_TYPE_OTHER = 'other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvisioningProfileTypeAllowableValues()
    {
        return [
            self::PROVISIONING_PROFILE_TYPE_ADHOC,
            self::PROVISIONING_PROFILE_TYPE_ENTERPRISE,
            self::PROVISIONING_PROFILE_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provisioning_profile_type'] = isset($data['provisioning_profile_type']) ? $data['provisioning_profile_type'] : null;
        $this->container['udids'] = isset($data['udids']) ? $data['udids'] : null;
        $this->container['provisioning_profile_name'] = isset($data['provisioning_profile_name']) ? $data['provisioning_profile_name'] : null;
        $this->container['team_identifier'] = isset($data['team_identifier']) ? $data['team_identifier'] : null;
        $this->container['provisioning_bundle_id'] = isset($data['provisioning_bundle_id']) ? $data['provisioning_bundle_id'] : null;
        $this->container['appex_profiles'] = isset($data['appex_profiles']) ? $data['appex_profiles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['provisioning_profile_type'] === null) {
            $invalidProperties[] = "'provisioning_profile_type' can't be null";
        }
        $allowedValues = $this->getProvisioningProfileTypeAllowableValues();
        if (!is_null($this->container['provisioning_profile_type']) && !in_array($this->container['provisioning_profile_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provisioning_profile_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provisioning_profile_type
     *
     * @return string
     */
    public function getProvisioningProfileType()
    {
        return $this->container['provisioning_profile_type'];
    }

    /**
     * Sets provisioning_profile_type
     *
     * @param string $provisioning_profile_type provisioning_profile_type
     *
     * @return $this
     */
    public function setProvisioningProfileType($provisioning_profile_type)
    {
        $allowedValues = $this->getProvisioningProfileTypeAllowableValues();
        if (!in_array($provisioning_profile_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provisioning_profile_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provisioning_profile_type'] = $provisioning_profile_type;

        return $this;
    }

    /**
     * Gets udids
     *
     * @return string[]
     */
    public function getUdids()
    {
        return $this->container['udids'];
    }

    /**
     * Sets udids
     *
     * @param string[] $udids udids
     *
     * @return $this
     */
    public function setUdids($udids)
    {
        $this->container['udids'] = $udids;

        return $this;
    }

    /**
     * Gets provisioning_profile_name
     *
     * @return string
     */
    public function getProvisioningProfileName()
    {
        return $this->container['provisioning_profile_name'];
    }

    /**
     * Sets provisioning_profile_name
     *
     * @param string $provisioning_profile_name The name of the provisioning profile.
     *
     * @return $this
     */
    public function setProvisioningProfileName($provisioning_profile_name)
    {
        $this->container['provisioning_profile_name'] = $provisioning_profile_name;

        return $this;
    }

    /**
     * Gets team_identifier
     *
     * @return string
     */
    public function getTeamIdentifier()
    {
        return $this->container['team_identifier'];
    }

    /**
     * Sets team_identifier
     *
     * @param string $team_identifier The team identifier.
     *
     * @return $this
     */
    public function setTeamIdentifier($team_identifier)
    {
        $this->container['team_identifier'] = $team_identifier;

        return $this;
    }

    /**
     * Gets provisioning_bundle_id
     *
     * @return string
     */
    public function getProvisioningBundleId()
    {
        return $this->container['provisioning_bundle_id'];
    }

    /**
     * Sets provisioning_bundle_id
     *
     * @param string $provisioning_bundle_id The bundle identifier associated with the profile.
     *
     * @return $this
     */
    public function setProvisioningBundleId($provisioning_bundle_id)
    {
        $this->container['provisioning_bundle_id'] = $provisioning_bundle_id;

        return $this;
    }

    /**
     * Gets appex_profiles
     *
     * @return \Swagger\Client\Model\ProvisioningProfileResponse[]
     */
    public function getAppexProfiles()
    {
        return $this->container['appex_profiles'];
    }

    /**
     * Sets appex_profiles
     *
     * @param \Swagger\Client\Model\ProvisioningProfileResponse[] $appex_profiles Array of provisioning profiles for any app extensions
     *
     * @return $this
     */
    public function setAppexProfiles($appex_profiles)
    {
        $this->container['appex_profiles'] = $appex_profiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


