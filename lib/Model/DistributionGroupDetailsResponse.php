<?php
/**
 * DistributionGroupDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DistributionGroupDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DistributionGroupDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DistributionGroupDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_shared' => 'bool',
        'total_apps_count' => 'float',
        'total_user_count' => 'float',
        'notified_user_count' => 'float',
        'group_type' => 'string',
        'users' => '\Swagger\Client\Model\InlineResponse20010[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_shared' => null,
        'total_apps_count' => null,
        'total_user_count' => null,
        'notified_user_count' => null,
        'group_type' => null,
        'users' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_shared' => 'is_shared',
        'total_apps_count' => 'total_apps_count',
        'total_user_count' => 'total_user_count',
        'notified_user_count' => 'notified_user_count',
        'group_type' => 'group_type',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_shared' => 'setIsShared',
        'total_apps_count' => 'setTotalAppsCount',
        'total_user_count' => 'setTotalUserCount',
        'notified_user_count' => 'setNotifiedUserCount',
        'group_type' => 'setGroupType',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_shared' => 'getIsShared',
        'total_apps_count' => 'getTotalAppsCount',
        'total_user_count' => 'getTotalUserCount',
        'notified_user_count' => 'getNotifiedUserCount',
        'group_type' => 'getGroupType',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GROUP_TYPE__DEFAULT = 'Default';
    const GROUP_TYPE_HOCKEY_APP_DEFAULT = 'HockeyAppDefault';
    const GROUP_TYPE_MICROSOFT_DOGFOODING = 'MicrosoftDogfooding';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupTypeAllowableValues()
    {
        return [
            self::GROUP_TYPE__DEFAULT,
            self::GROUP_TYPE_HOCKEY_APP_DEFAULT,
            self::GROUP_TYPE_MICROSOFT_DOGFOODING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_shared'] = isset($data['is_shared']) ? $data['is_shared'] : null;
        $this->container['total_apps_count'] = isset($data['total_apps_count']) ? $data['total_apps_count'] : null;
        $this->container['total_user_count'] = isset($data['total_user_count']) ? $data['total_user_count'] : null;
        $this->container['notified_user_count'] = isset($data['notified_user_count']) ? $data['notified_user_count'] : null;
        $this->container['group_type'] = isset($data['group_type']) ? $data['group_type'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($this->container['group_type']) && !in_array($this->container['group_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'group_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_shared
     *
     * @return bool
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool $is_shared Whether the distribution group is shared group or not
     *
     * @return $this
     */
    public function setIsShared($is_shared)
    {
        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets total_apps_count
     *
     * @return float
     */
    public function getTotalAppsCount()
    {
        return $this->container['total_apps_count'];
    }

    /**
     * Sets total_apps_count
     *
     * @param float $total_apps_count The count of apps associated with this distribution group
     *
     * @return $this
     */
    public function setTotalAppsCount($total_apps_count)
    {
        $this->container['total_apps_count'] = $total_apps_count;

        return $this;
    }

    /**
     * Gets total_user_count
     *
     * @return float
     */
    public function getTotalUserCount()
    {
        return $this->container['total_user_count'];
    }

    /**
     * Sets total_user_count
     *
     * @param float $total_user_count The count of users in the distribution group
     *
     * @return $this
     */
    public function setTotalUserCount($total_user_count)
    {
        $this->container['total_user_count'] = $total_user_count;

        return $this;
    }

    /**
     * Gets notified_user_count
     *
     * @return float
     */
    public function getNotifiedUserCount()
    {
        return $this->container['notified_user_count'];
    }

    /**
     * Sets notified_user_count
     *
     * @param float $notified_user_count The count of non-pending users in the distribution group who will be notified by new releases
     *
     * @return $this
     */
    public function setNotifiedUserCount($notified_user_count)
    {
        $this->container['notified_user_count'] = $notified_user_count;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return string
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param string $group_type Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)
     *
     * @return $this
     */
    public function setGroupType($group_type)
    {
        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($group_type) && !in_array($group_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'group_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Swagger\Client\Model\InlineResponse20010[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Swagger\Client\Model\InlineResponse20010[] $users The distribution group users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


