<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'device_count' => 'int',
        'previous_device_count' => 'int',
        'count' => 'int',
        'previous_count' => 'int',
        'count_per_device' => 'double',
        'count_per_session' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'string',
        'name' => 'string',
        'device_count' => 'int64',
        'previous_device_count' => 'int64',
        'count' => 'int64',
        'previous_count' => 'int64',
        'count_per_device' => 'double',
        'count_per_session' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'device_count' => 'device_count',
        'previous_device_count' => 'previous_device_count',
        'count' => 'count',
        'previous_count' => 'previous_count',
        'count_per_device' => 'count_per_device',
        'count_per_session' => 'count_per_session'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'device_count' => 'setDeviceCount',
        'previous_device_count' => 'setPreviousDeviceCount',
        'count' => 'setCount',
        'previous_count' => 'setPreviousCount',
        'count_per_device' => 'setCountPerDevice',
        'count_per_session' => 'setCountPerSession'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'device_count' => 'getDeviceCount',
        'previous_device_count' => 'getPreviousDeviceCount',
        'count' => 'getCount',
        'previous_count' => 'getPreviousCount',
        'count_per_device' => 'getCountPerDevice',
        'count_per_session' => 'getCountPerSession'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['device_count'] = isset($data['device_count']) ? $data['device_count'] : null;
        $this->container['previous_device_count'] = isset($data['previous_device_count']) ? $data['previous_device_count'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['previous_count'] = isset($data['previous_count']) ? $data['previous_count'] : null;
        $this->container['count_per_device'] = isset($data['count_per_device']) ? $data['count_per_device'] : null;
        $this->container['count_per_session'] = isset($data['count_per_session']) ? $data['count_per_session'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets device_count
     *
     * @return int
     */
    public function getDeviceCount()
    {
        return $this->container['device_count'];
    }

    /**
     * Sets device_count
     *
     * @param int $device_count device_count
     *
     * @return $this
     */
    public function setDeviceCount($device_count)
    {
        $this->container['device_count'] = $device_count;

        return $this;
    }

    /**
     * Gets previous_device_count
     *
     * @return int
     */
    public function getPreviousDeviceCount()
    {
        return $this->container['previous_device_count'];
    }

    /**
     * Sets previous_device_count
     *
     * @param int $previous_device_count The device count of previous time range of the event.
     *
     * @return $this
     */
    public function setPreviousDeviceCount($previous_device_count)
    {
        $this->container['previous_device_count'] = $previous_device_count;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets previous_count
     *
     * @return int
     */
    public function getPreviousCount()
    {
        return $this->container['previous_count'];
    }

    /**
     * Sets previous_count
     *
     * @param int $previous_count The event count of previous time range of the event.
     *
     * @return $this
     */
    public function setPreviousCount($previous_count)
    {
        $this->container['previous_count'] = $previous_count;

        return $this;
    }

    /**
     * Gets count_per_device
     *
     * @return double
     */
    public function getCountPerDevice()
    {
        return $this->container['count_per_device'];
    }

    /**
     * Sets count_per_device
     *
     * @param double $count_per_device count_per_device
     *
     * @return $this
     */
    public function setCountPerDevice($count_per_device)
    {
        $this->container['count_per_device'] = $count_per_device;

        return $this;
    }

    /**
     * Gets count_per_session
     *
     * @return double
     */
    public function getCountPerSession()
    {
        return $this->container['count_per_session'];
    }

    /**
     * Sets count_per_session
     *
     * @param double $count_per_session count_per_session
     *
     * @return $this
     */
    public function setCountPerSession($count_per_session)
    {
        $this->container['count_per_session'] = $count_per_session;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


