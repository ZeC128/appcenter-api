<?php
/**
 * TestReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestReport Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_upload_id' => 'string',
        'date' => 'string',
        'test_type' => 'string',
        'platform' => 'string',
        'stats' => '\Swagger\Client\Model\TestReportStats',
        'id' => 'string',
        'schema_version' => 'float',
        'revision' => 'float',
        'features' => '\Swagger\Client\Model\TestReportFeatures[]',
        'finished_device_snapshots' => 'string[]',
        'device_logs' => '\Swagger\Client\Model\TestReportDeviceLogs[]',
        'date_finished' => 'string',
        'error_message' => 'string',
        'snapshot_fatal_errors' => '\Swagger\Client\Model\TestReportSnapshotFatalErrors[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_upload_id' => null,
        'date' => null,
        'test_type' => null,
        'platform' => null,
        'stats' => null,
        'id' => null,
        'schema_version' => null,
        'revision' => null,
        'features' => null,
        'finished_device_snapshots' => null,
        'device_logs' => null,
        'date_finished' => null,
        'error_message' => null,
        'snapshot_fatal_errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_upload_id' => 'app_upload_id',
        'date' => 'date',
        'test_type' => 'testType',
        'platform' => 'platform',
        'stats' => 'stats',
        'id' => 'id',
        'schema_version' => 'schema_version',
        'revision' => 'revision',
        'features' => 'features',
        'finished_device_snapshots' => 'finished_device_snapshots',
        'device_logs' => 'device_logs',
        'date_finished' => 'date_finished',
        'error_message' => 'errorMessage',
        'snapshot_fatal_errors' => 'snapshot_fatal_errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_upload_id' => 'setAppUploadId',
        'date' => 'setDate',
        'test_type' => 'setTestType',
        'platform' => 'setPlatform',
        'stats' => 'setStats',
        'id' => 'setId',
        'schema_version' => 'setSchemaVersion',
        'revision' => 'setRevision',
        'features' => 'setFeatures',
        'finished_device_snapshots' => 'setFinishedDeviceSnapshots',
        'device_logs' => 'setDeviceLogs',
        'date_finished' => 'setDateFinished',
        'error_message' => 'setErrorMessage',
        'snapshot_fatal_errors' => 'setSnapshotFatalErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_upload_id' => 'getAppUploadId',
        'date' => 'getDate',
        'test_type' => 'getTestType',
        'platform' => 'getPlatform',
        'stats' => 'getStats',
        'id' => 'getId',
        'schema_version' => 'getSchemaVersion',
        'revision' => 'getRevision',
        'features' => 'getFeatures',
        'finished_device_snapshots' => 'getFinishedDeviceSnapshots',
        'device_logs' => 'getDeviceLogs',
        'date_finished' => 'getDateFinished',
        'error_message' => 'getErrorMessage',
        'snapshot_fatal_errors' => 'getSnapshotFatalErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_upload_id'] = isset($data['app_upload_id']) ? $data['app_upload_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['test_type'] = isset($data['test_type']) ? $data['test_type'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['schema_version'] = isset($data['schema_version']) ? $data['schema_version'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['finished_device_snapshots'] = isset($data['finished_device_snapshots']) ? $data['finished_device_snapshots'] : null;
        $this->container['device_logs'] = isset($data['device_logs']) ? $data['device_logs'] : null;
        $this->container['date_finished'] = isset($data['date_finished']) ? $data['date_finished'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['snapshot_fatal_errors'] = isset($data['snapshot_fatal_errors']) ? $data['snapshot_fatal_errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_upload_id'] === null) {
            $invalidProperties[] = "'app_upload_id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['test_type'] === null) {
            $invalidProperties[] = "'test_type' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['schema_version'] === null) {
            $invalidProperties[] = "'schema_version' can't be null";
        }
        if ($this->container['revision'] === null) {
            $invalidProperties[] = "'revision' can't be null";
        }
        if ($this->container['features'] === null) {
            $invalidProperties[] = "'features' can't be null";
        }
        if ($this->container['finished_device_snapshots'] === null) {
            $invalidProperties[] = "'finished_device_snapshots' can't be null";
        }
        if ($this->container['device_logs'] === null) {
            $invalidProperties[] = "'device_logs' can't be null";
        }
        if ($this->container['date_finished'] === null) {
            $invalidProperties[] = "'date_finished' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_upload_id
     *
     * @return string
     */
    public function getAppUploadId()
    {
        return $this->container['app_upload_id'];
    }

    /**
     * Sets app_upload_id
     *
     * @param string $app_upload_id app_upload_id
     *
     * @return $this
     */
    public function setAppUploadId($app_upload_id)
    {
        $this->container['app_upload_id'] = $app_upload_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return string
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param string $test_type test_type
     *
     * @return $this
     */
    public function setTestType($test_type)
    {
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Swagger\Client\Model\TestReportStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Swagger\Client\Model\TestReportStats $stats stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets schema_version
     *
     * @return float
     */
    public function getSchemaVersion()
    {
        return $this->container['schema_version'];
    }

    /**
     * Sets schema_version
     *
     * @param float $schema_version schema_version
     *
     * @return $this
     */
    public function setSchemaVersion($schema_version)
    {
        $this->container['schema_version'] = $schema_version;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return float
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param float $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\TestReportFeatures[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\TestReportFeatures[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets finished_device_snapshots
     *
     * @return string[]
     */
    public function getFinishedDeviceSnapshots()
    {
        return $this->container['finished_device_snapshots'];
    }

    /**
     * Sets finished_device_snapshots
     *
     * @param string[] $finished_device_snapshots finished_device_snapshots
     *
     * @return $this
     */
    public function setFinishedDeviceSnapshots($finished_device_snapshots)
    {
        $this->container['finished_device_snapshots'] = $finished_device_snapshots;

        return $this;
    }

    /**
     * Gets device_logs
     *
     * @return \Swagger\Client\Model\TestReportDeviceLogs[]
     */
    public function getDeviceLogs()
    {
        return $this->container['device_logs'];
    }

    /**
     * Sets device_logs
     *
     * @param \Swagger\Client\Model\TestReportDeviceLogs[] $device_logs device_logs
     *
     * @return $this
     */
    public function setDeviceLogs($device_logs)
    {
        $this->container['device_logs'] = $device_logs;

        return $this;
    }

    /**
     * Gets date_finished
     *
     * @return string
     */
    public function getDateFinished()
    {
        return $this->container['date_finished'];
    }

    /**
     * Sets date_finished
     *
     * @param string $date_finished date_finished
     *
     * @return $this
     */
    public function setDateFinished($date_finished)
    {
        $this->container['date_finished'] = $date_finished;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets snapshot_fatal_errors
     *
     * @return \Swagger\Client\Model\TestReportSnapshotFatalErrors[]
     */
    public function getSnapshotFatalErrors()
    {
        return $this->container['snapshot_fatal_errors'];
    }

    /**
     * Sets snapshot_fatal_errors
     *
     * @param \Swagger\Client\Model\TestReportSnapshotFatalErrors[] $snapshot_fatal_errors snapshot_fatal_errors
     *
     * @return $this
     */
    public function setSnapshotFatalErrors($snapshot_fatal_errors)
    {
        $this->container['snapshot_fatal_errors'] = $snapshot_fatal_errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


