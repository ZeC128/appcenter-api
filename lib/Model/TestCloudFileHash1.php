<?php
/**
 * TestCloudFileHash1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestCloudFileHash1 Class Doc Comment
 *
 * @category Class
 * @description Hash, type, path and byte range of a file that is required in test run
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestCloudFileHash1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Test Cloud File Hash_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_type' => 'string',
        'checksum' => 'string',
        'relative_path' => 'string',
        'byte_range' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_type' => null,
        'checksum' => null,
        'relative_path' => null,
        'byte_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_type' => 'file_type',
        'checksum' => 'checksum',
        'relative_path' => 'relative_path',
        'byte_range' => 'byte_range'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_type' => 'setFileType',
        'checksum' => 'setChecksum',
        'relative_path' => 'setRelativePath',
        'byte_range' => 'setByteRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_type' => 'getFileType',
        'checksum' => 'getChecksum',
        'relative_path' => 'getRelativePath',
        'byte_range' => 'getByteRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FILE_TYPE_DSYM_FILE = 'dsym-file';
    const FILE_TYPE_APP_FILE = 'app-file';
    const FILE_TYPE_TEST_FILE = 'test-file';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_DSYM_FILE,
            self::FILE_TYPE_APP_FILE,
            self::FILE_TYPE_TEST_FILE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['checksum'] = isset($data['checksum']) ? $data['checksum'] : null;
        $this->container['relative_path'] = isset($data['relative_path']) ? $data['relative_path'] : null;
        $this->container['byte_range'] = isset($data['byte_range']) ? $data['byte_range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_type'] === null) {
            $invalidProperties[] = "'file_type' can't be null";
        }
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($this->container['file_type']) && !in_array($this->container['file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['checksum'] === null) {
            $invalidProperties[] = "'checksum' can't be null";
        }
        if ($this->container['relative_path'] === null) {
            $invalidProperties[] = "'relative_path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type Type of the file
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string $checksum SHA256 hash of the file
     *
     * @return $this
     */
    public function setChecksum($checksum)
    {
        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets relative_path
     *
     * @return string
     */
    public function getRelativePath()
    {
        return $this->container['relative_path'];
    }

    /**
     * Sets relative_path
     *
     * @param string $relative_path Relative path of the file
     *
     * @return $this
     */
    public function setRelativePath($relative_path)
    {
        $this->container['relative_path'] = $relative_path;

        return $this;
    }

    /**
     * Gets byte_range
     *
     * @return string
     */
    public function getByteRange()
    {
        return $this->container['byte_range'];
    }

    /**
     * Sets byte_range
     *
     * @param string $byte_range Range of bytes required to verify ownership of the file
     *
     * @return $this
     */
    public function setByteRange($byte_range)
    {
        $this->container['byte_range'] = $byte_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


