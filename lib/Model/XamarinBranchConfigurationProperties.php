<?php
/**
 * XamarinBranchConfigurationProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * XamarinBranchConfigurationProperties Class Doc Comment
 *
 * @category Class
 * @description Build configuration for Xamarin projects
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XamarinBranchConfigurationProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XamarinBranchConfigurationProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sln_path' => 'string',
        'is_sim_build' => 'bool',
        'args' => 'string',
        'configuration' => 'string',
        'p12_file' => 'string',
        'p12_pwd' => 'string',
        'prov_profile' => 'string',
        'mono_version' => 'string',
        'sdk_bundle' => 'string',
        'symlink' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sln_path' => null,
        'is_sim_build' => null,
        'args' => null,
        'configuration' => null,
        'p12_file' => null,
        'p12_pwd' => null,
        'prov_profile' => null,
        'mono_version' => null,
        'sdk_bundle' => null,
        'symlink' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sln_path' => 'slnPath',
        'is_sim_build' => 'isSimBuild',
        'args' => 'args',
        'configuration' => 'configuration',
        'p12_file' => 'p12File',
        'p12_pwd' => 'p12Pwd',
        'prov_profile' => 'provProfile',
        'mono_version' => 'monoVersion',
        'sdk_bundle' => 'sdkBundle',
        'symlink' => 'symlink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sln_path' => 'setSlnPath',
        'is_sim_build' => 'setIsSimBuild',
        'args' => 'setArgs',
        'configuration' => 'setConfiguration',
        'p12_file' => 'setP12File',
        'p12_pwd' => 'setP12Pwd',
        'prov_profile' => 'setProvProfile',
        'mono_version' => 'setMonoVersion',
        'sdk_bundle' => 'setSdkBundle',
        'symlink' => 'setSymlink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sln_path' => 'getSlnPath',
        'is_sim_build' => 'getIsSimBuild',
        'args' => 'getArgs',
        'configuration' => 'getConfiguration',
        'p12_file' => 'getP12File',
        'p12_pwd' => 'getP12Pwd',
        'prov_profile' => 'getProvProfile',
        'mono_version' => 'getMonoVersion',
        'sdk_bundle' => 'getSdkBundle',
        'symlink' => 'getSymlink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sln_path'] = isset($data['sln_path']) ? $data['sln_path'] : null;
        $this->container['is_sim_build'] = isset($data['is_sim_build']) ? $data['is_sim_build'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['p12_file'] = isset($data['p12_file']) ? $data['p12_file'] : null;
        $this->container['p12_pwd'] = isset($data['p12_pwd']) ? $data['p12_pwd'] : null;
        $this->container['prov_profile'] = isset($data['prov_profile']) ? $data['prov_profile'] : null;
        $this->container['mono_version'] = isset($data['mono_version']) ? $data['mono_version'] : null;
        $this->container['sdk_bundle'] = isset($data['sdk_bundle']) ? $data['sdk_bundle'] : null;
        $this->container['symlink'] = isset($data['symlink']) ? $data['symlink'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sln_path
     *
     * @return string
     */
    public function getSlnPath()
    {
        return $this->container['sln_path'];
    }

    /**
     * Sets sln_path
     *
     * @param string $sln_path sln_path
     *
     * @return $this
     */
    public function setSlnPath($sln_path)
    {
        $this->container['sln_path'] = $sln_path;

        return $this;
    }

    /**
     * Gets is_sim_build
     *
     * @return bool
     */
    public function getIsSimBuild()
    {
        return $this->container['is_sim_build'];
    }

    /**
     * Sets is_sim_build
     *
     * @param bool $is_sim_build is_sim_build
     *
     * @return $this
     */
    public function setIsSimBuild($is_sim_build)
    {
        $this->container['is_sim_build'] = $is_sim_build;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string $args args
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets p12_file
     *
     * @return string
     */
    public function getP12File()
    {
        return $this->container['p12_file'];
    }

    /**
     * Sets p12_file
     *
     * @param string $p12_file p12_file
     *
     * @return $this
     */
    public function setP12File($p12_file)
    {
        $this->container['p12_file'] = $p12_file;

        return $this;
    }

    /**
     * Gets p12_pwd
     *
     * @return string
     */
    public function getP12Pwd()
    {
        return $this->container['p12_pwd'];
    }

    /**
     * Sets p12_pwd
     *
     * @param string $p12_pwd p12_pwd
     *
     * @return $this
     */
    public function setP12Pwd($p12_pwd)
    {
        $this->container['p12_pwd'] = $p12_pwd;

        return $this;
    }

    /**
     * Gets prov_profile
     *
     * @return string
     */
    public function getProvProfile()
    {
        return $this->container['prov_profile'];
    }

    /**
     * Sets prov_profile
     *
     * @param string $prov_profile prov_profile
     *
     * @return $this
     */
    public function setProvProfile($prov_profile)
    {
        $this->container['prov_profile'] = $prov_profile;

        return $this;
    }

    /**
     * Gets mono_version
     *
     * @return string
     */
    public function getMonoVersion()
    {
        return $this->container['mono_version'];
    }

    /**
     * Sets mono_version
     *
     * @param string $mono_version mono_version
     *
     * @return $this
     */
    public function setMonoVersion($mono_version)
    {
        $this->container['mono_version'] = $mono_version;

        return $this;
    }

    /**
     * Gets sdk_bundle
     *
     * @return string
     */
    public function getSdkBundle()
    {
        return $this->container['sdk_bundle'];
    }

    /**
     * Sets sdk_bundle
     *
     * @param string $sdk_bundle sdk_bundle
     *
     * @return $this
     */
    public function setSdkBundle($sdk_bundle)
    {
        $this->container['sdk_bundle'] = $sdk_bundle;

        return $this;
    }

    /**
     * Gets symlink
     *
     * @return string
     */
    public function getSymlink()
    {
        return $this->container['symlink'];
    }

    /**
     * Sets symlink
     *
     * @param string $symlink Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
     *
     * @return $this
     */
    public function setSymlink($symlink)
    {
        $this->container['symlink'] = $symlink;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


