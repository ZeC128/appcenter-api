<?php
/**
 * AggregatedBillingInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AggregatedBillingInformation Class Doc Comment
 *
 * @category Class
 * @description Aggregated Billing Information for a user or an organization
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregatedBillingInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AggregatedBillingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'timestamp' => 'string',
        'id' => 'string',
        'billing_plans' => '\Swagger\Client\Model\InlineResponse20013BillingPlans',
        'usage' => '\Swagger\Client\Model\InlineResponse20013Usage',
        'azure_subscription_id' => 'string',
        'azure_subscription_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'timestamp' => 'dateTime',
        'id' => null,
        'billing_plans' => null,
        'usage' => null,
        'azure_subscription_id' => null,
        'azure_subscription_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'timestamp' => 'timestamp',
        'id' => 'id',
        'billing_plans' => 'billingPlans',
        'usage' => 'usage',
        'azure_subscription_id' => 'azureSubscriptionId',
        'azure_subscription_state' => 'azureSubscriptionState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'timestamp' => 'setTimestamp',
        'id' => 'setId',
        'billing_plans' => 'setBillingPlans',
        'usage' => 'setUsage',
        'azure_subscription_id' => 'setAzureSubscriptionId',
        'azure_subscription_state' => 'setAzureSubscriptionState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'timestamp' => 'getTimestamp',
        'id' => 'getId',
        'billing_plans' => 'getBillingPlans',
        'usage' => 'getUsage',
        'azure_subscription_id' => 'getAzureSubscriptionId',
        'azure_subscription_state' => 'getAzureSubscriptionState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AZURE_SUBSCRIPTION_STATE_ENABLED = 'Enabled';
    const AZURE_SUBSCRIPTION_STATE_DISABLED = 'Disabled';
    const AZURE_SUBSCRIPTION_STATE_NOT_SET = 'NotSet';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAzureSubscriptionStateAllowableValues()
    {
        return [
            self::AZURE_SUBSCRIPTION_STATE_ENABLED,
            self::AZURE_SUBSCRIPTION_STATE_DISABLED,
            self::AZURE_SUBSCRIPTION_STATE_NOT_SET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['billing_plans'] = isset($data['billing_plans']) ? $data['billing_plans'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['azure_subscription_id'] = isset($data['azure_subscription_id']) ? $data['azure_subscription_id'] : null;
        $this->container['azure_subscription_state'] = isset($data['azure_subscription_state']) ? $data['azure_subscription_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAzureSubscriptionStateAllowableValues();
        if (!is_null($this->container['azure_subscription_state']) && !in_array($this->container['azure_subscription_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'azure_subscription_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version of the Billing Information schema
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp The ISO 8601 datetime of last modification
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the user or organization
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets billing_plans
     *
     * @return \Swagger\Client\Model\InlineResponse20013BillingPlans
     */
    public function getBillingPlans()
    {
        return $this->container['billing_plans'];
    }

    /**
     * Sets billing_plans
     *
     * @param \Swagger\Client\Model\InlineResponse20013BillingPlans $billing_plans billing_plans
     *
     * @return $this
     */
    public function setBillingPlans($billing_plans)
    {
        $this->container['billing_plans'] = $billing_plans;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \Swagger\Client\Model\InlineResponse20013Usage
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \Swagger\Client\Model\InlineResponse20013Usage $usage usage
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets azure_subscription_id
     *
     * @return string
     */
    public function getAzureSubscriptionId()
    {
        return $this->container['azure_subscription_id'];
    }

    /**
     * Sets azure_subscription_id
     *
     * @param string $azure_subscription_id Unique identifier for the Azure subscription used for billing
     *
     * @return $this
     */
    public function setAzureSubscriptionId($azure_subscription_id)
    {
        $this->container['azure_subscription_id'] = $azure_subscription_id;

        return $this;
    }

    /**
     * Gets azure_subscription_state
     *
     * @return string
     */
    public function getAzureSubscriptionState()
    {
        return $this->container['azure_subscription_state'];
    }

    /**
     * Sets azure_subscription_state
     *
     * @param string $azure_subscription_state State of the Azure subscription used for billing
     *
     * @return $this
     */
    public function setAzureSubscriptionState($azure_subscription_state)
    {
        $allowedValues = $this->getAzureSubscriptionStateAllowableValues();
        if (!is_null($azure_subscription_state) && !in_array($azure_subscription_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'azure_subscription_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['azure_subscription_state'] = $azure_subscription_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


