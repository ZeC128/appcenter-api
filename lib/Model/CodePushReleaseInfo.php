<?php
/**
 * CodePushReleaseInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CodePushReleaseInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CodePushReleaseInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CodePushReleaseInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'target_binary_range' => 'string',
        'description' => 'string',
        'is_disabled' => 'bool',
        'is_mandatory' => 'bool',
        'rollout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'target_binary_range' => null,
        'description' => null,
        'is_disabled' => null,
        'is_mandatory' => null,
        'rollout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'target_binary_range' => 'target_binary_range',
        'description' => 'description',
        'is_disabled' => 'is_disabled',
        'is_mandatory' => 'is_mandatory',
        'rollout' => 'rollout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'target_binary_range' => 'setTargetBinaryRange',
        'description' => 'setDescription',
        'is_disabled' => 'setIsDisabled',
        'is_mandatory' => 'setIsMandatory',
        'rollout' => 'setRollout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'target_binary_range' => 'getTargetBinaryRange',
        'description' => 'getDescription',
        'is_disabled' => 'getIsDisabled',
        'is_mandatory' => 'getIsMandatory',
        'rollout' => 'getRollout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target_binary_range'] = isset($data['target_binary_range']) ? $data['target_binary_range'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_disabled'] = isset($data['is_disabled']) ? $data['is_disabled'] : null;
        $this->container['is_mandatory'] = isset($data['is_mandatory']) ? $data['is_mandatory'] : null;
        $this->container['rollout'] = isset($data['rollout']) ? $data['rollout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rollout']) && ($this->container['rollout'] > 100)) {
            $invalidProperties[] = "invalid value for 'rollout', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['rollout']) && ($this->container['rollout'] < 1)) {
            $invalidProperties[] = "invalid value for 'rollout', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets target_binary_range
     *
     * @return string
     */
    public function getTargetBinaryRange()
    {
        return $this->container['target_binary_range'];
    }

    /**
     * Sets target_binary_range
     *
     * @param string $target_binary_range target_binary_range
     *
     * @return $this
     */
    public function setTargetBinaryRange($target_binary_range)
    {
        $this->container['target_binary_range'] = $target_binary_range;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool $is_disabled is_disabled
     *
     * @return $this
     */
    public function setIsDisabled($is_disabled)
    {
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets is_mandatory
     *
     * @return bool
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory
     *
     * @param bool $is_mandatory is_mandatory
     *
     * @return $this
     */
    public function setIsMandatory($is_mandatory)
    {
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets rollout
     *
     * @return int
     */
    public function getRollout()
    {
        return $this->container['rollout'];
    }

    /**
     * Sets rollout
     *
     * @param int $rollout rollout
     *
     * @return $this
     */
    public function setRollout($rollout)
    {

        if (!is_null($rollout) && ($rollout > 100)) {
            throw new \InvalidArgumentException('invalid value for $rollout when calling CodePushReleaseInfo., must be smaller than or equal to 100.');
        }
        if (!is_null($rollout) && ($rollout < 1)) {
            throw new \InvalidArgumentException('invalid value for $rollout when calling CodePushReleaseInfo., must be bigger than or equal to 1.');
        }

        $this->container['rollout'] = $rollout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


