<?php
/**
 * AppResponseInternal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AppResponseInternal Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppResponseInternal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppResponseInternal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feature_flags' => 'string[]',
        'repositories' => '\Swagger\Client\Model\AppResponseInternalRepositories[]',
        'user_permissions' => '\Swagger\Client\Model\AppResponseInternalUserPermissions',
        'cutover_from_hockeyapp_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feature_flags' => null,
        'repositories' => null,
        'user_permissions' => null,
        'cutover_from_hockeyapp_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature_flags' => 'feature_flags',
        'repositories' => 'repositories',
        'user_permissions' => 'user_permissions',
        'cutover_from_hockeyapp_at' => 'cutover_from_hockeyapp_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature_flags' => 'setFeatureFlags',
        'repositories' => 'setRepositories',
        'user_permissions' => 'setUserPermissions',
        'cutover_from_hockeyapp_at' => 'setCutoverFromHockeyappAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature_flags' => 'getFeatureFlags',
        'repositories' => 'getRepositories',
        'user_permissions' => 'getUserPermissions',
        'cutover_from_hockeyapp_at' => 'getCutoverFromHockeyappAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feature_flags'] = isset($data['feature_flags']) ? $data['feature_flags'] : null;
        $this->container['repositories'] = isset($data['repositories']) ? $data['repositories'] : null;
        $this->container['user_permissions'] = isset($data['user_permissions']) ? $data['user_permissions'] : null;
        $this->container['cutover_from_hockeyapp_at'] = isset($data['cutover_from_hockeyapp_at']) ? $data['cutover_from_hockeyapp_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feature_flags
     *
     * @return string[]
     */
    public function getFeatureFlags()
    {
        return $this->container['feature_flags'];
    }

    /**
     * Sets feature_flags
     *
     * @param string[] $feature_flags The feature flags that are enabled for this app
     *
     * @return $this
     */
    public function setFeatureFlags($feature_flags)
    {
        $this->container['feature_flags'] = $feature_flags;

        return $this;
    }

    /**
     * Gets repositories
     *
     * @return \Swagger\Client\Model\AppResponseInternalRepositories[]
     */
    public function getRepositories()
    {
        return $this->container['repositories'];
    }

    /**
     * Sets repositories
     *
     * @param \Swagger\Client\Model\AppResponseInternalRepositories[] $repositories The repositories associated with this app
     *
     * @return $this
     */
    public function setRepositories($repositories)
    {
        $this->container['repositories'] = $repositories;

        return $this;
    }

    /**
     * Gets user_permissions
     *
     * @return \Swagger\Client\Model\AppResponseInternalUserPermissions
     */
    public function getUserPermissions()
    {
        return $this->container['user_permissions'];
    }

    /**
     * Sets user_permissions
     *
     * @param \Swagger\Client\Model\AppResponseInternalUserPermissions $user_permissions user_permissions
     *
     * @return $this
     */
    public function setUserPermissions($user_permissions)
    {
        $this->container['user_permissions'] = $user_permissions;

        return $this;
    }

    /**
     * Gets cutover_from_hockeyapp_at
     *
     * @return string
     */
    public function getCutoverFromHockeyappAt()
    {
        return $this->container['cutover_from_hockeyapp_at'];
    }

    /**
     * Sets cutover_from_hockeyapp_at
     *
     * @param string $cutover_from_hockeyapp_at The cutover date of this app
     *
     * @return $this
     */
    public function setCutoverFromHockeyappAt($cutover_from_hockeyapp_at)
    {
        $this->container['cutover_from_hockeyapp_at'] = $cutover_from_hockeyapp_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


