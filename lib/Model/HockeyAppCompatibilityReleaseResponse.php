<?php
/**
 * HockeyAppCompatibilityReleaseResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HockeyAppCompatibilityReleaseResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HockeyAppCompatibilityReleaseResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HockeyAppCompatibilityReleaseResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'shortversion' => 'string',
        'version' => 'string',
        'uploaded_at' => '\DateTime',
        'appsize' => 'int',
        'notes' => 'string',
        'mandatory' => 'bool',
        'external' => 'bool',
        'device_family' => 'string',
        'minimum_os_version' => 'string',
        'install_url' => 'string',
        'bundle_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'shortversion' => null,
        'version' => null,
        'uploaded_at' => 'date-time',
        'appsize' => null,
        'notes' => null,
        'mandatory' => null,
        'external' => null,
        'device_family' => null,
        'minimum_os_version' => null,
        'install_url' => null,
        'bundle_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shortversion' => 'shortversion',
        'version' => 'version',
        'uploaded_at' => 'uploaded_at',
        'appsize' => 'appsize',
        'notes' => 'notes',
        'mandatory' => 'mandatory',
        'external' => 'external',
        'device_family' => 'device_family',
        'minimum_os_version' => 'minimum_os_version',
        'install_url' => 'install_url',
        'bundle_identifier' => 'bundle_identifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shortversion' => 'setShortversion',
        'version' => 'setVersion',
        'uploaded_at' => 'setUploadedAt',
        'appsize' => 'setAppsize',
        'notes' => 'setNotes',
        'mandatory' => 'setMandatory',
        'external' => 'setExternal',
        'device_family' => 'setDeviceFamily',
        'minimum_os_version' => 'setMinimumOsVersion',
        'install_url' => 'setInstallUrl',
        'bundle_identifier' => 'setBundleIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shortversion' => 'getShortversion',
        'version' => 'getVersion',
        'uploaded_at' => 'getUploadedAt',
        'appsize' => 'getAppsize',
        'notes' => 'getNotes',
        'mandatory' => 'getMandatory',
        'external' => 'getExternal',
        'device_family' => 'getDeviceFamily',
        'minimum_os_version' => 'getMinimumOsVersion',
        'install_url' => 'getInstallUrl',
        'bundle_identifier' => 'getBundleIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['shortversion'] = isset($data['shortversion']) ? $data['shortversion'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['uploaded_at'] = isset($data['uploaded_at']) ? $data['uploaded_at'] : null;
        $this->container['appsize'] = isset($data['appsize']) ? $data['appsize'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['mandatory'] = isset($data['mandatory']) ? $data['mandatory'] : null;
        $this->container['external'] = isset($data['external']) ? $data['external'] : null;
        $this->container['device_family'] = isset($data['device_family']) ? $data['device_family'] : null;
        $this->container['minimum_os_version'] = isset($data['minimum_os_version']) ? $data['minimum_os_version'] : null;
        $this->container['install_url'] = isset($data['install_url']) ? $data['install_url'] : null;
        $this->container['bundle_identifier'] = isset($data['bundle_identifier']) ? $data['bundle_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shortversion
     *
     * @return string
     */
    public function getShortversion()
    {
        return $this->container['shortversion'];
    }

    /**
     * Sets shortversion
     *
     * @param string $shortversion shortversion
     *
     * @return $this
     */
    public function setShortversion($shortversion)
    {
        $this->container['shortversion'] = $shortversion;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets uploaded_at
     *
     * @return \DateTime
     */
    public function getUploadedAt()
    {
        return $this->container['uploaded_at'];
    }

    /**
     * Sets uploaded_at
     *
     * @param \DateTime $uploaded_at uploaded_at
     *
     * @return $this
     */
    public function setUploadedAt($uploaded_at)
    {
        $this->container['uploaded_at'] = $uploaded_at;

        return $this;
    }

    /**
     * Gets appsize
     *
     * @return int
     */
    public function getAppsize()
    {
        return $this->container['appsize'];
    }

    /**
     * Sets appsize
     *
     * @param int $appsize appsize
     *
     * @return $this
     */
    public function setAppsize($appsize)
    {
        $this->container['appsize'] = $appsize;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets mandatory
     *
     * @return bool
     */
    public function getMandatory()
    {
        return $this->container['mandatory'];
    }

    /**
     * Sets mandatory
     *
     * @param bool $mandatory mandatory
     *
     * @return $this
     */
    public function setMandatory($mandatory)
    {
        $this->container['mandatory'] = $mandatory;

        return $this;
    }

    /**
     * Gets external
     *
     * @return bool
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param bool $external external
     *
     * @return $this
     */
    public function setExternal($external)
    {
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets device_family
     *
     * @return string
     */
    public function getDeviceFamily()
    {
        return $this->container['device_family'];
    }

    /**
     * Sets device_family
     *
     * @param string $device_family device_family
     *
     * @return $this
     */
    public function setDeviceFamily($device_family)
    {
        $this->container['device_family'] = $device_family;

        return $this;
    }

    /**
     * Gets minimum_os_version
     *
     * @return string
     */
    public function getMinimumOsVersion()
    {
        return $this->container['minimum_os_version'];
    }

    /**
     * Sets minimum_os_version
     *
     * @param string $minimum_os_version minimum_os_version
     *
     * @return $this
     */
    public function setMinimumOsVersion($minimum_os_version)
    {
        $this->container['minimum_os_version'] = $minimum_os_version;

        return $this;
    }

    /**
     * Gets install_url
     *
     * @return string
     */
    public function getInstallUrl()
    {
        return $this->container['install_url'];
    }

    /**
     * Sets install_url
     *
     * @param string $install_url install_url
     *
     * @return $this
     */
    public function setInstallUrl($install_url)
    {
        $this->container['install_url'] = $install_url;

        return $this;
    }

    /**
     * Gets bundle_identifier
     *
     * @return string
     */
    public function getBundleIdentifier()
    {
        return $this->container['bundle_identifier'];
    }

    /**
     * Sets bundle_identifier
     *
     * @param string $bundle_identifier bundle_identifier
     *
     * @return $this
     */
    public function setBundleIdentifier($bundle_identifier)
    {
        $this->container['bundle_identifier'] = $bundle_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


