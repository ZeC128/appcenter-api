<?php
/**
 * ErrorGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ErrorGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ErrorGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_group_id' => 'string',
        'app_version' => 'string',
        'app_build' => 'string',
        'count' => 'int',
        'device_count' => 'int',
        'first_occurrence' => '\DateTime',
        'last_occurrence' => '\DateTime',
        'exception_type' => 'string',
        'exception_message' => 'string',
        'exception_class_name' => 'string',
        'exception_class_method' => 'bool',
        'exception_method' => 'string',
        'exception_app_code' => 'bool',
        'exception_file' => 'string',
        'exception_line' => 'string',
        'code_raw' => 'string',
        'reason_frames' => 'object[]',
        'hidden' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_group_id' => null,
        'app_version' => null,
        'app_build' => null,
        'count' => 'int64',
        'device_count' => 'int64',
        'first_occurrence' => 'date-time',
        'last_occurrence' => 'date-time',
        'exception_type' => null,
        'exception_message' => null,
        'exception_class_name' => null,
        'exception_class_method' => null,
        'exception_method' => null,
        'exception_app_code' => null,
        'exception_file' => null,
        'exception_line' => null,
        'code_raw' => null,
        'reason_frames' => null,
        'hidden' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_group_id' => 'errorGroupId',
        'app_version' => 'appVersion',
        'app_build' => 'appBuild',
        'count' => 'count',
        'device_count' => 'deviceCount',
        'first_occurrence' => 'firstOccurrence',
        'last_occurrence' => 'lastOccurrence',
        'exception_type' => 'exceptionType',
        'exception_message' => 'exceptionMessage',
        'exception_class_name' => 'exceptionClassName',
        'exception_class_method' => 'exceptionClassMethod',
        'exception_method' => 'exceptionMethod',
        'exception_app_code' => 'exceptionAppCode',
        'exception_file' => 'exceptionFile',
        'exception_line' => 'exceptionLine',
        'code_raw' => 'codeRaw',
        'reason_frames' => 'reasonFrames',
        'hidden' => 'hidden'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_group_id' => 'setErrorGroupId',
        'app_version' => 'setAppVersion',
        'app_build' => 'setAppBuild',
        'count' => 'setCount',
        'device_count' => 'setDeviceCount',
        'first_occurrence' => 'setFirstOccurrence',
        'last_occurrence' => 'setLastOccurrence',
        'exception_type' => 'setExceptionType',
        'exception_message' => 'setExceptionMessage',
        'exception_class_name' => 'setExceptionClassName',
        'exception_class_method' => 'setExceptionClassMethod',
        'exception_method' => 'setExceptionMethod',
        'exception_app_code' => 'setExceptionAppCode',
        'exception_file' => 'setExceptionFile',
        'exception_line' => 'setExceptionLine',
        'code_raw' => 'setCodeRaw',
        'reason_frames' => 'setReasonFrames',
        'hidden' => 'setHidden'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_group_id' => 'getErrorGroupId',
        'app_version' => 'getAppVersion',
        'app_build' => 'getAppBuild',
        'count' => 'getCount',
        'device_count' => 'getDeviceCount',
        'first_occurrence' => 'getFirstOccurrence',
        'last_occurrence' => 'getLastOccurrence',
        'exception_type' => 'getExceptionType',
        'exception_message' => 'getExceptionMessage',
        'exception_class_name' => 'getExceptionClassName',
        'exception_class_method' => 'getExceptionClassMethod',
        'exception_method' => 'getExceptionMethod',
        'exception_app_code' => 'getExceptionAppCode',
        'exception_file' => 'getExceptionFile',
        'exception_line' => 'getExceptionLine',
        'code_raw' => 'getCodeRaw',
        'reason_frames' => 'getReasonFrames',
        'hidden' => 'getHidden'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_group_id'] = isset($data['error_group_id']) ? $data['error_group_id'] : null;
        $this->container['app_version'] = isset($data['app_version']) ? $data['app_version'] : null;
        $this->container['app_build'] = isset($data['app_build']) ? $data['app_build'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['device_count'] = isset($data['device_count']) ? $data['device_count'] : null;
        $this->container['first_occurrence'] = isset($data['first_occurrence']) ? $data['first_occurrence'] : null;
        $this->container['last_occurrence'] = isset($data['last_occurrence']) ? $data['last_occurrence'] : null;
        $this->container['exception_type'] = isset($data['exception_type']) ? $data['exception_type'] : null;
        $this->container['exception_message'] = isset($data['exception_message']) ? $data['exception_message'] : null;
        $this->container['exception_class_name'] = isset($data['exception_class_name']) ? $data['exception_class_name'] : null;
        $this->container['exception_class_method'] = isset($data['exception_class_method']) ? $data['exception_class_method'] : null;
        $this->container['exception_method'] = isset($data['exception_method']) ? $data['exception_method'] : null;
        $this->container['exception_app_code'] = isset($data['exception_app_code']) ? $data['exception_app_code'] : null;
        $this->container['exception_file'] = isset($data['exception_file']) ? $data['exception_file'] : null;
        $this->container['exception_line'] = isset($data['exception_line']) ? $data['exception_line'] : null;
        $this->container['code_raw'] = isset($data['code_raw']) ? $data['code_raw'] : null;
        $this->container['reason_frames'] = isset($data['reason_frames']) ? $data['reason_frames'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_group_id
     *
     * @return string
     */
    public function getErrorGroupId()
    {
        return $this->container['error_group_id'];
    }

    /**
     * Sets error_group_id
     *
     * @param string $error_group_id error_group_id
     *
     * @return $this
     */
    public function setErrorGroupId($error_group_id)
    {
        $this->container['error_group_id'] = $error_group_id;

        return $this;
    }

    /**
     * Gets app_version
     *
     * @return string
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     *
     * @param string $app_version app_version
     *
     * @return $this
     */
    public function setAppVersion($app_version)
    {
        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets app_build
     *
     * @return string
     */
    public function getAppBuild()
    {
        return $this->container['app_build'];
    }

    /**
     * Sets app_build
     *
     * @param string $app_build app_build
     *
     * @return $this
     */
    public function setAppBuild($app_build)
    {
        $this->container['app_build'] = $app_build;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets device_count
     *
     * @return int
     */
    public function getDeviceCount()
    {
        return $this->container['device_count'];
    }

    /**
     * Sets device_count
     *
     * @param int $device_count device_count
     *
     * @return $this
     */
    public function setDeviceCount($device_count)
    {
        $this->container['device_count'] = $device_count;

        return $this;
    }

    /**
     * Gets first_occurrence
     *
     * @return \DateTime
     */
    public function getFirstOccurrence()
    {
        return $this->container['first_occurrence'];
    }

    /**
     * Sets first_occurrence
     *
     * @param \DateTime $first_occurrence first_occurrence
     *
     * @return $this
     */
    public function setFirstOccurrence($first_occurrence)
    {
        $this->container['first_occurrence'] = $first_occurrence;

        return $this;
    }

    /**
     * Gets last_occurrence
     *
     * @return \DateTime
     */
    public function getLastOccurrence()
    {
        return $this->container['last_occurrence'];
    }

    /**
     * Sets last_occurrence
     *
     * @param \DateTime $last_occurrence last_occurrence
     *
     * @return $this
     */
    public function setLastOccurrence($last_occurrence)
    {
        $this->container['last_occurrence'] = $last_occurrence;

        return $this;
    }

    /**
     * Gets exception_type
     *
     * @return string
     */
    public function getExceptionType()
    {
        return $this->container['exception_type'];
    }

    /**
     * Sets exception_type
     *
     * @param string $exception_type exception_type
     *
     * @return $this
     */
    public function setExceptionType($exception_type)
    {
        $this->container['exception_type'] = $exception_type;

        return $this;
    }

    /**
     * Gets exception_message
     *
     * @return string
     */
    public function getExceptionMessage()
    {
        return $this->container['exception_message'];
    }

    /**
     * Sets exception_message
     *
     * @param string $exception_message exception_message
     *
     * @return $this
     */
    public function setExceptionMessage($exception_message)
    {
        $this->container['exception_message'] = $exception_message;

        return $this;
    }

    /**
     * Gets exception_class_name
     *
     * @return string
     */
    public function getExceptionClassName()
    {
        return $this->container['exception_class_name'];
    }

    /**
     * Sets exception_class_name
     *
     * @param string $exception_class_name exception_class_name
     *
     * @return $this
     */
    public function setExceptionClassName($exception_class_name)
    {
        $this->container['exception_class_name'] = $exception_class_name;

        return $this;
    }

    /**
     * Gets exception_class_method
     *
     * @return bool
     */
    public function getExceptionClassMethod()
    {
        return $this->container['exception_class_method'];
    }

    /**
     * Sets exception_class_method
     *
     * @param bool $exception_class_method exception_class_method
     *
     * @return $this
     */
    public function setExceptionClassMethod($exception_class_method)
    {
        $this->container['exception_class_method'] = $exception_class_method;

        return $this;
    }

    /**
     * Gets exception_method
     *
     * @return string
     */
    public function getExceptionMethod()
    {
        return $this->container['exception_method'];
    }

    /**
     * Sets exception_method
     *
     * @param string $exception_method exception_method
     *
     * @return $this
     */
    public function setExceptionMethod($exception_method)
    {
        $this->container['exception_method'] = $exception_method;

        return $this;
    }

    /**
     * Gets exception_app_code
     *
     * @return bool
     */
    public function getExceptionAppCode()
    {
        return $this->container['exception_app_code'];
    }

    /**
     * Sets exception_app_code
     *
     * @param bool $exception_app_code exception_app_code
     *
     * @return $this
     */
    public function setExceptionAppCode($exception_app_code)
    {
        $this->container['exception_app_code'] = $exception_app_code;

        return $this;
    }

    /**
     * Gets exception_file
     *
     * @return string
     */
    public function getExceptionFile()
    {
        return $this->container['exception_file'];
    }

    /**
     * Sets exception_file
     *
     * @param string $exception_file exception_file
     *
     * @return $this
     */
    public function setExceptionFile($exception_file)
    {
        $this->container['exception_file'] = $exception_file;

        return $this;
    }

    /**
     * Gets exception_line
     *
     * @return string
     */
    public function getExceptionLine()
    {
        return $this->container['exception_line'];
    }

    /**
     * Sets exception_line
     *
     * @param string $exception_line exception_line
     *
     * @return $this
     */
    public function setExceptionLine($exception_line)
    {
        $this->container['exception_line'] = $exception_line;

        return $this;
    }

    /**
     * Gets code_raw
     *
     * @return string
     */
    public function getCodeRaw()
    {
        return $this->container['code_raw'];
    }

    /**
     * Sets code_raw
     *
     * @param string $code_raw code_raw
     *
     * @return $this
     */
    public function setCodeRaw($code_raw)
    {
        $this->container['code_raw'] = $code_raw;

        return $this;
    }

    /**
     * Gets reason_frames
     *
     * @return object[]
     */
    public function getReasonFrames()
    {
        return $this->container['reason_frames'];
    }

    /**
     * Sets reason_frames
     *
     * @param object[] $reason_frames reason_frames
     *
     * @return $this
     */
    public function setReasonFrames($reason_frames)
    {
        $this->container['reason_frames'] = $reason_frames;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


