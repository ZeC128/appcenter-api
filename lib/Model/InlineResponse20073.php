<?php
/**
 * InlineResponse20073
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20073 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20073 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_73';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'crash_group_id' => 'string',
        'new_crash_group_id' => 'string',
        'display_id' => 'string',
        'app_version' => 'string',
        'build' => 'string',
        'status' => 'string',
        'count' => 'int',
        'impacted_users' => 'int',
        'first_occurrence' => '\DateTime',
        'last_occurrence' => '\DateTime',
        'exception' => 'string',
        'crash_reason' => 'string',
        'reason_frame' => '\Swagger\Client\Model\InlineResponse20073ReasonFrame',
        'fatal' => 'bool',
        'annotation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'crash_group_id' => null,
        'new_crash_group_id' => null,
        'display_id' => null,
        'app_version' => null,
        'build' => null,
        'status' => null,
        'count' => null,
        'impacted_users' => null,
        'first_occurrence' => 'date-time',
        'last_occurrence' => 'date-time',
        'exception' => null,
        'crash_reason' => null,
        'reason_frame' => null,
        'fatal' => null,
        'annotation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'crash_group_id' => 'crash_group_id',
        'new_crash_group_id' => 'new_crash_group_id',
        'display_id' => 'display_id',
        'app_version' => 'app_version',
        'build' => 'build',
        'status' => 'status',
        'count' => 'count',
        'impacted_users' => 'impacted_users',
        'first_occurrence' => 'first_occurrence',
        'last_occurrence' => 'last_occurrence',
        'exception' => 'exception',
        'crash_reason' => 'crash_reason',
        'reason_frame' => 'reason_frame',
        'fatal' => 'fatal',
        'annotation' => 'annotation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'crash_group_id' => 'setCrashGroupId',
        'new_crash_group_id' => 'setNewCrashGroupId',
        'display_id' => 'setDisplayId',
        'app_version' => 'setAppVersion',
        'build' => 'setBuild',
        'status' => 'setStatus',
        'count' => 'setCount',
        'impacted_users' => 'setImpactedUsers',
        'first_occurrence' => 'setFirstOccurrence',
        'last_occurrence' => 'setLastOccurrence',
        'exception' => 'setException',
        'crash_reason' => 'setCrashReason',
        'reason_frame' => 'setReasonFrame',
        'fatal' => 'setFatal',
        'annotation' => 'setAnnotation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'crash_group_id' => 'getCrashGroupId',
        'new_crash_group_id' => 'getNewCrashGroupId',
        'display_id' => 'getDisplayId',
        'app_version' => 'getAppVersion',
        'build' => 'getBuild',
        'status' => 'getStatus',
        'count' => 'getCount',
        'impacted_users' => 'getImpactedUsers',
        'first_occurrence' => 'getFirstOccurrence',
        'last_occurrence' => 'getLastOccurrence',
        'exception' => 'getException',
        'crash_reason' => 'getCrashReason',
        'reason_frame' => 'getReasonFrame',
        'fatal' => 'getFatal',
        'annotation' => 'getAnnotation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OPEN = 'open';
    const STATUS_CLOSED = 'closed';
    const STATUS_IGNORED = 'ignored';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_IGNORED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['crash_group_id'] = isset($data['crash_group_id']) ? $data['crash_group_id'] : null;
        $this->container['new_crash_group_id'] = isset($data['new_crash_group_id']) ? $data['new_crash_group_id'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['app_version'] = isset($data['app_version']) ? $data['app_version'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['impacted_users'] = isset($data['impacted_users']) ? $data['impacted_users'] : null;
        $this->container['first_occurrence'] = isset($data['first_occurrence']) ? $data['first_occurrence'] : null;
        $this->container['last_occurrence'] = isset($data['last_occurrence']) ? $data['last_occurrence'] : null;
        $this->container['exception'] = isset($data['exception']) ? $data['exception'] : null;
        $this->container['crash_reason'] = isset($data['crash_reason']) ? $data['crash_reason'] : null;
        $this->container['reason_frame'] = isset($data['reason_frame']) ? $data['reason_frame'] : null;
        $this->container['fatal'] = isset($data['fatal']) ? $data['fatal'] : null;
        $this->container['annotation'] = isset($data['annotation']) ? $data['annotation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['crash_group_id'] === null) {
            $invalidProperties[] = "'crash_group_id' can't be null";
        }
        if ($this->container['new_crash_group_id'] === null) {
            $invalidProperties[] = "'new_crash_group_id' can't be null";
        }
        if ($this->container['display_id'] === null) {
            $invalidProperties[] = "'display_id' can't be null";
        }
        if ($this->container['app_version'] === null) {
            $invalidProperties[] = "'app_version' can't be null";
        }
        if ($this->container['build'] === null) {
            $invalidProperties[] = "'build' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['first_occurrence'] === null) {
            $invalidProperties[] = "'first_occurrence' can't be null";
        }
        if ($this->container['last_occurrence'] === null) {
            $invalidProperties[] = "'last_occurrence' can't be null";
        }
        if ($this->container['crash_reason'] === null) {
            $invalidProperties[] = "'crash_reason' can't be null";
        }
        if ($this->container['fatal'] === null) {
            $invalidProperties[] = "'fatal' can't be null";
        }
        if ($this->container['annotation'] === null) {
            $invalidProperties[] = "'annotation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets crash_group_id
     *
     * @return string
     */
    public function getCrashGroupId()
    {
        return $this->container['crash_group_id'];
    }

    /**
     * Sets crash_group_id
     *
     * @param string $crash_group_id crash_group_id
     *
     * @return $this
     */
    public function setCrashGroupId($crash_group_id)
    {
        $this->container['crash_group_id'] = $crash_group_id;

        return $this;
    }

    /**
     * Gets new_crash_group_id
     *
     * @return string
     */
    public function getNewCrashGroupId()
    {
        return $this->container['new_crash_group_id'];
    }

    /**
     * Sets new_crash_group_id
     *
     * @param string $new_crash_group_id new_crash_group_id
     *
     * @return $this
     */
    public function setNewCrashGroupId($new_crash_group_id)
    {
        $this->container['new_crash_group_id'] = $new_crash_group_id;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param string $display_id display_id
     *
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets app_version
     *
     * @return string
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     *
     * @param string $app_version app_version
     *
     * @return $this
     */
    public function setAppVersion($app_version)
    {
        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets build
     *
     * @return string
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param string $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets impacted_users
     *
     * @return int
     */
    public function getImpactedUsers()
    {
        return $this->container['impacted_users'];
    }

    /**
     * Sets impacted_users
     *
     * @param int $impacted_users impacted_users
     *
     * @return $this
     */
    public function setImpactedUsers($impacted_users)
    {
        $this->container['impacted_users'] = $impacted_users;

        return $this;
    }

    /**
     * Gets first_occurrence
     *
     * @return \DateTime
     */
    public function getFirstOccurrence()
    {
        return $this->container['first_occurrence'];
    }

    /**
     * Sets first_occurrence
     *
     * @param \DateTime $first_occurrence first_occurrence
     *
     * @return $this
     */
    public function setFirstOccurrence($first_occurrence)
    {
        $this->container['first_occurrence'] = $first_occurrence;

        return $this;
    }

    /**
     * Gets last_occurrence
     *
     * @return \DateTime
     */
    public function getLastOccurrence()
    {
        return $this->container['last_occurrence'];
    }

    /**
     * Sets last_occurrence
     *
     * @param \DateTime $last_occurrence last_occurrence
     *
     * @return $this
     */
    public function setLastOccurrence($last_occurrence)
    {
        $this->container['last_occurrence'] = $last_occurrence;

        return $this;
    }

    /**
     * Gets exception
     *
     * @return string
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     *
     * @param string $exception exception
     *
     * @return $this
     */
    public function setException($exception)
    {
        $this->container['exception'] = $exception;

        return $this;
    }

    /**
     * Gets crash_reason
     *
     * @return string
     */
    public function getCrashReason()
    {
        return $this->container['crash_reason'];
    }

    /**
     * Sets crash_reason
     *
     * @param string $crash_reason crash_reason
     *
     * @return $this
     */
    public function setCrashReason($crash_reason)
    {
        $this->container['crash_reason'] = $crash_reason;

        return $this;
    }

    /**
     * Gets reason_frame
     *
     * @return \Swagger\Client\Model\InlineResponse20073ReasonFrame
     */
    public function getReasonFrame()
    {
        return $this->container['reason_frame'];
    }

    /**
     * Sets reason_frame
     *
     * @param \Swagger\Client\Model\InlineResponse20073ReasonFrame $reason_frame reason_frame
     *
     * @return $this
     */
    public function setReasonFrame($reason_frame)
    {
        $this->container['reason_frame'] = $reason_frame;

        return $this;
    }

    /**
     * Gets fatal
     *
     * @return bool
     */
    public function getFatal()
    {
        return $this->container['fatal'];
    }

    /**
     * Sets fatal
     *
     * @param bool $fatal Crash or handled exception
     *
     * @return $this
     */
    public function setFatal($fatal)
    {
        $this->container['fatal'] = $fatal;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return string
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param string $annotation annotation
     *
     * @return $this
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


