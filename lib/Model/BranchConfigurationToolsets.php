<?php
/**
 * BranchConfigurationToolsets
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BranchConfigurationToolsets Class Doc Comment
 *
 * @category Class
 * @description The branch build configuration for each toolset
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BranchConfigurationToolsets implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BranchConfigurationToolsets';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'xcode' => '\Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXcode',
        'javascript' => '\Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript',
        'xamarin' => '\Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin',
        'android' => '\Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'xcode' => null,
        'javascript' => null,
        'xamarin' => null,
        'android' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'xcode' => 'xcode',
        'javascript' => 'javascript',
        'xamarin' => 'xamarin',
        'android' => 'android'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'xcode' => 'setXcode',
        'javascript' => 'setJavascript',
        'xamarin' => 'setXamarin',
        'android' => 'setAndroid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'xcode' => 'getXcode',
        'javascript' => 'getJavascript',
        'xamarin' => 'getXamarin',
        'android' => 'getAndroid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['xcode'] = isset($data['xcode']) ? $data['xcode'] : null;
        $this->container['javascript'] = isset($data['javascript']) ? $data['javascript'] : null;
        $this->container['xamarin'] = isset($data['xamarin']) ? $data['xamarin'] : null;
        $this->container['android'] = isset($data['android']) ? $data['android'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets xcode
     *
     * @return \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXcode
     */
    public function getXcode()
    {
        return $this->container['xcode'];
    }

    /**
     * Sets xcode
     *
     * @param \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXcode $xcode xcode
     *
     * @return $this
     */
    public function setXcode($xcode)
    {
        $this->container['xcode'] = $xcode;

        return $this;
    }

    /**
     * Gets javascript
     *
     * @return \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript
     */
    public function getJavascript()
    {
        return $this->container['javascript'];
    }

    /**
     * Sets javascript
     *
     * @param \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript $javascript javascript
     *
     * @return $this
     */
    public function setJavascript($javascript)
    {
        $this->container['javascript'] = $javascript;

        return $this;
    }

    /**
     * Gets xamarin
     *
     * @return \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin
     */
    public function getXamarin()
    {
        return $this->container['xamarin'];
    }

    /**
     * Sets xamarin
     *
     * @param \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin $xamarin xamarin
     *
     * @return $this
     */
    public function setXamarin($xamarin)
    {
        $this->container['xamarin'] = $xamarin;

        return $this;
    }

    /**
     * Gets android
     *
     * @return \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid
     */
    public function getAndroid()
    {
        return $this->container['android'];
    }

    /**
     * Sets android
     *
     * @param \Swagger\Client\Model\V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid $android android
     *
     * @return $this
     */
    public function setAndroid($android)
    {
        $this->container['android'] = $android;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


