<?php
/**
 * TestReportSteps
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestReportSteps Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestReportSteps implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestReport_steps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'step_name' => 'string',
        'id' => 'string',
        'step_executions' => '\Swagger\Client\Model\TestReportStepExecutions[]',
        'failed' => 'float',
        'skipped' => 'float',
        'step_report_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'step_name' => null,
        'id' => null,
        'step_executions' => null,
        'failed' => null,
        'skipped' => null,
        'step_report_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'step_name' => 'stepName',
        'id' => 'id',
        'step_executions' => 'stepExecutions',
        'failed' => 'failed',
        'skipped' => 'skipped',
        'step_report_url' => 'step_report_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'step_name' => 'setStepName',
        'id' => 'setId',
        'step_executions' => 'setStepExecutions',
        'failed' => 'setFailed',
        'skipped' => 'setSkipped',
        'step_report_url' => 'setStepReportUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'step_name' => 'getStepName',
        'id' => 'getId',
        'step_executions' => 'getStepExecutions',
        'failed' => 'getFailed',
        'skipped' => 'getSkipped',
        'step_report_url' => 'getStepReportUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['step_name'] = isset($data['step_name']) ? $data['step_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['step_executions'] = isset($data['step_executions']) ? $data['step_executions'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['skipped'] = isset($data['skipped']) ? $data['skipped'] : null;
        $this->container['step_report_url'] = isset($data['step_report_url']) ? $data['step_report_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets step_name
     *
     * @return string
     */
    public function getStepName()
    {
        return $this->container['step_name'];
    }

    /**
     * Sets step_name
     *
     * @param string $step_name step_name
     *
     * @return $this
     */
    public function setStepName($step_name)
    {
        $this->container['step_name'] = $step_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets step_executions
     *
     * @return \Swagger\Client\Model\TestReportStepExecutions[]
     */
    public function getStepExecutions()
    {
        return $this->container['step_executions'];
    }

    /**
     * Sets step_executions
     *
     * @param \Swagger\Client\Model\TestReportStepExecutions[] $step_executions step_executions
     *
     * @return $this
     */
    public function setStepExecutions($step_executions)
    {
        $this->container['step_executions'] = $step_executions;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return float
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param float $failed failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets skipped
     *
     * @return float
     */
    public function getSkipped()
    {
        return $this->container['skipped'];
    }

    /**
     * Sets skipped
     *
     * @param float $skipped skipped
     *
     * @return $this
     */
    public function setSkipped($skipped)
    {
        $this->container['skipped'] = $skipped;

        return $this;
    }

    /**
     * Gets step_report_url
     *
     * @return string
     */
    public function getStepReportUrl()
    {
        return $this->container['step_report_url'];
    }

    /**
     * Sets step_report_url
     *
     * @param string $step_report_url step_report_url
     *
     * @return $this
     */
    public function setStepReportUrl($step_report_url)
    {
        $this->container['step_report_url'] = $step_report_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


