<?php
/**
 * CreateReleaseUploadResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateReleaseUploadResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateReleaseUploadResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateReleaseUploadResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'upload_domain' => 'string',
        'token' => 'string',
        'url_encoded_token' => 'string',
        'package_asset_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'upload_domain' => null,
        'token' => null,
        'url_encoded_token' => null,
        'package_asset_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'upload_domain' => 'upload_domain',
        'token' => 'token',
        'url_encoded_token' => 'url_encoded_token',
        'package_asset_id' => 'package_asset_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'upload_domain' => 'setUploadDomain',
        'token' => 'setToken',
        'url_encoded_token' => 'setUrlEncodedToken',
        'package_asset_id' => 'setPackageAssetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'upload_domain' => 'getUploadDomain',
        'token' => 'getToken',
        'url_encoded_token' => 'getUrlEncodedToken',
        'package_asset_id' => 'getPackageAssetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['upload_domain'] = isset($data['upload_domain']) ? $data['upload_domain'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['url_encoded_token'] = isset($data['url_encoded_token']) ? $data['url_encoded_token'] : null;
        $this->container['package_asset_id'] = isset($data['package_asset_id']) ? $data['package_asset_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['upload_domain'] === null) {
            $invalidProperties[] = "'upload_domain' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['url_encoded_token'] === null) {
            $invalidProperties[] = "'url_encoded_token' can't be null";
        }
        if ($this->container['package_asset_id'] === null) {
            $invalidProperties[] = "'package_asset_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID for the newly created upload. It is going to be required later in the process.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets upload_domain
     *
     * @return string
     */
    public function getUploadDomain()
    {
        return $this->container['upload_domain'];
    }

    /**
     * Sets upload_domain
     *
     * @param string $upload_domain The URL domain used to upload the release.
     *
     * @return $this
     */
    public function setUploadDomain($upload_domain)
    {
        $this->container['upload_domain'] = $upload_domain;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The access token used for upload permissions.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets url_encoded_token
     *
     * @return string
     */
    public function getUrlEncodedToken()
    {
        return $this->container['url_encoded_token'];
    }

    /**
     * Sets url_encoded_token
     *
     * @param string $url_encoded_token The access token used for upload permissions (URL encoded to use as a single query parameter).
     *
     * @return $this
     */
    public function setUrlEncodedToken($url_encoded_token)
    {
        $this->container['url_encoded_token'] = $url_encoded_token;

        return $this;
    }

    /**
     * Gets package_asset_id
     *
     * @return string
     */
    public function getPackageAssetId()
    {
        return $this->container['package_asset_id'];
    }

    /**
     * Sets package_asset_id
     *
     * @param string $package_asset_id The associated asset ID in the file management service associated with this uploaded.
     *
     * @return $this
     */
    public function setPackageAssetId($package_asset_id)
    {
        $this->container['package_asset_id'] = $package_asset_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


