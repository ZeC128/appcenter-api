<?php
/**
 * TestRunStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestRunStatistics Class Doc Comment
 *
 * @category Class
 * @description Summary single test run on Xamarin Test Cloud
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestRunStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Test Run Statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'devices' => 'float',
        'devices_finished' => 'float',
        'devices_failed' => 'float',
        'total' => 'float',
        'passed' => 'float',
        'failed' => 'float',
        'skipped' => 'float',
        'peak_memory' => 'float',
        'total_device_minutes' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'devices' => null,
        'devices_finished' => null,
        'devices_failed' => null,
        'total' => null,
        'passed' => null,
        'failed' => null,
        'skipped' => null,
        'peak_memory' => null,
        'total_device_minutes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'devices' => 'devices',
        'devices_finished' => 'devicesFinished',
        'devices_failed' => 'devicesFailed',
        'total' => 'total',
        'passed' => 'passed',
        'failed' => 'failed',
        'skipped' => 'skipped',
        'peak_memory' => 'peakMemory',
        'total_device_minutes' => 'totalDeviceMinutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'devices' => 'setDevices',
        'devices_finished' => 'setDevicesFinished',
        'devices_failed' => 'setDevicesFailed',
        'total' => 'setTotal',
        'passed' => 'setPassed',
        'failed' => 'setFailed',
        'skipped' => 'setSkipped',
        'peak_memory' => 'setPeakMemory',
        'total_device_minutes' => 'setTotalDeviceMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'devices' => 'getDevices',
        'devices_finished' => 'getDevicesFinished',
        'devices_failed' => 'getDevicesFailed',
        'total' => 'getTotal',
        'passed' => 'getPassed',
        'failed' => 'getFailed',
        'skipped' => 'getSkipped',
        'peak_memory' => 'getPeakMemory',
        'total_device_minutes' => 'getTotalDeviceMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['devices_finished'] = isset($data['devices_finished']) ? $data['devices_finished'] : null;
        $this->container['devices_failed'] = isset($data['devices_failed']) ? $data['devices_failed'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['passed'] = isset($data['passed']) ? $data['passed'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['skipped'] = isset($data['skipped']) ? $data['skipped'] : null;
        $this->container['peak_memory'] = isset($data['peak_memory']) ? $data['peak_memory'] : null;
        $this->container['total_device_minutes'] = isset($data['total_device_minutes']) ? $data['total_device_minutes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets devices
     *
     * @return float
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param float $devices Number of devices running the test
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets devices_finished
     *
     * @return float
     */
    public function getDevicesFinished()
    {
        return $this->container['devices_finished'];
    }

    /**
     * Sets devices_finished
     *
     * @param float $devices_finished Number of finished devices
     *
     * @return $this
     */
    public function setDevicesFinished($devices_finished)
    {
        $this->container['devices_finished'] = $devices_finished;

        return $this;
    }

    /**
     * Gets devices_failed
     *
     * @return float
     */
    public function getDevicesFailed()
    {
        return $this->container['devices_failed'];
    }

    /**
     * Sets devices_failed
     *
     * @param float $devices_failed Number of failed devices
     *
     * @return $this
     */
    public function setDevicesFailed($devices_failed)
    {
        $this->container['devices_failed'] = $devices_failed;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total Number of tests in total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets passed
     *
     * @return float
     */
    public function getPassed()
    {
        return $this->container['passed'];
    }

    /**
     * Sets passed
     *
     * @param float $passed Number of passed tests
     *
     * @return $this
     */
    public function setPassed($passed)
    {
        $this->container['passed'] = $passed;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return float
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param float $failed Number of failed tests
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets skipped
     *
     * @return float
     */
    public function getSkipped()
    {
        return $this->container['skipped'];
    }

    /**
     * Sets skipped
     *
     * @param float $skipped Number of skipped tests
     *
     * @return $this
     */
    public function setSkipped($skipped)
    {
        $this->container['skipped'] = $skipped;

        return $this;
    }

    /**
     * Gets peak_memory
     *
     * @return float
     */
    public function getPeakMemory()
    {
        return $this->container['peak_memory'];
    }

    /**
     * Sets peak_memory
     *
     * @param float $peak_memory The max amount of MB used during the test run
     *
     * @return $this
     */
    public function setPeakMemory($peak_memory)
    {
        $this->container['peak_memory'] = $peak_memory;

        return $this;
    }

    /**
     * Gets total_device_minutes
     *
     * @return float
     */
    public function getTotalDeviceMinutes()
    {
        return $this->container['total_device_minutes'];
    }

    /**
     * Sets total_device_minutes
     *
     * @param float $total_device_minutes The number of minutes of device time the test has been runnign
     *
     * @return $this
     */
    public function setTotalDeviceMinutes($total_device_minutes)
    {
        $this->container['total_device_minutes'] = $total_device_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


