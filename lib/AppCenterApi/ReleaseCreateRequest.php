<?php
/**
 * ReleaseCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * ReleaseCreateRequest Class Doc Comment
 *
 * @category Class
 * @description A request containing information for creating a release.
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'build_version' => 'string',
        'unique_identifier' => 'string',
        'minimum_os_version' => 'string',
        'device_family' => 'string',
        'languages' => 'string[]',
        'fingerprint' => 'string',
        'size' => 'int',
        'package_url' => 'string',
        'file_extension' => 'string',
        'upload_id' => 'string',
        'icon_asset_id' => 'string',
        'ipa_uuids' => '\ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestIpaUuids[]',
        'provision' => '\ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision',
        'appex_provisioning_profiles' => '\ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision[]',
        'proxy_flow' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'build_version' => null,
        'unique_identifier' => null,
        'minimum_os_version' => null,
        'device_family' => null,
        'languages' => null,
        'fingerprint' => null,
        'size' => null,
        'package_url' => null,
        'file_extension' => null,
        'upload_id' => null,
        'icon_asset_id' => null,
        'ipa_uuids' => null,
        'provision' => null,
        'appex_provisioning_profiles' => null,
        'proxy_flow' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'build_version' => 'build_version',
        'unique_identifier' => 'unique_identifier',
        'minimum_os_version' => 'minimum_os_version',
        'device_family' => 'device_family',
        'languages' => 'languages',
        'fingerprint' => 'fingerprint',
        'size' => 'size',
        'package_url' => 'package_url',
        'file_extension' => 'file_extension',
        'upload_id' => 'upload_id',
        'icon_asset_id' => 'icon_asset_id',
        'ipa_uuids' => 'ipa_uuids',
        'provision' => 'provision',
        'appex_provisioning_profiles' => 'appex_provisioning_profiles',
        'proxy_flow' => 'proxy_flow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'build_version' => 'setBuildVersion',
        'unique_identifier' => 'setUniqueIdentifier',
        'minimum_os_version' => 'setMinimumOsVersion',
        'device_family' => 'setDeviceFamily',
        'languages' => 'setLanguages',
        'fingerprint' => 'setFingerprint',
        'size' => 'setSize',
        'package_url' => 'setPackageUrl',
        'file_extension' => 'setFileExtension',
        'upload_id' => 'setUploadId',
        'icon_asset_id' => 'setIconAssetId',
        'ipa_uuids' => 'setIpaUuids',
        'provision' => 'setProvision',
        'appex_provisioning_profiles' => 'setAppexProvisioningProfiles',
        'proxy_flow' => 'setProxyFlow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'build_version' => 'getBuildVersion',
        'unique_identifier' => 'getUniqueIdentifier',
        'minimum_os_version' => 'getMinimumOsVersion',
        'device_family' => 'getDeviceFamily',
        'languages' => 'getLanguages',
        'fingerprint' => 'getFingerprint',
        'size' => 'getSize',
        'package_url' => 'getPackageUrl',
        'file_extension' => 'getFileExtension',
        'upload_id' => 'getUploadId',
        'icon_asset_id' => 'getIconAssetId',
        'ipa_uuids' => 'getIpaUuids',
        'provision' => 'getProvision',
        'appex_provisioning_profiles' => 'getAppexProvisioningProfiles',
        'proxy_flow' => 'getProxyFlow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['build_version'] = isset($data['build_version']) ? $data['build_version'] : null;
        $this->container['unique_identifier'] = isset($data['unique_identifier']) ? $data['unique_identifier'] : null;
        $this->container['minimum_os_version'] = isset($data['minimum_os_version']) ? $data['minimum_os_version'] : null;
        $this->container['device_family'] = isset($data['device_family']) ? $data['device_family'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['package_url'] = isset($data['package_url']) ? $data['package_url'] : null;
        $this->container['file_extension'] = isset($data['file_extension']) ? $data['file_extension'] : null;
        $this->container['upload_id'] = isset($data['upload_id']) ? $data['upload_id'] : null;
        $this->container['icon_asset_id'] = isset($data['icon_asset_id']) ? $data['icon_asset_id'] : null;
        $this->container['ipa_uuids'] = isset($data['ipa_uuids']) ? $data['ipa_uuids'] : null;
        $this->container['provision'] = isset($data['provision']) ? $data['provision'] : null;
        $this->container['appex_provisioning_profiles'] = isset($data['appex_provisioning_profiles']) ? $data['appex_provisioning_profiles'] : null;
        $this->container['proxy_flow'] = isset($data['proxy_flow']) ? $data['proxy_flow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fingerprint'] === null) {
            $invalidProperties[] = "'fingerprint' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['upload_id'] === null) {
            $invalidProperties[] = "'upload_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets build_version
     *
     * @return string
     */
    public function getBuildVersion()
    {
        return $this->container['build_version'];
    }

    /**
     * Sets build_version
     *
     * @param string $build_version The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml.
     *
     * @return $this
     */
    public function setBuildVersion($build_version)
    {
        $this->container['build_version'] = $build_version;

        return $this;
    }

    /**
     * Gets unique_identifier
     *
     * @return string
     */
    public function getUniqueIdentifier()
    {
        return $this->container['unique_identifier'];
    }

    /**
     * Sets unique_identifier
     *
     * @param string $unique_identifier The identifier of the app's bundle.
     *
     * @return $this
     */
    public function setUniqueIdentifier($unique_identifier)
    {
        $this->container['unique_identifier'] = $unique_identifier;

        return $this;
    }

    /**
     * Gets minimum_os_version
     *
     * @return string
     */
    public function getMinimumOsVersion()
    {
        return $this->container['minimum_os_version'];
    }

    /**
     * Sets minimum_os_version
     *
     * @param string $minimum_os_version The release's minimum required operating system.
     *
     * @return $this
     */
    public function setMinimumOsVersion($minimum_os_version)
    {
        $this->container['minimum_os_version'] = $minimum_os_version;

        return $this;
    }

    /**
     * Gets device_family
     *
     * @return string
     */
    public function getDeviceFamily()
    {
        return $this->container['device_family'];
    }

    /**
     * Sets device_family
     *
     * @param string $device_family The release's device family.
     *
     * @return $this
     */
    public function setDeviceFamily($device_family)
    {
        $this->container['device_family'] = $device_family;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages The languages supported by the release. Limited to 510 characters in a serialized array.
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint MD5 checksum of the release binary.
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The release's size in bytes.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets package_url
     *
     * @return string
     */
    public function getPackageUrl()
    {
        return $this->container['package_url'];
    }

    /**
     * Sets package_url
     *
     * @param string $package_url The URL to the release's binary.
     *
     * @return $this
     */
    public function setPackageUrl($package_url)
    {
        $this->container['package_url'] = $package_url;

        return $this;
    }

    /**
     * Gets file_extension
     *
     * @return string
     */
    public function getFileExtension()
    {
        return $this->container['file_extension'];
    }

    /**
     * Sets file_extension
     *
     * @param string $file_extension The file extension of the asset. Does not include the initial period.
     *
     * @return $this
     */
    public function setFileExtension($file_extension)
    {
        $this->container['file_extension'] = $file_extension;

        return $this;
    }

    /**
     * Gets upload_id
     *
     * @return string
     */
    public function getUploadId()
    {
        return $this->container['upload_id'];
    }

    /**
     * Sets upload_id
     *
     * @param string $upload_id The upload id associated with the release, to map to the releases upload table.
     *
     * @return $this
     */
    public function setUploadId($upload_id)
    {
        $this->container['upload_id'] = $upload_id;

        return $this;
    }

    /**
     * Gets icon_asset_id
     *
     * @return string
     */
    public function getIconAssetId()
    {
        return $this->container['icon_asset_id'];
    }

    /**
     * Sets icon_asset_id
     *
     * @param string $icon_asset_id The assetId associated with the icon uploaded to app center file upload service.
     *
     * @return $this
     */
    public function setIconAssetId($icon_asset_id)
    {
        $this->container['icon_asset_id'] = $icon_asset_id;

        return $this;
    }

    /**
     * Gets ipa_uuids
     *
     * @return \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestIpaUuids[]
     */
    public function getIpaUuids()
    {
        return $this->container['ipa_uuids'];
    }

    /**
     * Sets ipa_uuids
     *
     * @param \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestIpaUuids[] $ipa_uuids A list of UUIDs for architectures for an iOS app.
     *
     * @return $this
     */
    public function setIpaUuids($ipa_uuids)
    {
        $this->container['ipa_uuids'] = $ipa_uuids;

        return $this;
    }

    /**
     * Gets provision
     *
     * @return \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision
     */
    public function getProvision()
    {
        return $this->container['provision'];
    }

    /**
     * Sets provision
     *
     * @param \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision $provision provision
     *
     * @return $this
     */
    public function setProvision($provision)
    {
        $this->container['provision'] = $provision;

        return $this;
    }

    /**
     * Gets appex_provisioning_profiles
     *
     * @return \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision[]
     */
    public function getAppexProvisioningProfiles()
    {
        return $this->container['appex_provisioning_profiles'];
    }

    /**
     * Sets appex_provisioning_profiles
     *
     * @param \ZeC128\AppCenter\AppCenterApi\ReleaseCreateRequestProvision[] $appex_provisioning_profiles iOS app extension provisioning profiles included in the release.
     *
     * @return $this
     */
    public function setAppexProvisioningProfiles($appex_provisioning_profiles)
    {
        $this->container['appex_provisioning_profiles'] = $appex_provisioning_profiles;

        return $this;
    }

    /**
     * Gets proxy_flow
     *
     * @return bool
     */
    public function getProxyFlow()
    {
        return $this->container['proxy_flow'];
    }

    /**
     * Sets proxy_flow
     *
     * @param bool $proxy_flow If true this release was uploaded to the AKS upload proxy
     *
     * @return $this
     */
    public function setProxyFlow($proxy_flow)
    {
        $this->container['proxy_flow'] = $proxy_flow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


