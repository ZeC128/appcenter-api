<?php
/**
 * V01appsownerNameappNamedeviceConfigurationsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * V01appsownerNameappNamedeviceConfigurationsModel Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V01appsownerNameappNamedeviceConfigurationsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v0.1appsowner_nameapp_namedevice_configurations_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'manufacturer' => 'string',
        'model' => 'string',
        'platform' => 'string',
        'dimensions' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDimensions',
        'resolution' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelResolution',
        'release_date' => 'string',
        'form_factor' => 'string',
        'screen_size' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelScreenSize',
        'cpu' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelCpu',
        'memory' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelMemory',
        'screen_rotation' => 'float',
        'device_frame' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDeviceFrame',
        'availability_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'manufacturer' => null,
        'model' => null,
        'platform' => null,
        'dimensions' => null,
        'resolution' => null,
        'release_date' => null,
        'form_factor' => null,
        'screen_size' => null,
        'cpu' => null,
        'memory' => null,
        'screen_rotation' => null,
        'device_frame' => null,
        'availability_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'manufacturer' => 'manufacturer',
        'model' => 'model',
        'platform' => 'platform',
        'dimensions' => 'dimensions',
        'resolution' => 'resolution',
        'release_date' => 'releaseDate',
        'form_factor' => 'formFactor',
        'screen_size' => 'screenSize',
        'cpu' => 'cpu',
        'memory' => 'memory',
        'screen_rotation' => 'screenRotation',
        'device_frame' => 'deviceFrame',
        'availability_count' => 'availabilityCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'manufacturer' => 'setManufacturer',
        'model' => 'setModel',
        'platform' => 'setPlatform',
        'dimensions' => 'setDimensions',
        'resolution' => 'setResolution',
        'release_date' => 'setReleaseDate',
        'form_factor' => 'setFormFactor',
        'screen_size' => 'setScreenSize',
        'cpu' => 'setCpu',
        'memory' => 'setMemory',
        'screen_rotation' => 'setScreenRotation',
        'device_frame' => 'setDeviceFrame',
        'availability_count' => 'setAvailabilityCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'manufacturer' => 'getManufacturer',
        'model' => 'getModel',
        'platform' => 'getPlatform',
        'dimensions' => 'getDimensions',
        'resolution' => 'getResolution',
        'release_date' => 'getReleaseDate',
        'form_factor' => 'getFormFactor',
        'screen_size' => 'getScreenSize',
        'cpu' => 'getCpu',
        'memory' => 'getMemory',
        'screen_rotation' => 'getScreenRotation',
        'device_frame' => 'getDeviceFrame',
        'availability_count' => 'getAvailabilityCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['form_factor'] = isset($data['form_factor']) ? $data['form_factor'] : null;
        $this->container['screen_size'] = isset($data['screen_size']) ? $data['screen_size'] : null;
        $this->container['cpu'] = isset($data['cpu']) ? $data['cpu'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['screen_rotation'] = isset($data['screen_rotation']) ? $data['screen_rotation'] : null;
        $this->container['device_frame'] = isset($data['device_frame']) ? $data['device_frame'] : null;
        $this->container['availability_count'] = isset($data['availability_count']) ? $data['availability_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelResolution
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelResolution $resolution resolution
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string $release_date release_date
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets form_factor
     *
     * @return string
     */
    public function getFormFactor()
    {
        return $this->container['form_factor'];
    }

    /**
     * Sets form_factor
     *
     * @param string $form_factor form_factor
     *
     * @return $this
     */
    public function setFormFactor($form_factor)
    {
        $this->container['form_factor'] = $form_factor;

        return $this;
    }

    /**
     * Gets screen_size
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelScreenSize
     */
    public function getScreenSize()
    {
        return $this->container['screen_size'];
    }

    /**
     * Sets screen_size
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelScreenSize $screen_size screen_size
     *
     * @return $this
     */
    public function setScreenSize($screen_size)
    {
        $this->container['screen_size'] = $screen_size;

        return $this;
    }

    /**
     * Gets cpu
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelCpu
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelCpu $cpu cpu
     *
     * @return $this
     */
    public function setCpu($cpu)
    {
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelMemory
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelMemory $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets screen_rotation
     *
     * @return float
     */
    public function getScreenRotation()
    {
        return $this->container['screen_rotation'];
    }

    /**
     * Sets screen_rotation
     *
     * @param float $screen_rotation screen_rotation
     *
     * @return $this
     */
    public function setScreenRotation($screen_rotation)
    {
        $this->container['screen_rotation'] = $screen_rotation;

        return $this;
    }

    /**
     * Gets device_frame
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDeviceFrame
     */
    public function getDeviceFrame()
    {
        return $this->container['device_frame'];
    }

    /**
     * Sets device_frame
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeviceConfigurationsModelDeviceFrame $device_frame device_frame
     *
     * @return $this
     */
    public function setDeviceFrame($device_frame)
    {
        $this->container['device_frame'] = $device_frame;

        return $this;
    }

    /**
     * Gets availability_count
     *
     * @return float
     */
    public function getAvailabilityCount()
    {
        return $this->container['availability_count'];
    }

    /**
     * Sets availability_count
     *
     * @param float $availability_count availability_count
     *
     * @return $this
     */
    public function setAvailabilityCount($availability_count)
    {
        $this->container['availability_count'] = $availability_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


