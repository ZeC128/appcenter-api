<?php
/**
 * InlineResponse20013BillingPlansBuildService
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * InlineResponse20013BillingPlansBuildService Class Doc Comment
 *
 * @category Class
 * @description Billing Plans for a single service
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20013BillingPlansBuildService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_13_billingPlans_buildService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_select_trial_plan' => 'bool',
        'last_trial_plan_expiration_time' => 'string',
        'current_billing_period' => '\ZeC128\AppCenter\AppCenterApi\InlineResponse20013BillingPlansBuildServiceCurrentBillingPeriod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can_select_trial_plan' => null,
        'last_trial_plan_expiration_time' => 'dateTime',
        'current_billing_period' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_select_trial_plan' => 'canSelectTrialPlan',
        'last_trial_plan_expiration_time' => 'lastTrialPlanExpirationTime',
        'current_billing_period' => 'currentBillingPeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_select_trial_plan' => 'setCanSelectTrialPlan',
        'last_trial_plan_expiration_time' => 'setLastTrialPlanExpirationTime',
        'current_billing_period' => 'setCurrentBillingPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_select_trial_plan' => 'getCanSelectTrialPlan',
        'last_trial_plan_expiration_time' => 'getLastTrialPlanExpirationTime',
        'current_billing_period' => 'getCurrentBillingPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_select_trial_plan'] = isset($data['can_select_trial_plan']) ? $data['can_select_trial_plan'] : null;
        $this->container['last_trial_plan_expiration_time'] = isset($data['last_trial_plan_expiration_time']) ? $data['last_trial_plan_expiration_time'] : null;
        $this->container['current_billing_period'] = isset($data['current_billing_period']) ? $data['current_billing_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_select_trial_plan
     *
     * @return bool
     */
    public function getCanSelectTrialPlan()
    {
        return $this->container['can_select_trial_plan'];
    }

    /**
     * Sets can_select_trial_plan
     *
     * @param bool $can_select_trial_plan Can customer select trial plan for that service (if it exists)?
     *
     * @return $this
     */
    public function setCanSelectTrialPlan($can_select_trial_plan)
    {
        $this->container['can_select_trial_plan'] = $can_select_trial_plan;

        return $this;
    }

    /**
     * Gets last_trial_plan_expiration_time
     *
     * @return string
     */
    public function getLastTrialPlanExpirationTime()
    {
        return $this->container['last_trial_plan_expiration_time'];
    }

    /**
     * Sets last_trial_plan_expiration_time
     *
     * @param string $last_trial_plan_expiration_time Expiration time of the last selected trial plan. Will be null if trial plan was not used.
     *
     * @return $this
     */
    public function setLastTrialPlanExpirationTime($last_trial_plan_expiration_time)
    {
        $this->container['last_trial_plan_expiration_time'] = $last_trial_plan_expiration_time;

        return $this;
    }

    /**
     * Gets current_billing_period
     *
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20013BillingPlansBuildServiceCurrentBillingPeriod
     */
    public function getCurrentBillingPeriod()
    {
        return $this->container['current_billing_period'];
    }

    /**
     * Sets current_billing_period
     *
     * @param \ZeC128\AppCenter\AppCenterApi\InlineResponse20013BillingPlansBuildServiceCurrentBillingPeriod $current_billing_period current_billing_period
     *
     * @return $this
     */
    public function setCurrentBillingPeriod($current_billing_period)
    {
        $this->container['current_billing_period'] = $current_billing_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


