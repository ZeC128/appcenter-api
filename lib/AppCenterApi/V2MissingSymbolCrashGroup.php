<?php
/**
 * V2MissingSymbolCrashGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * V2MissingSymbolCrashGroup Class Doc Comment
 *
 * @category Class
 * @description missing symbol crash group object
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2MissingSymbolCrashGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2MissingSymbolCrashGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'symbol_group_id' => 'string',
        'crash_count' => 'int',
        'error_count' => 'int',
        'app_id' => 'string',
        'app_ver' => 'string',
        'app_build' => 'string',
        'last_modified' => '\DateTime',
        'missing_symbols' => '\ZeC128\AppCenter\AppCenterApi\V2MissingSymbolsInner[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'symbol_group_id' => null,
        'crash_count' => null,
        'error_count' => null,
        'app_id' => null,
        'app_ver' => null,
        'app_build' => null,
        'last_modified' => 'date-time',
        'missing_symbols' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol_group_id' => 'symbol_group_id',
        'crash_count' => 'crash_count',
        'error_count' => 'error_count',
        'app_id' => 'app_id',
        'app_ver' => 'app_ver',
        'app_build' => 'app_build',
        'last_modified' => 'last_modified',
        'missing_symbols' => 'missing_symbols',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol_group_id' => 'setSymbolGroupId',
        'crash_count' => 'setCrashCount',
        'error_count' => 'setErrorCount',
        'app_id' => 'setAppId',
        'app_ver' => 'setAppVer',
        'app_build' => 'setAppBuild',
        'last_modified' => 'setLastModified',
        'missing_symbols' => 'setMissingSymbols',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol_group_id' => 'getSymbolGroupId',
        'crash_count' => 'getCrashCount',
        'error_count' => 'getErrorCount',
        'app_id' => 'getAppId',
        'app_ver' => 'getAppVer',
        'app_build' => 'getAppBuild',
        'last_modified' => 'getLastModified',
        'missing_symbols' => 'getMissingSymbols',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'active';
    const STATUS_PENDING = 'pending';
    const STATUS_CLOSED = 'closed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_PENDING,
            self::STATUS_CLOSED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol_group_id'] = isset($data['symbol_group_id']) ? $data['symbol_group_id'] : null;
        $this->container['crash_count'] = isset($data['crash_count']) ? $data['crash_count'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_ver'] = isset($data['app_ver']) ? $data['app_ver'] : null;
        $this->container['app_build'] = isset($data['app_build']) ? $data['app_build'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['missing_symbols'] = isset($data['missing_symbols']) ? $data['missing_symbols'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['symbol_group_id'] === null) {
            $invalidProperties[] = "'symbol_group_id' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['app_ver'] === null) {
            $invalidProperties[] = "'app_ver' can't be null";
        }
        if ($this->container['app_build'] === null) {
            $invalidProperties[] = "'app_build' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['missing_symbols'] === null) {
            $invalidProperties[] = "'missing_symbols' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol_group_id
     *
     * @return string
     */
    public function getSymbolGroupId()
    {
        return $this->container['symbol_group_id'];
    }

    /**
     * Sets symbol_group_id
     *
     * @param string $symbol_group_id id of the symbol group
     *
     * @return $this
     */
    public function setSymbolGroupId($symbol_group_id)
    {
        $this->container['symbol_group_id'] = $symbol_group_id;

        return $this;
    }

    /**
     * Gets crash_count
     *
     * @return int
     */
    public function getCrashCount()
    {
        return $this->container['crash_count'];
    }

    /**
     * Sets crash_count
     *
     * @param int $crash_count number of crashes that belong to this group
     *
     * @return $this
     */
    public function setCrashCount($crash_count)
    {
        $this->container['crash_count'] = $crash_count;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return int
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param int $error_count number of errors that belong to this group
     *
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id application id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_ver
     *
     * @return string
     */
    public function getAppVer()
    {
        return $this->container['app_ver'];
    }

    /**
     * Sets app_ver
     *
     * @param string $app_ver application version
     *
     * @return $this
     */
    public function setAppVer($app_ver)
    {
        $this->container['app_ver'] = $app_ver;

        return $this;
    }

    /**
     * Gets app_build
     *
     * @return string
     */
    public function getAppBuild()
    {
        return $this->container['app_build'];
    }

    /**
     * Sets app_build
     *
     * @param string $app_build application build
     *
     * @return $this
     */
    public function setAppBuild($app_build)
    {
        $this->container['app_build'] = $app_build;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last update date for the group
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets missing_symbols
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V2MissingSymbolsInner[]
     */
    public function getMissingSymbols()
    {
        return $this->container['missing_symbols'];
    }

    /**
     * Sets missing_symbols
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V2MissingSymbolsInner[] $missing_symbols list of missing symbols
     *
     * @return $this
     */
    public function setMissingSymbols($missing_symbols)
    {
        $this->container['missing_symbols'] = $missing_symbols;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status group status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


