<?php
/**
 * CrashDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * CrashDetails Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CrashDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Crash_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_country' => 'string',
        'carrier_name' => 'string',
        'locale' => 'string',
        'os_build' => 'string',
        'rooted' => 'bool',
        'screen_size' => 'string',
        'app_start_timestamp' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_country' => null,
        'carrier_name' => null,
        'locale' => null,
        'os_build' => null,
        'rooted' => null,
        'screen_size' => null,
        'app_start_timestamp' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_country' => 'carrier_country',
        'carrier_name' => 'carrier_name',
        'locale' => 'locale',
        'os_build' => 'os_build',
        'rooted' => 'rooted',
        'screen_size' => 'screen_size',
        'app_start_timestamp' => 'app_start_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_country' => 'setCarrierCountry',
        'carrier_name' => 'setCarrierName',
        'locale' => 'setLocale',
        'os_build' => 'setOsBuild',
        'rooted' => 'setRooted',
        'screen_size' => 'setScreenSize',
        'app_start_timestamp' => 'setAppStartTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_country' => 'getCarrierCountry',
        'carrier_name' => 'getCarrierName',
        'locale' => 'getLocale',
        'os_build' => 'getOsBuild',
        'rooted' => 'getRooted',
        'screen_size' => 'getScreenSize',
        'app_start_timestamp' => 'getAppStartTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_country'] = isset($data['carrier_country']) ? $data['carrier_country'] : null;
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['os_build'] = isset($data['os_build']) ? $data['os_build'] : null;
        $this->container['rooted'] = isset($data['rooted']) ? $data['rooted'] : null;
        $this->container['screen_size'] = isset($data['screen_size']) ? $data['screen_size'] : null;
        $this->container['app_start_timestamp'] = isset($data['app_start_timestamp']) ? $data['app_start_timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['rooted'] === null) {
            $invalidProperties[] = "'rooted' can't be null";
        }
        if ($this->container['screen_size'] === null) {
            $invalidProperties[] = "'screen_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_country
     *
     * @return string
     */
    public function getCarrierCountry()
    {
        return $this->container['carrier_country'];
    }

    /**
     * Sets carrier_country
     *
     * @param string $carrier_country Carrier country code (for mobile devices).
     *
     * @return $this
     */
    public function setCarrierCountry($carrier_country)
    {
        $this->container['carrier_country'] = $carrier_country;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name Carrier name (for mobile devices).
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Language code (example: en_US).
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets os_build
     *
     * @return string
     */
    public function getOsBuild()
    {
        return $this->container['os_build'];
    }

    /**
     * Sets os_build
     *
     * @param string $os_build OS build code (example: LMY47X).
     *
     * @return $this
     */
    public function setOsBuild($os_build)
    {
        $this->container['os_build'] = $os_build;

        return $this;
    }

    /**
     * Gets rooted
     *
     * @return bool
     */
    public function getRooted()
    {
        return $this->container['rooted'];
    }

    /**
     * Sets rooted
     *
     * @param bool $rooted Whether the device where the crash occurred is rooted or jailbroken
     *
     * @return $this
     */
    public function setRooted($rooted)
    {
        $this->container['rooted'] = $rooted;

        return $this;
    }

    /**
     * Gets screen_size
     *
     * @return string
     */
    public function getScreenSize()
    {
        return $this->container['screen_size'];
    }

    /**
     * Sets screen_size
     *
     * @param string $screen_size Screen size of the device in pixels (example: 640x480).
     *
     * @return $this
     */
    public function setScreenSize($screen_size)
    {
        $this->container['screen_size'] = $screen_size;

        return $this;
    }

    /**
     * Gets app_start_timestamp
     *
     * @return \DateTime
     */
    public function getAppStartTimestamp()
    {
        return $this->container['app_start_timestamp'];
    }

    /**
     * Sets app_start_timestamp
     *
     * @param \DateTime $app_start_timestamp Application launch timestamp (example: 1985-04-12T23:20:50.52Z).
     *
     * @return $this
     */
    public function setAppStartTimestamp($app_start_timestamp)
    {
        $this->container['app_start_timestamp'] = $app_start_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


