<?php
/**
 * Body9
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * Body9 Class Doc Comment
 *
 * @category Class
 * @description A request containing information for updating a release.
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body9 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_9';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distribution_group_name' => 'string',
        'distribution_group_id' => 'string',
        'destination_name' => 'string',
        'destination_id' => 'string',
        'destination_type' => 'string',
        'release_notes' => 'string',
        'mandatory_update' => 'bool',
        'destinations' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdDestinations[]',
        'build' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdBuild',
        'notify_testers' => 'bool',
        'metadata' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'distribution_group_name' => null,
        'distribution_group_id' => null,
        'destination_name' => null,
        'destination_id' => null,
        'destination_type' => null,
        'release_notes' => null,
        'mandatory_update' => null,
        'destinations' => null,
        'build' => null,
        'notify_testers' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distribution_group_name' => 'distribution_group_name',
        'distribution_group_id' => 'distribution_group_id',
        'destination_name' => 'destination_name',
        'destination_id' => 'destination_id',
        'destination_type' => 'destination_type',
        'release_notes' => 'release_notes',
        'mandatory_update' => 'mandatory_update',
        'destinations' => 'destinations',
        'build' => 'build',
        'notify_testers' => 'notify_testers',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distribution_group_name' => 'setDistributionGroupName',
        'distribution_group_id' => 'setDistributionGroupId',
        'destination_name' => 'setDestinationName',
        'destination_id' => 'setDestinationId',
        'destination_type' => 'setDestinationType',
        'release_notes' => 'setReleaseNotes',
        'mandatory_update' => 'setMandatoryUpdate',
        'destinations' => 'setDestinations',
        'build' => 'setBuild',
        'notify_testers' => 'setNotifyTesters',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distribution_group_name' => 'getDistributionGroupName',
        'distribution_group_id' => 'getDistributionGroupId',
        'destination_name' => 'getDestinationName',
        'destination_id' => 'getDestinationId',
        'destination_type' => 'getDestinationType',
        'release_notes' => 'getReleaseNotes',
        'mandatory_update' => 'getMandatoryUpdate',
        'destinations' => 'getDestinations',
        'build' => 'getBuild',
        'notify_testers' => 'getNotifyTesters',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distribution_group_name'] = isset($data['distribution_group_name']) ? $data['distribution_group_name'] : null;
        $this->container['distribution_group_id'] = isset($data['distribution_group_id']) ? $data['distribution_group_id'] : null;
        $this->container['destination_name'] = isset($data['destination_name']) ? $data['destination_name'] : null;
        $this->container['destination_id'] = isset($data['destination_id']) ? $data['destination_id'] : null;
        $this->container['destination_type'] = isset($data['destination_type']) ? $data['destination_type'] : null;
        $this->container['release_notes'] = isset($data['release_notes']) ? $data['release_notes'] : null;
        $this->container['mandatory_update'] = isset($data['mandatory_update']) ? $data['mandatory_update'] : null;
        $this->container['destinations'] = isset($data['destinations']) ? $data['destinations'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['notify_testers'] = isset($data['notify_testers']) ? $data['notify_testers'] : true;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distribution_group_name
     *
     * @return string
     */
    public function getDistributionGroupName()
    {
        return $this->container['distribution_group_name'];
    }

    /**
     * Sets distribution_group_name
     *
     * @param string $distribution_group_name OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     *
     * @return $this
     */
    public function setDistributionGroupName($distribution_group_name)
    {
        $this->container['distribution_group_name'] = $distribution_group_name;

        return $this;
    }

    /**
     * Gets distribution_group_id
     *
     * @return string
     */
    public function getDistributionGroupId()
    {
        return $this->container['distribution_group_id'];
    }

    /**
     * Sets distribution_group_id
     *
     * @param string $distribution_group_id OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     *
     * @return $this
     */
    public function setDistributionGroupId($distribution_group_id)
    {
        $this->container['distribution_group_id'] = $distribution_group_id;

        return $this;
    }

    /**
     * Gets destination_name
     *
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     *
     * @param string $destination_name OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     *
     * @return $this
     */
    public function setDestinationName($destination_name)
    {
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return string
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param string $destination_id OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
     *
     * @return $this
     */
    public function setDestinationId($destination_id)
    {
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets destination_type
     *
     * @return string
     */
    public function getDestinationType()
    {
        return $this->container['destination_type'];
    }

    /**
     * Sets destination_type
     *
     * @param string $destination_type Not used anymore.
     *
     * @return $this
     */
    public function setDestinationType($destination_type)
    {
        $this->container['destination_type'] = $destination_type;

        return $this;
    }

    /**
     * Gets release_notes
     *
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['release_notes'];
    }

    /**
     * Sets release_notes
     *
     * @param string $release_notes Release notes for this release.
     *
     * @return $this
     */
    public function setReleaseNotes($release_notes)
    {
        $this->container['release_notes'] = $release_notes;

        return $this;
    }

    /**
     * Gets mandatory_update
     *
     * @return bool
     */
    public function getMandatoryUpdate()
    {
        return $this->container['mandatory_update'];
    }

    /**
     * Sets mandatory_update
     *
     * @param bool $mandatory_update A boolean which determines whether this version should be a mandatory update or not.
     *
     * @return $this
     */
    public function setMandatoryUpdate($mandatory_update)
    {
        $this->container['mandatory_update'] = $mandatory_update;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdDestinations[]
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdDestinations[] $destinations Distribute this release under the following list of destinations (store groups or distribution groups).
     *
     * @return $this
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdBuild
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdBuild $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets notify_testers
     *
     * @return bool
     */
    public function getNotifyTesters()
    {
        return $this->container['notify_testers'];
    }

    /**
     * Sets notify_testers
     *
     * @param bool $notify_testers A boolean which determines whether to notify testers of a new release, default to true.
     *
     * @return $this
     */
    public function setNotifyTesters($notify_testers)
    {
        $this->container['notify_testers'] = $notify_testers;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamereleasesreleaseIdMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


