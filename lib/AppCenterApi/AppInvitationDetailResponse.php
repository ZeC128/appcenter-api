<?php
/**
 * AppInvitationDetailResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * AppInvitationDetailResponse Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppInvitationDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppInvitationDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'app' => '\ZeC128\AppCenter\AppCenterApi\V01testerappsRelease',
        'email' => 'string',
        'invite_type' => 'string',
        'invited_by' => '\ZeC128\AppCenter\AppCenterApi\InlineResponse20020',
        'is_existing_user' => 'bool',
        'permissions' => 'string[]',
        'app_count' => 'float',
        'distribution_group' => '\ZeC128\AppCenter\AppCenterApi\AppInvitationDetailResponseDistributionGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'app' => null,
        'email' => null,
        'invite_type' => null,
        'invited_by' => null,
        'is_existing_user' => null,
        'permissions' => null,
        'app_count' => null,
        'distribution_group' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'app' => 'app',
        'email' => 'email',
        'invite_type' => 'invite_type',
        'invited_by' => 'invited_by',
        'is_existing_user' => 'is_existing_user',
        'permissions' => 'permissions',
        'app_count' => 'app_count',
        'distribution_group' => 'distribution_group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'app' => 'setApp',
        'email' => 'setEmail',
        'invite_type' => 'setInviteType',
        'invited_by' => 'setInvitedBy',
        'is_existing_user' => 'setIsExistingUser',
        'permissions' => 'setPermissions',
        'app_count' => 'setAppCount',
        'distribution_group' => 'setDistributionGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'app' => 'getApp',
        'email' => 'getEmail',
        'invite_type' => 'getInviteType',
        'invited_by' => 'getInvitedBy',
        'is_existing_user' => 'getIsExistingUser',
        'permissions' => 'getPermissions',
        'app_count' => 'getAppCount',
        'distribution_group' => 'getDistributionGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVITE_TYPE_DEVELOPER = 'developer';
    const INVITE_TYPE_TESTER = 'tester';
    const PERMISSIONS_MANAGER = 'manager';
    const PERMISSIONS_DEVELOPER = 'developer';
    const PERMISSIONS_VIEWER = 'viewer';
    const PERMISSIONS_TESTER = 'tester';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInviteTypeAllowableValues()
    {
        return [
            self::INVITE_TYPE_DEVELOPER,
            self::INVITE_TYPE_TESTER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionsAllowableValues()
    {
        return [
            self::PERMISSIONS_MANAGER,
            self::PERMISSIONS_DEVELOPER,
            self::PERMISSIONS_VIEWER,
            self::PERMISSIONS_TESTER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['app'] = isset($data['app']) ? $data['app'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['invite_type'] = isset($data['invite_type']) ? $data['invite_type'] : null;
        $this->container['invited_by'] = isset($data['invited_by']) ? $data['invited_by'] : null;
        $this->container['is_existing_user'] = isset($data['is_existing_user']) ? $data['is_existing_user'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['app_count'] = isset($data['app_count']) ? $data['app_count'] : null;
        $this->container['distribution_group'] = isset($data['distribution_group']) ? $data['distribution_group'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['app'] === null) {
            $invalidProperties[] = "'app' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['invite_type'] === null) {
            $invalidProperties[] = "'invite_type' can't be null";
        }
        $allowedValues = $this->getInviteTypeAllowableValues();
        if (!is_null($this->container['invite_type']) && !in_array($this->container['invite_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invite_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['invited_by'] === null) {
            $invalidProperties[] = "'invited_by' can't be null";
        }
        if ($this->container['is_existing_user'] === null) {
            $invalidProperties[] = "'is_existing_user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID (UUID) of the invitation
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets app
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01testerappsRelease
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01testerappsRelease $app app
     *
     * @return $this
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the invited user
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets invite_type
     *
     * @return string
     */
    public function getInviteType()
    {
        return $this->container['invite_type'];
    }

    /**
     * Sets invite_type
     *
     * @param string $invite_type The invitation type
     *
     * @return $this
     */
    public function setInviteType($invite_type)
    {
        $allowedValues = $this->getInviteTypeAllowableValues();
        if (!in_array($invite_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invite_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invite_type'] = $invite_type;

        return $this;
    }

    /**
     * Gets invited_by
     *
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20020
     */
    public function getInvitedBy()
    {
        return $this->container['invited_by'];
    }

    /**
     * Sets invited_by
     *
     * @param \ZeC128\AppCenter\AppCenterApi\InlineResponse20020 $invited_by invited_by
     *
     * @return $this
     */
    public function setInvitedBy($invited_by)
    {
        $this->container['invited_by'] = $invited_by;

        return $this;
    }

    /**
     * Gets is_existing_user
     *
     * @return bool
     */
    public function getIsExistingUser()
    {
        return $this->container['is_existing_user'];
    }

    /**
     * Sets is_existing_user
     *
     * @param bool $is_existing_user Indicates whether the invited user already exists
     *
     * @return $this
     */
    public function setIsExistingUser($is_existing_user)
    {
        $this->container['is_existing_user'] = $is_existing_user;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[] $permissions The permissions the user has for the app
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $allowedValues = $this->getPermissionsAllowableValues();
        if (!is_null($permissions) && array_diff($permissions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets app_count
     *
     * @return float
     */
    public function getAppCount()
    {
        return $this->container['app_count'];
    }

    /**
     * Sets app_count
     *
     * @param float $app_count The number of apps in the group
     *
     * @return $this
     */
    public function setAppCount($app_count)
    {
        $this->container['app_count'] = $app_count;

        return $this;
    }

    /**
     * Gets distribution_group
     *
     * @return \ZeC128\AppCenter\AppCenterApi\AppInvitationDetailResponseDistributionGroup
     */
    public function getDistributionGroup()
    {
        return $this->container['distribution_group'];
    }

    /**
     * Sets distribution_group
     *
     * @param \ZeC128\AppCenter\AppCenterApi\AppInvitationDetailResponseDistributionGroup $distribution_group distribution_group
     *
     * @return $this
     */
    public function setDistributionGroup($distribution_group)
    {
        $this->container['distribution_group'] = $distribution_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


