<?php
/**
 * ReleaseUpdateResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * ReleaseUpdateResponse Class Doc Comment
 *
 * @category Class
 * @description Response for updating a release
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseUpdateResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseUpdateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'mandatory_update' => 'bool',
        'release_notes' => 'string',
        'provisioning_status_url' => 'string',
        'destinations' => '\ZeC128\AppCenter\AppCenterApi\ReleaseUpdateResponseDestinations[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'mandatory_update' => null,
        'release_notes' => null,
        'provisioning_status_url' => null,
        'destinations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'mandatory_update' => 'mandatory_update',
        'release_notes' => 'release_notes',
        'provisioning_status_url' => 'provisioning_status_url',
        'destinations' => 'destinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'mandatory_update' => 'setMandatoryUpdate',
        'release_notes' => 'setReleaseNotes',
        'provisioning_status_url' => 'setProvisioningStatusUrl',
        'destinations' => 'setDestinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'mandatory_update' => 'getMandatoryUpdate',
        'release_notes' => 'getReleaseNotes',
        'provisioning_status_url' => 'getProvisioningStatusUrl',
        'destinations' => 'getDestinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['mandatory_update'] = isset($data['mandatory_update']) ? $data['mandatory_update'] : null;
        $this->container['release_notes'] = isset($data['release_notes']) ? $data['release_notes'] : null;
        $this->container['provisioning_status_url'] = isset($data['provisioning_status_url']) ? $data['provisioning_status_url'] : null;
        $this->container['destinations'] = isset($data['destinations']) ? $data['destinations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets mandatory_update
     *
     * @return bool
     */
    public function getMandatoryUpdate()
    {
        return $this->container['mandatory_update'];
    }

    /**
     * Sets mandatory_update
     *
     * @param bool $mandatory_update mandatory_update
     *
     * @return $this
     */
    public function setMandatoryUpdate($mandatory_update)
    {
        $this->container['mandatory_update'] = $mandatory_update;

        return $this;
    }

    /**
     * Gets release_notes
     *
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['release_notes'];
    }

    /**
     * Sets release_notes
     *
     * @param string $release_notes release_notes
     *
     * @return $this
     */
    public function setReleaseNotes($release_notes)
    {
        $this->container['release_notes'] = $release_notes;

        return $this;
    }

    /**
     * Gets provisioning_status_url
     *
     * @return string
     */
    public function getProvisioningStatusUrl()
    {
        return $this->container['provisioning_status_url'];
    }

    /**
     * Sets provisioning_status_url
     *
     * @param string $provisioning_status_url provisioning_status_url
     *
     * @return $this
     */
    public function setProvisioningStatusUrl($provisioning_status_url)
    {
        $this->container['provisioning_status_url'] = $provisioning_status_url;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \ZeC128\AppCenter\AppCenterApi\ReleaseUpdateResponseDestinations[]
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \ZeC128\AppCenter\AppCenterApi\ReleaseUpdateResponseDestinations[] $destinations destinations
     *
     * @return $this
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


