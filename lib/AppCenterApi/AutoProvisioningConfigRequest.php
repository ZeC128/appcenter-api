<?php
/**
 * AutoProvisioningConfigRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * AutoProvisioningConfigRequest Class Doc Comment
 *
 * @category Class
 * @description A request containing information for creating a Auto Provisioning Config.
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AutoProvisioningConfigRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AutoProvisioningConfigRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apple_developer_account_key' => 'string',
        'apple_distribution_certificate_key' => 'string',
        'allow_auto_provisioning' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apple_developer_account_key' => null,
        'apple_distribution_certificate_key' => null,
        'allow_auto_provisioning' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apple_developer_account_key' => 'apple_developer_account_key',
        'apple_distribution_certificate_key' => 'apple_distribution_certificate_key',
        'allow_auto_provisioning' => 'allow_auto_provisioning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apple_developer_account_key' => 'setAppleDeveloperAccountKey',
        'apple_distribution_certificate_key' => 'setAppleDistributionCertificateKey',
        'allow_auto_provisioning' => 'setAllowAutoProvisioning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apple_developer_account_key' => 'getAppleDeveloperAccountKey',
        'apple_distribution_certificate_key' => 'getAppleDistributionCertificateKey',
        'allow_auto_provisioning' => 'getAllowAutoProvisioning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apple_developer_account_key'] = isset($data['apple_developer_account_key']) ? $data['apple_developer_account_key'] : null;
        $this->container['apple_distribution_certificate_key'] = isset($data['apple_distribution_certificate_key']) ? $data['apple_distribution_certificate_key'] : null;
        $this->container['allow_auto_provisioning'] = isset($data['allow_auto_provisioning']) ? $data['allow_auto_provisioning'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apple_developer_account_key
     *
     * @return string
     */
    public function getAppleDeveloperAccountKey()
    {
        return $this->container['apple_developer_account_key'];
    }

    /**
     * Sets apple_developer_account_key
     *
     * @param string $apple_developer_account_key A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email.
     *
     * @return $this
     */
    public function setAppleDeveloperAccountKey($apple_developer_account_key)
    {
        $this->container['apple_developer_account_key'] = $apple_developer_account_key;

        return $this;
    }

    /**
     * Gets apple_distribution_certificate_key
     *
     * @return string
     */
    public function getAppleDistributionCertificateKey()
    {
        return $this->container['apple_distribution_certificate_key'];
    }

    /**
     * Sets apple_distribution_certificate_key
     *
     * @param string $apple_distribution_certificate_key A key to a secret in customer-credential-store. distribution_certificate refers to the customer's certificate (that holds the private key) that will be used to sign the app.
     *
     * @return $this
     */
    public function setAppleDistributionCertificateKey($apple_distribution_certificate_key)
    {
        $this->container['apple_distribution_certificate_key'] = $apple_distribution_certificate_key;

        return $this;
    }

    /**
     * Gets allow_auto_provisioning
     *
     * @return bool
     */
    public function getAllowAutoProvisioning()
    {
        return $this->container['allow_auto_provisioning'];
    }

    /**
     * Sets allow_auto_provisioning
     *
     * @param bool $allow_auto_provisioning When *true* enables auto provisioning
     *
     * @return $this
     */
    public function setAllowAutoProvisioning($allow_auto_provisioning)
    {
        $this->container['allow_auto_provisioning'] = $allow_auto_provisioning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


