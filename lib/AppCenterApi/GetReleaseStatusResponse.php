<?php
/**
 * GetReleaseStatusResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * GetReleaseStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetReleaseStatusResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetReleaseStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'upload_status' => 'string',
        'error_details' => 'string',
        'release_distinct_id' => 'float',
        'release_url' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'upload_status' => null,
        'error_details' => null,
        'release_distinct_id' => null,
        'release_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'upload_status' => 'upload_status',
        'error_details' => 'error_details',
        'release_distinct_id' => 'release_distinct_id',
        'release_url' => 'release_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'upload_status' => 'setUploadStatus',
        'error_details' => 'setErrorDetails',
        'release_distinct_id' => 'setReleaseDistinctId',
        'release_url' => 'setReleaseUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'upload_status' => 'getUploadStatus',
        'error_details' => 'getErrorDetails',
        'release_distinct_id' => 'getReleaseDistinctId',
        'release_url' => 'getReleaseUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UPLOAD_STATUS_UPLOAD_STARTED = 'uploadStarted';
    const UPLOAD_STATUS_UPLOAD_FINISHED = 'uploadFinished';
    const UPLOAD_STATUS_READY_TO_BE_PUBLISHED = 'readyToBePublished';
    const UPLOAD_STATUS_MALWARE_DETECTED = 'malwareDetected';
    const UPLOAD_STATUS_ERROR = 'error';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadStatusAllowableValues()
    {
        return [
            self::UPLOAD_STATUS_UPLOAD_STARTED,
            self::UPLOAD_STATUS_UPLOAD_FINISHED,
            self::UPLOAD_STATUS_READY_TO_BE_PUBLISHED,
            self::UPLOAD_STATUS_MALWARE_DETECTED,
            self::UPLOAD_STATUS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['upload_status'] = isset($data['upload_status']) ? $data['upload_status'] : null;
        $this->container['error_details'] = isset($data['error_details']) ? $data['error_details'] : null;
        $this->container['release_distinct_id'] = isset($data['release_distinct_id']) ? $data['release_distinct_id'] : null;
        $this->container['release_url'] = isset($data['release_url']) ? $data['release_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['upload_status'] === null) {
            $invalidProperties[] = "'upload_status' can't be null";
        }
        $allowedValues = $this->getUploadStatusAllowableValues();
        if (!is_null($this->container['upload_status']) && !in_array($this->container['upload_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'upload_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID for the upload.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets upload_status
     *
     * @return string
     */
    public function getUploadStatus()
    {
        return $this->container['upload_status'];
    }

    /**
     * Sets upload_status
     *
     * @param string $upload_status The current upload status.
     *
     * @return $this
     */
    public function setUploadStatus($upload_status)
    {
        $allowedValues = $this->getUploadStatusAllowableValues();
        if (!in_array($upload_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'upload_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_status'] = $upload_status;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return string
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param string $error_details Details describing what went wrong processing the upload. Will only be set if status = 'error'.
     *
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        $this->container['error_details'] = $error_details;

        return $this;
    }

    /**
     * Gets release_distinct_id
     *
     * @return float
     */
    public function getReleaseDistinctId()
    {
        return $this->container['release_distinct_id'];
    }

    /**
     * Sets release_distinct_id
     *
     * @param float $release_distinct_id The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.
     *
     * @return $this
     */
    public function setReleaseDistinctId($release_distinct_id)
    {
        $this->container['release_distinct_id'] = $release_distinct_id;

        return $this;
    }

    /**
     * Gets release_url
     *
     * @return object
     */
    public function getReleaseUrl()
    {
        return $this->container['release_url'];
    }

    /**
     * Sets release_url
     *
     * @param object $release_url The URL of the release. Will only be set when the status = 'readyToBePublished'.
     *
     * @return $this
     */
    public function setReleaseUrl($release_url)
    {
        $this->container['release_url'] = $release_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


