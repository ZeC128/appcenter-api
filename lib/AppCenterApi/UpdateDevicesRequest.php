<?php
/**
 * UpdateDevicesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * UpdateDevicesRequest Class Doc Comment
 *
 * @category Class
 * @description Information required to publish devices to the Apple Developer account and resign the application.
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateDevicesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateDevicesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'release_id' => 'float',
        'username' => 'string',
        'password' => 'string',
        'account_service_connection_id' => 'string',
        'p12_base64' => 'string',
        'p12_service_connection_id' => 'string',
        'p12_password' => 'string',
        'publish_all_devices' => 'bool',
        'devices' => 'string[]',
        'destinations' => '\ZeC128\AppCenter\AppCenterApi\UpdateDevicesRequestDestinations[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'release_id' => null,
        'username' => null,
        'password' => null,
        'account_service_connection_id' => null,
        'p12_base64' => null,
        'p12_service_connection_id' => null,
        'p12_password' => null,
        'publish_all_devices' => null,
        'devices' => null,
        'destinations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'release_id' => 'release_id',
        'username' => 'username',
        'password' => 'password',
        'account_service_connection_id' => 'account_service_connection_id',
        'p12_base64' => 'p12_base64',
        'p12_service_connection_id' => 'p12_service_connection_id',
        'p12_password' => 'p12_password',
        'publish_all_devices' => 'publish_all_devices',
        'devices' => 'devices',
        'destinations' => 'destinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'release_id' => 'setReleaseId',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'account_service_connection_id' => 'setAccountServiceConnectionId',
        'p12_base64' => 'setP12Base64',
        'p12_service_connection_id' => 'setP12ServiceConnectionId',
        'p12_password' => 'setP12Password',
        'publish_all_devices' => 'setPublishAllDevices',
        'devices' => 'setDevices',
        'destinations' => 'setDestinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'release_id' => 'getReleaseId',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'account_service_connection_id' => 'getAccountServiceConnectionId',
        'p12_base64' => 'getP12Base64',
        'p12_service_connection_id' => 'getP12ServiceConnectionId',
        'p12_password' => 'getP12Password',
        'publish_all_devices' => 'getPublishAllDevices',
        'devices' => 'getDevices',
        'destinations' => 'getDestinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['release_id'] = isset($data['release_id']) ? $data['release_id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['account_service_connection_id'] = isset($data['account_service_connection_id']) ? $data['account_service_connection_id'] : null;
        $this->container['p12_base64'] = isset($data['p12_base64']) ? $data['p12_base64'] : null;
        $this->container['p12_service_connection_id'] = isset($data['p12_service_connection_id']) ? $data['p12_service_connection_id'] : null;
        $this->container['p12_password'] = isset($data['p12_password']) ? $data['p12_password'] : null;
        $this->container['publish_all_devices'] = isset($data['publish_all_devices']) ? $data['publish_all_devices'] : null;
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['destinations'] = isset($data['destinations']) ? $data['destinations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets release_id
     *
     * @return float
     */
    public function getReleaseId()
    {
        return $this->container['release_id'];
    }

    /**
     * Sets release_id
     *
     * @param float $release_id When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.
     *
     * @return $this
     */
    public function setReleaseId($release_id)
    {
        $this->container['release_id'] = $release_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The username for the Apple Developer account to publish the devices to.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password for the Apple Developer account to publish the devices to.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets account_service_connection_id
     *
     * @return string
     */
    public function getAccountServiceConnectionId()
    {
        return $this->container['account_service_connection_id'];
    }

    /**
     * Sets account_service_connection_id
     *
     * @param string $account_service_connection_id The service_connection_id of the stored Apple credentials instead of username, password.
     *
     * @return $this
     */
    public function setAccountServiceConnectionId($account_service_connection_id)
    {
        $this->container['account_service_connection_id'] = $account_service_connection_id;

        return $this;
    }

    /**
     * Gets p12_base64
     *
     * @return string
     */
    public function getP12Base64()
    {
        return $this->container['p12_base64'];
    }

    /**
     * Sets p12_base64
     *
     * @param string $p12_base64 The certificate to use for resigning the application with the updated provisioning profiles.
     *
     * @return $this
     */
    public function setP12Base64($p12_base64)
    {
        $this->container['p12_base64'] = $p12_base64;

        return $this;
    }

    /**
     * Gets p12_service_connection_id
     *
     * @return string
     */
    public function getP12ServiceConnectionId()
    {
        return $this->container['p12_service_connection_id'];
    }

    /**
     * Sets p12_service_connection_id
     *
     * @param string $p12_service_connection_id The service_connection_id of the stored Apple certificate instead of p12_base64 value.
     *
     * @return $this
     */
    public function setP12ServiceConnectionId($p12_service_connection_id)
    {
        $this->container['p12_service_connection_id'] = $p12_service_connection_id;

        return $this;
    }

    /**
     * Gets p12_password
     *
     * @return string
     */
    public function getP12Password()
    {
        return $this->container['p12_password'];
    }

    /**
     * Sets p12_password
     *
     * @param string $p12_password The password certificate if one is needed.
     *
     * @return $this
     */
    public function setP12Password($p12_password)
    {
        $this->container['p12_password'] = $p12_password;

        return $this;
    }

    /**
     * Gets publish_all_devices
     *
     * @return bool
     */
    public function getPublishAllDevices()
    {
        return $this->container['publish_all_devices'];
    }

    /**
     * Sets publish_all_devices
     *
     * @param bool $publish_all_devices When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.
     *
     * @return $this
     */
    public function setPublishAllDevices($publish_all_devices)
    {
        $this->container['publish_all_devices'] = $publish_all_devices;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return string[]
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param string[] $devices Array of device UDID's to be published to the Apple Developer account.
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \ZeC128\AppCenter\AppCenterApi\UpdateDevicesRequestDestinations[]
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \ZeC128\AppCenter\AppCenterApi\UpdateDevicesRequestDestinations[] $destinations Array of distribution groups that the devices should be provisioned from.
     *
     * @return $this
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


