<?php
/**
 * ExportConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * ExportConfiguration Class Doc Comment
 *
 * @category Class
 * @description Export configuration
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExportConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExportConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'export_entities' => 'string[]',
        'resource_name' => 'string',
        'resource_group' => 'string',
        'backfill' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'export_entities' => null,
        'resource_name' => null,
        'resource_group' => null,
        'backfill' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'export_entities' => 'export_entities',
        'resource_name' => 'resource_name',
        'resource_group' => 'resource_group',
        'backfill' => 'backfill'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'export_entities' => 'setExportEntities',
        'resource_name' => 'setResourceName',
        'resource_group' => 'setResourceGroup',
        'backfill' => 'setBackfill'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'export_entities' => 'getExportEntities',
        'resource_name' => 'getResourceName',
        'resource_group' => 'getResourceGroup',
        'backfill' => 'getBackfill'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BLOB_STORAGE_CONNECTION_STRING = 'blob_storage_connection_string';
    const TYPE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY = 'application_insights_instrumentation_key';
    const TYPE_BLOB_STORAGE_LINKED_SUBSCRIPTION = 'blob_storage_linked_subscription';
    const TYPE_APPLICATION_INSIGHTS_LINKED_SUBSCRIPTION = 'application_insights_linked_subscription';
    const EXPORT_ENTITIES_CRASHES = 'crashes';
    const EXPORT_ENTITIES_ERRORS = 'errors';
    const EXPORT_ENTITIES_ATTACHMENTS = 'attachments';
    const EXPORT_ENTITIES_NO_LOGS = 'no_logs';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BLOB_STORAGE_CONNECTION_STRING,
            self::TYPE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY,
            self::TYPE_BLOB_STORAGE_LINKED_SUBSCRIPTION,
            self::TYPE_APPLICATION_INSIGHTS_LINKED_SUBSCRIPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportEntitiesAllowableValues()
    {
        return [
            self::EXPORT_ENTITIES_CRASHES,
            self::EXPORT_ENTITIES_ERRORS,
            self::EXPORT_ENTITIES_ATTACHMENTS,
            self::EXPORT_ENTITIES_NO_LOGS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['export_entities'] = isset($data['export_entities']) ? $data['export_entities'] : null;
        $this->container['resource_name'] = isset($data['resource_name']) ? $data['resource_name'] : null;
        $this->container['resource_group'] = isset($data['resource_group']) ? $data['resource_group'] : null;
        $this->container['backfill'] = isset($data['backfill']) ? $data['backfill'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('type', self::$attributeMap, true);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of export configuration
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets export_entities
     *
     * @return string[]
     */
    public function getExportEntities()
    {
        return $this->container['export_entities'];
    }

    /**
     * Sets export_entities
     *
     * @param string[] $export_entities export_entities
     *
     * @return $this
     */
    public function setExportEntities($export_entities)
    {
        $allowedValues = $this->getExportEntitiesAllowableValues();
        if (!is_null($export_entities) && array_diff($export_entities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_entities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_entities'] = $export_entities;

        return $this;
    }

    /**
     * Gets resource_name
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     *
     * @param string $resource_name The resource name on azure
     *
     * @return $this
     */
    public function setResourceName($resource_name)
    {
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets resource_group
     *
     * @return string
     */
    public function getResourceGroup()
    {
        return $this->container['resource_group'];
    }

    /**
     * Sets resource_group
     *
     * @param string $resource_group The resource group name on azure
     *
     * @return $this
     */
    public function setResourceGroup($resource_group)
    {
        $this->container['resource_group'] = $resource_group;

        return $this;
    }

    /**
     * Gets backfill
     *
     * @return bool
     */
    public function getBackfill()
    {
        return $this->container['backfill'];
    }

    /**
     * Sets backfill
     *
     * @param bool $backfill Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.
     *
     * @return $this
     */
    public function setBackfill($backfill)
    {
        $this->container['backfill'] = $backfill;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


