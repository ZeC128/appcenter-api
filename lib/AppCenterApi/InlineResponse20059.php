<?php
/**
 * InlineResponse20059
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * InlineResponse20059 Class Doc Comment
 *
 * @category Class
 * @description Details of an uploaded release
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20059 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_59';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'status' => 'string',
        'app_name' => 'string',
        'app_display_name' => 'string',
        'version' => 'string',
        'short_version' => 'string',
        'release_notes' => 'string',
        'size' => 'float',
        'min_os' => 'string',
        'android_min_api_level' => 'string',
        'bundle_identifier' => 'string',
        'fingerprint' => 'string',
        'uploaded_at' => 'string',
        'download_url' => 'string',
        'install_url' => 'string',
        'distribution_stores' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'status' => null,
        'app_name' => null,
        'app_display_name' => null,
        'version' => null,
        'short_version' => null,
        'release_notes' => null,
        'size' => null,
        'min_os' => null,
        'android_min_api_level' => null,
        'bundle_identifier' => null,
        'fingerprint' => null,
        'uploaded_at' => null,
        'download_url' => null,
        'install_url' => null,
        'distribution_stores' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'app_name' => 'app_name',
        'app_display_name' => 'app_display_name',
        'version' => 'version',
        'short_version' => 'short_version',
        'release_notes' => 'release_notes',
        'size' => 'size',
        'min_os' => 'min_os',
        'android_min_api_level' => 'android_min_api_level',
        'bundle_identifier' => 'bundle_identifier',
        'fingerprint' => 'fingerprint',
        'uploaded_at' => 'uploaded_at',
        'download_url' => 'download_url',
        'install_url' => 'install_url',
        'distribution_stores' => 'distribution_stores'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'app_name' => 'setAppName',
        'app_display_name' => 'setAppDisplayName',
        'version' => 'setVersion',
        'short_version' => 'setShortVersion',
        'release_notes' => 'setReleaseNotes',
        'size' => 'setSize',
        'min_os' => 'setMinOs',
        'android_min_api_level' => 'setAndroidMinApiLevel',
        'bundle_identifier' => 'setBundleIdentifier',
        'fingerprint' => 'setFingerprint',
        'uploaded_at' => 'setUploadedAt',
        'download_url' => 'setDownloadUrl',
        'install_url' => 'setInstallUrl',
        'distribution_stores' => 'setDistributionStores'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'app_name' => 'getAppName',
        'app_display_name' => 'getAppDisplayName',
        'version' => 'getVersion',
        'short_version' => 'getShortVersion',
        'release_notes' => 'getReleaseNotes',
        'size' => 'getSize',
        'min_os' => 'getMinOs',
        'android_min_api_level' => 'getAndroidMinApiLevel',
        'bundle_identifier' => 'getBundleIdentifier',
        'fingerprint' => 'getFingerprint',
        'uploaded_at' => 'getUploadedAt',
        'download_url' => 'getDownloadUrl',
        'install_url' => 'getInstallUrl',
        'distribution_stores' => 'getDistributionStores'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_AVAILABLE = 'available';
    const STATUS_UNAVAILABLE = 'unavailable';
    const INSTALL_URL_GROUP = 'group';
    const INSTALL_URL_STORE = 'store';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AVAILABLE,
            self::STATUS_UNAVAILABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstallUrlAllowableValues()
    {
        return [
            self::INSTALL_URL_GROUP,
            self::INSTALL_URL_STORE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['app_display_name'] = isset($data['app_display_name']) ? $data['app_display_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['short_version'] = isset($data['short_version']) ? $data['short_version'] : null;
        $this->container['release_notes'] = isset($data['release_notes']) ? $data['release_notes'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['min_os'] = isset($data['min_os']) ? $data['min_os'] : null;
        $this->container['android_min_api_level'] = isset($data['android_min_api_level']) ? $data['android_min_api_level'] : null;
        $this->container['bundle_identifier'] = isset($data['bundle_identifier']) ? $data['bundle_identifier'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['uploaded_at'] = isset($data['uploaded_at']) ? $data['uploaded_at'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['install_url'] = isset($data['install_url']) ? $data['install_url'] : null;
        $this->container['distribution_stores'] = isset($data['distribution_stores']) ? $data['distribution_stores'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInstallUrlAllowableValues();
        if (!is_null($this->container['install_url']) && !in_array($this->container['install_url'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'install_url', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id ID identifying this unique release.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name The app's name (extracted from the uploaded release).
     *
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_display_name
     *
     * @return string
     */
    public function getAppDisplayName()
    {
        return $this->container['app_display_name'];
    }

    /**
     * Sets app_display_name
     *
     * @param string $app_display_name The app's display name.
     *
     * @return $this
     */
    public function setAppDisplayName($app_display_name)
    {
        $this->container['app_display_name'] = $app_display_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets short_version
     *
     * @return string
     */
    public function getShortVersion()
    {
        return $this->container['short_version'];
    }

    /**
     * Sets short_version
     *
     * @param string $short_version The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml.
     *
     * @return $this
     */
    public function setShortVersion($short_version)
    {
        $this->container['short_version'] = $short_version;

        return $this;
    }

    /**
     * Gets release_notes
     *
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['release_notes'];
    }

    /**
     * Sets release_notes
     *
     * @param string $release_notes The release's release notes.
     *
     * @return $this
     */
    public function setReleaseNotes($release_notes)
    {
        $this->container['release_notes'] = $release_notes;

        return $this;
    }

    /**
     * Gets size
     *
     * @return float
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param float $size The release's size in bytes.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets min_os
     *
     * @return string
     */
    public function getMinOs()
    {
        return $this->container['min_os'];
    }

    /**
     * Sets min_os
     *
     * @param string $min_os The release's minimum required operating system.
     *
     * @return $this
     */
    public function setMinOs($min_os)
    {
        $this->container['min_os'] = $min_os;

        return $this;
    }

    /**
     * Gets android_min_api_level
     *
     * @return string
     */
    public function getAndroidMinApiLevel()
    {
        return $this->container['android_min_api_level'];
    }

    /**
     * Sets android_min_api_level
     *
     * @param string $android_min_api_level The release's minimum required Android API level.
     *
     * @return $this
     */
    public function setAndroidMinApiLevel($android_min_api_level)
    {
        $this->container['android_min_api_level'] = $android_min_api_level;

        return $this;
    }

    /**
     * Gets bundle_identifier
     *
     * @return string
     */
    public function getBundleIdentifier()
    {
        return $this->container['bundle_identifier'];
    }

    /**
     * Sets bundle_identifier
     *
     * @param string $bundle_identifier The identifier of the apps bundle.
     *
     * @return $this
     */
    public function setBundleIdentifier($bundle_identifier)
    {
        $this->container['bundle_identifier'] = $bundle_identifier;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint MD5 checksum of the release binary.
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets uploaded_at
     *
     * @return string
     */
    public function getUploadedAt()
    {
        return $this->container['uploaded_at'];
    }

    /**
     * Sets uploaded_at
     *
     * @param string $uploaded_at UTC time in ISO 8601 format of the uploaded time.
     *
     * @return $this
     */
    public function setUploadedAt($uploaded_at)
    {
        $this->container['uploaded_at'] = $uploaded_at;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url The URL that hosts the binary for this release.
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets install_url
     *
     * @return string
     */
    public function getInstallUrl()
    {
        return $this->container['install_url'];
    }

    /**
     * Sets install_url
     *
     * @param string $install_url The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
     *
     * @return $this
     */
    public function setInstallUrl($install_url)
    {
        $allowedValues = $this->getInstallUrlAllowableValues();
        if (!is_null($install_url) && !in_array($install_url, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'install_url', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['install_url'] = $install_url;

        return $this;
    }

    /**
     * Gets distribution_stores
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores[]
     */
    public function getDistributionStores()
    {
        return $this->container['distribution_stores'];
    }

    /**
     * Sets distribution_stores
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores[] $distribution_stores a list of distribution stores that are associated with this release.
     *
     * @return $this
     */
    public function setDistributionStores($distribution_stores)
    {
        $this->container['distribution_stores'] = $distribution_stores;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


