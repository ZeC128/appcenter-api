<?php
/**
 * Build
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Build implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'build_number' => 'string',
        'queue_time' => 'string',
        'start_time' => 'string',
        'finish_time' => 'string',
        'last_changed_date' => 'string',
        'status' => 'string',
        'result' => 'string',
        'source_branch' => 'string',
        'source_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'build_number' => null,
        'queue_time' => 'dateTime',
        'start_time' => 'dateTime',
        'finish_time' => 'dateTime',
        'last_changed_date' => 'dateTime',
        'status' => null,
        'result' => null,
        'source_branch' => null,
        'source_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'build_number' => 'buildNumber',
        'queue_time' => 'queueTime',
        'start_time' => 'startTime',
        'finish_time' => 'finishTime',
        'last_changed_date' => 'lastChangedDate',
        'status' => 'status',
        'result' => 'result',
        'source_branch' => 'sourceBranch',
        'source_version' => 'sourceVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'build_number' => 'setBuildNumber',
        'queue_time' => 'setQueueTime',
        'start_time' => 'setStartTime',
        'finish_time' => 'setFinishTime',
        'last_changed_date' => 'setLastChangedDate',
        'status' => 'setStatus',
        'result' => 'setResult',
        'source_branch' => 'setSourceBranch',
        'source_version' => 'setSourceVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'build_number' => 'getBuildNumber',
        'queue_time' => 'getQueueTime',
        'start_time' => 'getStartTime',
        'finish_time' => 'getFinishTime',
        'last_changed_date' => 'getLastChangedDate',
        'status' => 'getStatus',
        'result' => 'getResult',
        'source_branch' => 'getSourceBranch',
        'source_version' => 'getSourceVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['build_number'] = isset($data['build_number']) ? $data['build_number'] : null;
        $this->container['queue_time'] = isset($data['queue_time']) ? $data['queue_time'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['finish_time'] = isset($data['finish_time']) ? $data['finish_time'] : null;
        $this->container['last_changed_date'] = isset($data['last_changed_date']) ? $data['last_changed_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['source_branch'] = isset($data['source_branch']) ? $data['source_branch'] : null;
        $this->container['source_version'] = isset($data['source_version']) ? $data['source_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] <= 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than 0.";
        }

        if ($this->container['build_number'] === null) {
            $invalidProperties[] = "'build_number' can't be null";
        }
        if ($this->container['queue_time'] === null) {
            $invalidProperties[] = "'queue_time' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        if ($this->container['source_branch'] === null) {
            $invalidProperties[] = "'source_branch' can't be null";
        }
        if ($this->container['source_version'] === null) {
            $invalidProperties[] = "'source_version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The build ID
     *
     * @return $this
     */
    public function setId($id)
    {

        if (($id <= 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling Build., must be bigger than 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param string $build_number The build number
     *
     * @return $this
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets queue_time
     *
     * @return string
     */
    public function getQueueTime()
    {
        return $this->container['queue_time'];
    }

    /**
     * Sets queue_time
     *
     * @param string $queue_time The time the build was queued
     *
     * @return $this
     */
    public function setQueueTime($queue_time)
    {
        $this->container['queue_time'] = $queue_time;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time The time the build was started
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets finish_time
     *
     * @return string
     */
    public function getFinishTime()
    {
        return $this->container['finish_time'];
    }

    /**
     * Sets finish_time
     *
     * @param string $finish_time The time the build was finished
     *
     * @return $this
     */
    public function setFinishTime($finish_time)
    {
        $this->container['finish_time'] = $finish_time;

        return $this;
    }

    /**
     * Gets last_changed_date
     *
     * @return string
     */
    public function getLastChangedDate()
    {
        return $this->container['last_changed_date'];
    }

    /**
     * Sets last_changed_date
     *
     * @param string $last_changed_date The time the build status was last changed
     *
     * @return $this
     */
    public function setLastChangedDate($last_changed_date)
    {
        $this->container['last_changed_date'] = $last_changed_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The build status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The build result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets source_branch
     *
     * @return string
     */
    public function getSourceBranch()
    {
        return $this->container['source_branch'];
    }

    /**
     * Sets source_branch
     *
     * @param string $source_branch The source branch name
     *
     * @return $this
     */
    public function setSourceBranch($source_branch)
    {
        $this->container['source_branch'] = $source_branch;

        return $this;
    }

    /**
     * Gets source_version
     *
     * @return string
     */
    public function getSourceVersion()
    {
        return $this->container['source_version'];
    }

    /**
     * Sets source_version
     *
     * @param string $source_version The source SHA
     *
     * @return $this
     */
    public function setSourceVersion($source_version)
    {
        $this->container['source_version'] = $source_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


