<?php
/**
 * ExternalStoreResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * ExternalStoreResponse Class Doc Comment
 *
 * @category Class
 * @description ExternalStoreResponse
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExternalStoreResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExternalStoreResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'track' => 'string',
        'intune_details' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresIntuneDetails',
        'service_connection_id' => 'string',
        'created_by' => 'string',
        'created_by_principal_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'track' => null,
        'intune_details' => null,
        'service_connection_id' => null,
        'created_by' => null,
        'created_by_principal_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'track' => 'track',
        'intune_details' => 'intune_details',
        'service_connection_id' => 'service_connection_id',
        'created_by' => 'created_by',
        'created_by_principal_type' => 'created_by_principal_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'track' => 'setTrack',
        'intune_details' => 'setIntuneDetails',
        'service_connection_id' => 'setServiceConnectionId',
        'created_by' => 'setCreatedBy',
        'created_by_principal_type' => 'setCreatedByPrincipalType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'track' => 'getTrack',
        'intune_details' => 'getIntuneDetails',
        'service_connection_id' => 'getServiceConnectionId',
        'created_by' => 'getCreatedBy',
        'created_by_principal_type' => 'getCreatedByPrincipalType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRACK_PRODUCTION = 'production';
    const TRACK_ALPHA = 'alpha';
    const TRACK_BETA = 'beta';
    const TRACK_TESTFLIGHT_INTERNAL = 'testflight-internal';
    const TRACK_TESTFLIGHT_EXTERNAL = 'testflight-external';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackAllowableValues()
    {
        return [
            self::TRACK_PRODUCTION,
            self::TRACK_ALPHA,
            self::TRACK_BETA,
            self::TRACK_TESTFLIGHT_INTERNAL,
            self::TRACK_TESTFLIGHT_EXTERNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['track'] = isset($data['track']) ? $data['track'] : null;
        $this->container['intune_details'] = isset($data['intune_details']) ? $data['intune_details'] : null;
        $this->container['service_connection_id'] = isset($data['service_connection_id']) ? $data['service_connection_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_by_principal_type'] = isset($data['created_by_principal_type']) ? $data['created_by_principal_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTrackAllowableValues();
        if (!is_null($this->container['track']) && !in_array($this->container['track'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'track', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Store id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Store Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Store Type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets track
     *
     * @return string
     */
    public function getTrack()
    {
        return $this->container['track'];
    }

    /**
     * Sets track
     *
     * @param string $track Store track
     *
     * @return $this
     */
    public function setTrack($track)
    {
        $allowedValues = $this->getTrackAllowableValues();
        if (!is_null($track) && !in_array($track, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'track', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['track'] = $track;

        return $this;
    }

    /**
     * Gets intune_details
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresIntuneDetails
     */
    public function getIntuneDetails()
    {
        return $this->container['intune_details'];
    }

    /**
     * Sets intune_details
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedistributionStoresIntuneDetails $intune_details intune_details
     *
     * @return $this
     */
    public function setIntuneDetails($intune_details)
    {
        $this->container['intune_details'] = $intune_details;

        return $this;
    }

    /**
     * Gets service_connection_id
     *
     * @return string
     */
    public function getServiceConnectionId()
    {
        return $this->container['service_connection_id'];
    }

    /**
     * Sets service_connection_id
     *
     * @param string $service_connection_id Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.
     *
     * @return $this
     */
    public function setServiceConnectionId($service_connection_id)
    {
        $this->container['service_connection_id'] = $service_connection_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The ID of the principal that created the store.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_by_principal_type
     *
     * @return string
     */
    public function getCreatedByPrincipalType()
    {
        return $this->container['created_by_principal_type'];
    }

    /**
     * Sets created_by_principal_type
     *
     * @param string $created_by_principal_type The type of the principal that created the store.
     *
     * @return $this
     */
    public function setCreatedByPrincipalType($created_by_principal_type)
    {
        $this->container['created_by_principal_type'] = $created_by_principal_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


