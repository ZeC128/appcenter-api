<?php
/**
 * StepReportDeviceScreenshots
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * StepReportDeviceScreenshots Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StepReportDeviceScreenshots implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StepReport_deviceScreenshots';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'device_snapshot_id' => 'string',
        'stacktrace' => 'string[]',
        'crash_data' => 'string[]',
        'status' => 'string',
        'title' => 'string',
        'screenshot' => '\ZeC128\AppCenter\AppCenterApi\StepReportScreenshot',
        'log_file' => 'string',
        'appium_log_file' => 'string',
        'raw_crash_data' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'device_snapshot_id' => null,
        'stacktrace' => null,
        'crash_data' => null,
        'status' => null,
        'title' => null,
        'screenshot' => null,
        'log_file' => null,
        'appium_log_file' => null,
        'raw_crash_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'device_snapshot_id' => 'device_snapshot_id',
        'stacktrace' => 'stacktrace',
        'crash_data' => 'crash_data',
        'status' => 'status',
        'title' => 'title',
        'screenshot' => 'screenshot',
        'log_file' => 'log_file',
        'appium_log_file' => 'appium_log_file',
        'raw_crash_data' => 'raw_crash_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'device_snapshot_id' => 'setDeviceSnapshotId',
        'stacktrace' => 'setStacktrace',
        'crash_data' => 'setCrashData',
        'status' => 'setStatus',
        'title' => 'setTitle',
        'screenshot' => 'setScreenshot',
        'log_file' => 'setLogFile',
        'appium_log_file' => 'setAppiumLogFile',
        'raw_crash_data' => 'setRawCrashData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'device_snapshot_id' => 'getDeviceSnapshotId',
        'stacktrace' => 'getStacktrace',
        'crash_data' => 'getCrashData',
        'status' => 'getStatus',
        'title' => 'getTitle',
        'screenshot' => 'getScreenshot',
        'log_file' => 'getLogFile',
        'appium_log_file' => 'getAppiumLogFile',
        'raw_crash_data' => 'getRawCrashData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device_snapshot_id'] = isset($data['device_snapshot_id']) ? $data['device_snapshot_id'] : null;
        $this->container['stacktrace'] = isset($data['stacktrace']) ? $data['stacktrace'] : null;
        $this->container['crash_data'] = isset($data['crash_data']) ? $data['crash_data'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['screenshot'] = isset($data['screenshot']) ? $data['screenshot'] : null;
        $this->container['log_file'] = isset($data['log_file']) ? $data['log_file'] : null;
        $this->container['appium_log_file'] = isset($data['appium_log_file']) ? $data['appium_log_file'] : null;
        $this->container['raw_crash_data'] = isset($data['raw_crash_data']) ? $data['raw_crash_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device_snapshot_id
     *
     * @return string
     */
    public function getDeviceSnapshotId()
    {
        return $this->container['device_snapshot_id'];
    }

    /**
     * Sets device_snapshot_id
     *
     * @param string $device_snapshot_id device_snapshot_id
     *
     * @return $this
     */
    public function setDeviceSnapshotId($device_snapshot_id)
    {
        $this->container['device_snapshot_id'] = $device_snapshot_id;

        return $this;
    }

    /**
     * Gets stacktrace
     *
     * @return string[]
     */
    public function getStacktrace()
    {
        return $this->container['stacktrace'];
    }

    /**
     * Sets stacktrace
     *
     * @param string[] $stacktrace stacktrace
     *
     * @return $this
     */
    public function setStacktrace($stacktrace)
    {
        $this->container['stacktrace'] = $stacktrace;

        return $this;
    }

    /**
     * Gets crash_data
     *
     * @return string[]
     */
    public function getCrashData()
    {
        return $this->container['crash_data'];
    }

    /**
     * Sets crash_data
     *
     * @param string[] $crash_data crash_data
     *
     * @return $this
     */
    public function setCrashData($crash_data)
    {
        $this->container['crash_data'] = $crash_data;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets screenshot
     *
     * @return \ZeC128\AppCenter\AppCenterApi\StepReportScreenshot
     */
    public function getScreenshot()
    {
        return $this->container['screenshot'];
    }

    /**
     * Sets screenshot
     *
     * @param \ZeC128\AppCenter\AppCenterApi\StepReportScreenshot $screenshot screenshot
     *
     * @return $this
     */
    public function setScreenshot($screenshot)
    {
        $this->container['screenshot'] = $screenshot;

        return $this;
    }

    /**
     * Gets log_file
     *
     * @return string
     */
    public function getLogFile()
    {
        return $this->container['log_file'];
    }

    /**
     * Sets log_file
     *
     * @param string $log_file log_file
     *
     * @return $this
     */
    public function setLogFile($log_file)
    {
        $this->container['log_file'] = $log_file;

        return $this;
    }

    /**
     * Gets appium_log_file
     *
     * @return string
     */
    public function getAppiumLogFile()
    {
        return $this->container['appium_log_file'];
    }

    /**
     * Sets appium_log_file
     *
     * @param string $appium_log_file appium_log_file
     *
     * @return $this
     */
    public function setAppiumLogFile($appium_log_file)
    {
        $this->container['appium_log_file'] = $appium_log_file;

        return $this;
    }

    /**
     * Gets raw_crash_data
     *
     * @return string[]
     */
    public function getRawCrashData()
    {
        return $this->container['raw_crash_data'];
    }

    /**
     * Sets raw_crash_data
     *
     * @param string[] $raw_crash_data raw_crash_data
     *
     * @return $this
     */
    public function setRawCrashData($raw_crash_data)
    {
        $this->container['raw_crash_data'] = $raw_crash_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


