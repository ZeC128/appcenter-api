<?php
/**
 * AvailabilityOfDevicesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * AvailabilityOfDevicesResponse Class Doc Comment
 *
 * @category Class
 * @description The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvailabilityOfDevicesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AvailabilityOfDevicesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iphones' => '\ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones',
        'ipads' => '\ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones',
        'ipods' => '\ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones',
        'watches' => '\ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iphones' => null,
        'ipads' => null,
        'ipods' => null,
        'watches' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iphones' => 'iphones',
        'ipads' => 'ipads',
        'ipods' => 'ipods',
        'watches' => 'watches'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iphones' => 'setIphones',
        'ipads' => 'setIpads',
        'ipods' => 'setIpods',
        'watches' => 'setWatches'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iphones' => 'getIphones',
        'ipads' => 'getIpads',
        'ipods' => 'getIpods',
        'watches' => 'getWatches'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iphones'] = isset($data['iphones']) ? $data['iphones'] : null;
        $this->container['ipads'] = isset($data['ipads']) ? $data['ipads'] : null;
        $this->container['ipods'] = isset($data['ipods']) ? $data['ipods'] : null;
        $this->container['watches'] = isset($data['watches']) ? $data['watches'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iphones'] === null) {
            $invalidProperties[] = "'iphones' can't be null";
        }
        if ($this->container['ipads'] === null) {
            $invalidProperties[] = "'ipads' can't be null";
        }
        if ($this->container['ipods'] === null) {
            $invalidProperties[] = "'ipods' can't be null";
        }
        if ($this->container['watches'] === null) {
            $invalidProperties[] = "'watches' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iphones
     *
     * @return \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones
     */
    public function getIphones()
    {
        return $this->container['iphones'];
    }

    /**
     * Sets iphones
     *
     * @param \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones $iphones iphones
     *
     * @return $this
     */
    public function setIphones($iphones)
    {
        $this->container['iphones'] = $iphones;

        return $this;
    }

    /**
     * Gets ipads
     *
     * @return \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones
     */
    public function getIpads()
    {
        return $this->container['ipads'];
    }

    /**
     * Sets ipads
     *
     * @param \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones $ipads ipads
     *
     * @return $this
     */
    public function setIpads($ipads)
    {
        $this->container['ipads'] = $ipads;

        return $this;
    }

    /**
     * Gets ipods
     *
     * @return \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones
     */
    public function getIpods()
    {
        return $this->container['ipods'];
    }

    /**
     * Sets ipods
     *
     * @param \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones $ipods ipods
     *
     * @return $this
     */
    public function setIpods($ipods)
    {
        $this->container['ipods'] = $ipods;

        return $this;
    }

    /**
     * Gets watches
     *
     * @return \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones
     */
    public function getWatches()
    {
        return $this->container['watches'];
    }

    /**
     * Sets watches
     *
     * @param \ZeC128\AppCenter\AppCenterApi\AvailabilityOfDevicesResponseIphones $watches watches
     *
     * @return $this
     */
    public function setWatches($watches)
    {
        $this->container['watches'] = $watches;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


