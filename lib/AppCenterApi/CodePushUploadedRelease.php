<?php
/**
 * CodePushUploadedRelease
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * CodePushUploadedRelease Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CodePushUploadedRelease implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CodePushUploadedRelease';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'release_upload' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeploymentsdeploymentNamereleasesReleaseUpload',
        'target_binary_version' => 'string',
        'deployment_name' => 'string',
        'description' => 'string',
        'disabled' => 'bool',
        'mandatory' => 'bool',
        'no_duplicate_release_error' => 'bool',
        'rollout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'release_upload' => null,
        'target_binary_version' => null,
        'deployment_name' => null,
        'description' => null,
        'disabled' => null,
        'mandatory' => null,
        'no_duplicate_release_error' => null,
        'rollout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'release_upload' => 'release_upload',
        'target_binary_version' => 'target_binary_version',
        'deployment_name' => 'deployment_name',
        'description' => 'description',
        'disabled' => 'disabled',
        'mandatory' => 'mandatory',
        'no_duplicate_release_error' => 'no_duplicate_release_error',
        'rollout' => 'rollout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'release_upload' => 'setReleaseUpload',
        'target_binary_version' => 'setTargetBinaryVersion',
        'deployment_name' => 'setDeploymentName',
        'description' => 'setDescription',
        'disabled' => 'setDisabled',
        'mandatory' => 'setMandatory',
        'no_duplicate_release_error' => 'setNoDuplicateReleaseError',
        'rollout' => 'setRollout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'release_upload' => 'getReleaseUpload',
        'target_binary_version' => 'getTargetBinaryVersion',
        'deployment_name' => 'getDeploymentName',
        'description' => 'getDescription',
        'disabled' => 'getDisabled',
        'mandatory' => 'getMandatory',
        'no_duplicate_release_error' => 'getNoDuplicateReleaseError',
        'rollout' => 'getRollout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['release_upload'] = isset($data['release_upload']) ? $data['release_upload'] : null;
        $this->container['target_binary_version'] = isset($data['target_binary_version']) ? $data['target_binary_version'] : null;
        $this->container['deployment_name'] = isset($data['deployment_name']) ? $data['deployment_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['mandatory'] = isset($data['mandatory']) ? $data['mandatory'] : null;
        $this->container['no_duplicate_release_error'] = isset($data['no_duplicate_release_error']) ? $data['no_duplicate_release_error'] : null;
        $this->container['rollout'] = isset($data['rollout']) ? $data['rollout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['release_upload'] === null) {
            $invalidProperties[] = "'release_upload' can't be null";
        }
        if ($this->container['target_binary_version'] === null) {
            $invalidProperties[] = "'target_binary_version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets release_upload
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeploymentsdeploymentNamereleasesReleaseUpload
     */
    public function getReleaseUpload()
    {
        return $this->container['release_upload'];
    }

    /**
     * Sets release_upload
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamedeploymentsdeploymentNamereleasesReleaseUpload $release_upload release_upload
     *
     * @return $this
     */
    public function setReleaseUpload($release_upload)
    {
        $this->container['release_upload'] = $release_upload;

        return $this;
    }

    /**
     * Gets target_binary_version
     *
     * @return string
     */
    public function getTargetBinaryVersion()
    {
        return $this->container['target_binary_version'];
    }

    /**
     * Sets target_binary_version
     *
     * @param string $target_binary_version the binary version of the application
     *
     * @return $this
     */
    public function setTargetBinaryVersion($target_binary_version)
    {
        $this->container['target_binary_version'] = $target_binary_version;

        return $this;
    }

    /**
     * Gets deployment_name
     *
     * @return string
     */
    public function getDeploymentName()
    {
        return $this->container['deployment_name'];
    }

    /**
     * Sets deployment_name
     *
     * @param string $deployment_name This specifies which deployment you want to release the update to. Default is Staging.
     *
     * @return $this
     */
    public function setDeploymentName($deployment_name)
    {
        $this->container['deployment_name'] = $deployment_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description This provides an optional \"change log\" for the deployment.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled This specifies whether an update should be downloadable by end users or not.
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets mandatory
     *
     * @return bool
     */
    public function getMandatory()
    {
        return $this->container['mandatory'];
    }

    /**
     * Sets mandatory
     *
     * @param bool $mandatory This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).
     *
     * @return $this
     */
    public function setMandatory($mandatory)
    {
        $this->container['mandatory'] = $mandatory;

        return $this;
    }

    /**
     * Gets no_duplicate_release_error
     *
     * @return bool
     */
    public function getNoDuplicateReleaseError()
    {
        return $this->container['no_duplicate_release_error'];
    }

    /**
     * Sets no_duplicate_release_error
     *
     * @param bool $no_duplicate_release_error This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.
     *
     * @return $this
     */
    public function setNoDuplicateReleaseError($no_duplicate_release_error)
    {
        $this->container['no_duplicate_release_error'] = $no_duplicate_release_error;

        return $this;
    }

    /**
     * Gets rollout
     *
     * @return int
     */
    public function getRollout()
    {
        return $this->container['rollout'];
    }

    /**
     * Sets rollout
     *
     * @param int $rollout This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.
     *
     * @return $this
     */
    public function setRollout($rollout)
    {
        $this->container['rollout'] = $rollout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


