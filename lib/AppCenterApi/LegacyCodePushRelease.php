<?php
/**
 * LegacyCodePushRelease
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * LegacyCodePushRelease Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyCodePushRelease implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegacyCodePushRelease';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_version' => 'string',
        'is_disabled' => 'bool',
        'is_mandatory' => 'bool',
        'rollout' => 'int',
        'blob_url' => 'string',
        'size' => 'int',
        'release_method' => 'string',
        'upload_time' => 'int',
        'label' => 'string',
        'released_by_user_id' => 'string',
        'manifest_blob_url' => 'string',
        'diff_package_map' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_version' => null,
        'is_disabled' => null,
        'is_mandatory' => null,
        'rollout' => null,
        'blob_url' => null,
        'size' => null,
        'release_method' => null,
        'upload_time' => null,
        'label' => null,
        'released_by_user_id' => null,
        'manifest_blob_url' => null,
        'diff_package_map' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_version' => 'appVersion',
        'is_disabled' => 'isDisabled',
        'is_mandatory' => 'isMandatory',
        'rollout' => 'rollout',
        'blob_url' => 'blobUrl',
        'size' => 'size',
        'release_method' => 'releaseMethod',
        'upload_time' => 'uploadTime',
        'label' => 'label',
        'released_by_user_id' => 'releasedByUserId',
        'manifest_blob_url' => 'manifestBlobUrl',
        'diff_package_map' => 'diffPackageMap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_version' => 'setAppVersion',
        'is_disabled' => 'setIsDisabled',
        'is_mandatory' => 'setIsMandatory',
        'rollout' => 'setRollout',
        'blob_url' => 'setBlobUrl',
        'size' => 'setSize',
        'release_method' => 'setReleaseMethod',
        'upload_time' => 'setUploadTime',
        'label' => 'setLabel',
        'released_by_user_id' => 'setReleasedByUserId',
        'manifest_blob_url' => 'setManifestBlobUrl',
        'diff_package_map' => 'setDiffPackageMap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_version' => 'getAppVersion',
        'is_disabled' => 'getIsDisabled',
        'is_mandatory' => 'getIsMandatory',
        'rollout' => 'getRollout',
        'blob_url' => 'getBlobUrl',
        'size' => 'getSize',
        'release_method' => 'getReleaseMethod',
        'upload_time' => 'getUploadTime',
        'label' => 'getLabel',
        'released_by_user_id' => 'getReleasedByUserId',
        'manifest_blob_url' => 'getManifestBlobUrl',
        'diff_package_map' => 'getDiffPackageMap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_version'] = isset($data['app_version']) ? $data['app_version'] : null;
        $this->container['is_disabled'] = isset($data['is_disabled']) ? $data['is_disabled'] : null;
        $this->container['is_mandatory'] = isset($data['is_mandatory']) ? $data['is_mandatory'] : null;
        $this->container['rollout'] = isset($data['rollout']) ? $data['rollout'] : null;
        $this->container['blob_url'] = isset($data['blob_url']) ? $data['blob_url'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['release_method'] = isset($data['release_method']) ? $data['release_method'] : null;
        $this->container['upload_time'] = isset($data['upload_time']) ? $data['upload_time'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['released_by_user_id'] = isset($data['released_by_user_id']) ? $data['released_by_user_id'] : null;
        $this->container['manifest_blob_url'] = isset($data['manifest_blob_url']) ? $data['manifest_blob_url'] : null;
        $this->container['diff_package_map'] = isset($data['diff_package_map']) ? $data['diff_package_map'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_version
     *
     * @return string
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     *
     * @param string $app_version The version of the release
     *
     * @return $this
     */
    public function setAppVersion($app_version)
    {
        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool $is_disabled Flag used to determine if release is disabled
     *
     * @return $this
     */
    public function setIsDisabled($is_disabled)
    {
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets is_mandatory
     *
     * @return bool
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory
     *
     * @param bool $is_mandatory Flag used to determine if release is mandatory
     *
     * @return $this
     */
    public function setIsMandatory($is_mandatory)
    {
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets rollout
     *
     * @return int
     */
    public function getRollout()
    {
        return $this->container['rollout'];
    }

    /**
     * Sets rollout
     *
     * @param int $rollout Percentage (out of 100) that release is deployed to
     *
     * @return $this
     */
    public function setRollout($rollout)
    {
        $this->container['rollout'] = $rollout;

        return $this;
    }

    /**
     * Gets blob_url
     *
     * @return string
     */
    public function getBlobUrl()
    {
        return $this->container['blob_url'];
    }

    /**
     * Sets blob_url
     *
     * @param string $blob_url Location (URL) of release package
     *
     * @return $this
     */
    public function setBlobUrl($blob_url)
    {
        $this->container['blob_url'] = $blob_url;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Size of release package
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets release_method
     *
     * @return string
     */
    public function getReleaseMethod()
    {
        return $this->container['release_method'];
    }

    /**
     * Sets release_method
     *
     * @param string $release_method Method used to deploy release
     *
     * @return $this
     */
    public function setReleaseMethod($release_method)
    {
        $this->container['release_method'] = $release_method;

        return $this;
    }

    /**
     * Gets upload_time
     *
     * @return int
     */
    public function getUploadTime()
    {
        return $this->container['upload_time'];
    }

    /**
     * Sets upload_time
     *
     * @param int $upload_time Release upload time as epoch Unix timestamp
     *
     * @return $this
     */
    public function setUploadTime($upload_time)
    {
        $this->container['upload_time'] = $upload_time;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Release label (aka release name)
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets released_by_user_id
     *
     * @return string
     */
    public function getReleasedByUserId()
    {
        return $this->container['released_by_user_id'];
    }

    /**
     * Sets released_by_user_id
     *
     * @param string $released_by_user_id User ID that triggered most recent release
     *
     * @return $this
     */
    public function setReleasedByUserId($released_by_user_id)
    {
        $this->container['released_by_user_id'] = $released_by_user_id;

        return $this;
    }

    /**
     * Gets manifest_blob_url
     *
     * @return string
     */
    public function getManifestBlobUrl()
    {
        return $this->container['manifest_blob_url'];
    }

    /**
     * Sets manifest_blob_url
     *
     * @param string $manifest_blob_url The URL location of the package's manifest file.
     *
     * @return $this
     */
    public function setManifestBlobUrl($manifest_blob_url)
    {
        $this->container['manifest_blob_url'] = $manifest_blob_url;

        return $this;
    }

    /**
     * Gets diff_package_map
     *
     * @return object
     */
    public function getDiffPackageMap()
    {
        return $this->container['diff_package_map'];
    }

    /**
     * Sets diff_package_map
     *
     * @param object $diff_package_map Object containing URL and size of changed package hashes contained in the release
     *
     * @return $this
     */
    public function setDiffPackageMap($diff_package_map)
    {
        $this->container['diff_package_map'] = $diff_package_map;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


