<?php
/**
 * V01appsownerNameappNamebranchesbranchconfigToolsetsXcode
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * V01appsownerNameappNamebranchesbranchconfigToolsetsXcode Class Doc Comment
 *
 * @category Class
 * @description Build configuration when Xcode is part of the build steps
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V01appsownerNameappNamebranchesbranchconfigToolsetsXcode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v0.1appsowner_nameapp_namebranchesbranchconfig_toolsets_xcode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project_or_workspace_path' => 'string',
        'podfile_path' => 'string',
        'cartfile_path' => 'string',
        'provisioning_profile_encoded' => 'string',
        'certificate_encoded' => 'string',
        'provisioning_profile_file_id' => 'string',
        'certificate_file_id' => 'string',
        'provisioning_profile_upload_id' => 'string',
        'app_extension_provisioning_profile_files' => '\ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles[]',
        'certificate_upload_id' => 'string',
        'certificate_password' => 'string',
        'scheme' => 'string',
        'xcode_version' => 'string',
        'provisioning_profile_filename' => 'string',
        'certificate_filename' => 'string',
        'team_id' => 'string',
        'automatic_signing' => 'bool',
        'xcode_project_sha' => 'string',
        'archive_configuration' => 'string',
        'target_to_archive' => 'string',
        'force_legacy_build_system' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project_or_workspace_path' => null,
        'podfile_path' => null,
        'cartfile_path' => null,
        'provisioning_profile_encoded' => null,
        'certificate_encoded' => null,
        'provisioning_profile_file_id' => null,
        'certificate_file_id' => null,
        'provisioning_profile_upload_id' => null,
        'app_extension_provisioning_profile_files' => null,
        'certificate_upload_id' => null,
        'certificate_password' => null,
        'scheme' => null,
        'xcode_version' => null,
        'provisioning_profile_filename' => null,
        'certificate_filename' => null,
        'team_id' => null,
        'automatic_signing' => null,
        'xcode_project_sha' => null,
        'archive_configuration' => null,
        'target_to_archive' => null,
        'force_legacy_build_system' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_or_workspace_path' => 'projectOrWorkspacePath',
        'podfile_path' => 'podfilePath',
        'cartfile_path' => 'cartfilePath',
        'provisioning_profile_encoded' => 'provisioningProfileEncoded',
        'certificate_encoded' => 'certificateEncoded',
        'provisioning_profile_file_id' => 'provisioningProfileFileId',
        'certificate_file_id' => 'certificateFileId',
        'provisioning_profile_upload_id' => 'provisioningProfileUploadId',
        'app_extension_provisioning_profile_files' => 'appExtensionProvisioningProfileFiles',
        'certificate_upload_id' => 'certificateUploadId',
        'certificate_password' => 'certificatePassword',
        'scheme' => 'scheme',
        'xcode_version' => 'xcodeVersion',
        'provisioning_profile_filename' => 'provisioningProfileFilename',
        'certificate_filename' => 'certificateFilename',
        'team_id' => 'teamId',
        'automatic_signing' => 'automaticSigning',
        'xcode_project_sha' => 'xcodeProjectSha',
        'archive_configuration' => 'archiveConfiguration',
        'target_to_archive' => 'targetToArchive',
        'force_legacy_build_system' => 'forceLegacyBuildSystem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_or_workspace_path' => 'setProjectOrWorkspacePath',
        'podfile_path' => 'setPodfilePath',
        'cartfile_path' => 'setCartfilePath',
        'provisioning_profile_encoded' => 'setProvisioningProfileEncoded',
        'certificate_encoded' => 'setCertificateEncoded',
        'provisioning_profile_file_id' => 'setProvisioningProfileFileId',
        'certificate_file_id' => 'setCertificateFileId',
        'provisioning_profile_upload_id' => 'setProvisioningProfileUploadId',
        'app_extension_provisioning_profile_files' => 'setAppExtensionProvisioningProfileFiles',
        'certificate_upload_id' => 'setCertificateUploadId',
        'certificate_password' => 'setCertificatePassword',
        'scheme' => 'setScheme',
        'xcode_version' => 'setXcodeVersion',
        'provisioning_profile_filename' => 'setProvisioningProfileFilename',
        'certificate_filename' => 'setCertificateFilename',
        'team_id' => 'setTeamId',
        'automatic_signing' => 'setAutomaticSigning',
        'xcode_project_sha' => 'setXcodeProjectSha',
        'archive_configuration' => 'setArchiveConfiguration',
        'target_to_archive' => 'setTargetToArchive',
        'force_legacy_build_system' => 'setForceLegacyBuildSystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_or_workspace_path' => 'getProjectOrWorkspacePath',
        'podfile_path' => 'getPodfilePath',
        'cartfile_path' => 'getCartfilePath',
        'provisioning_profile_encoded' => 'getProvisioningProfileEncoded',
        'certificate_encoded' => 'getCertificateEncoded',
        'provisioning_profile_file_id' => 'getProvisioningProfileFileId',
        'certificate_file_id' => 'getCertificateFileId',
        'provisioning_profile_upload_id' => 'getProvisioningProfileUploadId',
        'app_extension_provisioning_profile_files' => 'getAppExtensionProvisioningProfileFiles',
        'certificate_upload_id' => 'getCertificateUploadId',
        'certificate_password' => 'getCertificatePassword',
        'scheme' => 'getScheme',
        'xcode_version' => 'getXcodeVersion',
        'provisioning_profile_filename' => 'getProvisioningProfileFilename',
        'certificate_filename' => 'getCertificateFilename',
        'team_id' => 'getTeamId',
        'automatic_signing' => 'getAutomaticSigning',
        'xcode_project_sha' => 'getXcodeProjectSha',
        'archive_configuration' => 'getArchiveConfiguration',
        'target_to_archive' => 'getTargetToArchive',
        'force_legacy_build_system' => 'getForceLegacyBuildSystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project_or_workspace_path'] = isset($data['project_or_workspace_path']) ? $data['project_or_workspace_path'] : null;
        $this->container['podfile_path'] = isset($data['podfile_path']) ? $data['podfile_path'] : null;
        $this->container['cartfile_path'] = isset($data['cartfile_path']) ? $data['cartfile_path'] : null;
        $this->container['provisioning_profile_encoded'] = isset($data['provisioning_profile_encoded']) ? $data['provisioning_profile_encoded'] : null;
        $this->container['certificate_encoded'] = isset($data['certificate_encoded']) ? $data['certificate_encoded'] : null;
        $this->container['provisioning_profile_file_id'] = isset($data['provisioning_profile_file_id']) ? $data['provisioning_profile_file_id'] : null;
        $this->container['certificate_file_id'] = isset($data['certificate_file_id']) ? $data['certificate_file_id'] : null;
        $this->container['provisioning_profile_upload_id'] = isset($data['provisioning_profile_upload_id']) ? $data['provisioning_profile_upload_id'] : null;
        $this->container['app_extension_provisioning_profile_files'] = isset($data['app_extension_provisioning_profile_files']) ? $data['app_extension_provisioning_profile_files'] : null;
        $this->container['certificate_upload_id'] = isset($data['certificate_upload_id']) ? $data['certificate_upload_id'] : null;
        $this->container['certificate_password'] = isset($data['certificate_password']) ? $data['certificate_password'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['xcode_version'] = isset($data['xcode_version']) ? $data['xcode_version'] : null;
        $this->container['provisioning_profile_filename'] = isset($data['provisioning_profile_filename']) ? $data['provisioning_profile_filename'] : null;
        $this->container['certificate_filename'] = isset($data['certificate_filename']) ? $data['certificate_filename'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['automatic_signing'] = isset($data['automatic_signing']) ? $data['automatic_signing'] : null;
        $this->container['xcode_project_sha'] = isset($data['xcode_project_sha']) ? $data['xcode_project_sha'] : null;
        $this->container['archive_configuration'] = isset($data['archive_configuration']) ? $data['archive_configuration'] : null;
        $this->container['target_to_archive'] = isset($data['target_to_archive']) ? $data['target_to_archive'] : null;
        $this->container['force_legacy_build_system'] = isset($data['force_legacy_build_system']) ? $data['force_legacy_build_system'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_or_workspace_path
     *
     * @return string
     */
    public function getProjectOrWorkspacePath()
    {
        return $this->container['project_or_workspace_path'];
    }

    /**
     * Sets project_or_workspace_path
     *
     * @param string $project_or_workspace_path Xcode project/workspace path
     *
     * @return $this
     */
    public function setProjectOrWorkspacePath($project_or_workspace_path)
    {
        $this->container['project_or_workspace_path'] = $project_or_workspace_path;

        return $this;
    }

    /**
     * Gets podfile_path
     *
     * @return string
     */
    public function getPodfilePath()
    {
        return $this->container['podfile_path'];
    }

    /**
     * Sets podfile_path
     *
     * @param string $podfile_path Path to CococaPods file, if present
     *
     * @return $this
     */
    public function setPodfilePath($podfile_path)
    {
        $this->container['podfile_path'] = $podfile_path;

        return $this;
    }

    /**
     * Gets cartfile_path
     *
     * @return string
     */
    public function getCartfilePath()
    {
        return $this->container['cartfile_path'];
    }

    /**
     * Sets cartfile_path
     *
     * @param string $cartfile_path Path to Carthage file, if present
     *
     * @return $this
     */
    public function setCartfilePath($cartfile_path)
    {
        $this->container['cartfile_path'] = $cartfile_path;

        return $this;
    }

    /**
     * Gets provisioning_profile_encoded
     *
     * @return string
     */
    public function getProvisioningProfileEncoded()
    {
        return $this->container['provisioning_profile_encoded'];
    }

    /**
     * Sets provisioning_profile_encoded
     *
     * @param string $provisioning_profile_encoded provisioning_profile_encoded
     *
     * @return $this
     */
    public function setProvisioningProfileEncoded($provisioning_profile_encoded)
    {
        $this->container['provisioning_profile_encoded'] = $provisioning_profile_encoded;

        return $this;
    }

    /**
     * Gets certificate_encoded
     *
     * @return string
     */
    public function getCertificateEncoded()
    {
        return $this->container['certificate_encoded'];
    }

    /**
     * Sets certificate_encoded
     *
     * @param string $certificate_encoded certificate_encoded
     *
     * @return $this
     */
    public function setCertificateEncoded($certificate_encoded)
    {
        $this->container['certificate_encoded'] = $certificate_encoded;

        return $this;
    }

    /**
     * Gets provisioning_profile_file_id
     *
     * @return string
     */
    public function getProvisioningProfileFileId()
    {
        return $this->container['provisioning_profile_file_id'];
    }

    /**
     * Sets provisioning_profile_file_id
     *
     * @param string $provisioning_profile_file_id provisioning_profile_file_id
     *
     * @return $this
     */
    public function setProvisioningProfileFileId($provisioning_profile_file_id)
    {
        $this->container['provisioning_profile_file_id'] = $provisioning_profile_file_id;

        return $this;
    }

    /**
     * Gets certificate_file_id
     *
     * @return string
     */
    public function getCertificateFileId()
    {
        return $this->container['certificate_file_id'];
    }

    /**
     * Sets certificate_file_id
     *
     * @param string $certificate_file_id certificate_file_id
     *
     * @return $this
     */
    public function setCertificateFileId($certificate_file_id)
    {
        $this->container['certificate_file_id'] = $certificate_file_id;

        return $this;
    }

    /**
     * Gets provisioning_profile_upload_id
     *
     * @return string
     */
    public function getProvisioningProfileUploadId()
    {
        return $this->container['provisioning_profile_upload_id'];
    }

    /**
     * Sets provisioning_profile_upload_id
     *
     * @param string $provisioning_profile_upload_id provisioning_profile_upload_id
     *
     * @return $this
     */
    public function setProvisioningProfileUploadId($provisioning_profile_upload_id)
    {
        $this->container['provisioning_profile_upload_id'] = $provisioning_profile_upload_id;

        return $this;
    }

    /**
     * Gets app_extension_provisioning_profile_files
     *
     * @return \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles[]
     */
    public function getAppExtensionProvisioningProfileFiles()
    {
        return $this->container['app_extension_provisioning_profile_files'];
    }

    /**
     * Sets app_extension_provisioning_profile_files
     *
     * @param \ZeC128\AppCenter\AppCenterApi\V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles[] $app_extension_provisioning_profile_files app_extension_provisioning_profile_files
     *
     * @return $this
     */
    public function setAppExtensionProvisioningProfileFiles($app_extension_provisioning_profile_files)
    {
        $this->container['app_extension_provisioning_profile_files'] = $app_extension_provisioning_profile_files;

        return $this;
    }

    /**
     * Gets certificate_upload_id
     *
     * @return string
     */
    public function getCertificateUploadId()
    {
        return $this->container['certificate_upload_id'];
    }

    /**
     * Sets certificate_upload_id
     *
     * @param string $certificate_upload_id certificate_upload_id
     *
     * @return $this
     */
    public function setCertificateUploadId($certificate_upload_id)
    {
        $this->container['certificate_upload_id'] = $certificate_upload_id;

        return $this;
    }

    /**
     * Gets certificate_password
     *
     * @return string
     */
    public function getCertificatePassword()
    {
        return $this->container['certificate_password'];
    }

    /**
     * Sets certificate_password
     *
     * @param string $certificate_password certificate_password
     *
     * @return $this
     */
    public function setCertificatePassword($certificate_password)
    {
        $this->container['certificate_password'] = $certificate_password;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string $scheme scheme
     *
     * @return $this
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets xcode_version
     *
     * @return string
     */
    public function getXcodeVersion()
    {
        return $this->container['xcode_version'];
    }

    /**
     * Sets xcode_version
     *
     * @param string $xcode_version Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.
     *
     * @return $this
     */
    public function setXcodeVersion($xcode_version)
    {
        $this->container['xcode_version'] = $xcode_version;

        return $this;
    }

    /**
     * Gets provisioning_profile_filename
     *
     * @return string
     */
    public function getProvisioningProfileFilename()
    {
        return $this->container['provisioning_profile_filename'];
    }

    /**
     * Sets provisioning_profile_filename
     *
     * @param string $provisioning_profile_filename provisioning_profile_filename
     *
     * @return $this
     */
    public function setProvisioningProfileFilename($provisioning_profile_filename)
    {
        $this->container['provisioning_profile_filename'] = $provisioning_profile_filename;

        return $this;
    }

    /**
     * Gets certificate_filename
     *
     * @return string
     */
    public function getCertificateFilename()
    {
        return $this->container['certificate_filename'];
    }

    /**
     * Sets certificate_filename
     *
     * @param string $certificate_filename certificate_filename
     *
     * @return $this
     */
    public function setCertificateFilename($certificate_filename)
    {
        $this->container['certificate_filename'] = $certificate_filename;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets automatic_signing
     *
     * @return bool
     */
    public function getAutomaticSigning()
    {
        return $this->container['automatic_signing'];
    }

    /**
     * Sets automatic_signing
     *
     * @param bool $automatic_signing automatic_signing
     *
     * @return $this
     */
    public function setAutomaticSigning($automatic_signing)
    {
        $this->container['automatic_signing'] = $automatic_signing;

        return $this;
    }

    /**
     * Gets xcode_project_sha
     *
     * @return string
     */
    public function getXcodeProjectSha()
    {
        return $this->container['xcode_project_sha'];
    }

    /**
     * Sets xcode_project_sha
     *
     * @param string $xcode_project_sha The selected pbxproject hash to the repositroy
     *
     * @return $this
     */
    public function setXcodeProjectSha($xcode_project_sha)
    {
        $this->container['xcode_project_sha'] = $xcode_project_sha;

        return $this;
    }

    /**
     * Gets archive_configuration
     *
     * @return string
     */
    public function getArchiveConfiguration()
    {
        return $this->container['archive_configuration'];
    }

    /**
     * Sets archive_configuration
     *
     * @param string $archive_configuration The build configuration of the target to archive
     *
     * @return $this
     */
    public function setArchiveConfiguration($archive_configuration)
    {
        $this->container['archive_configuration'] = $archive_configuration;

        return $this;
    }

    /**
     * Gets target_to_archive
     *
     * @return string
     */
    public function getTargetToArchive()
    {
        return $this->container['target_to_archive'];
    }

    /**
     * Sets target_to_archive
     *
     * @param string $target_to_archive The target id of the selected scheme to archive
     *
     * @return $this
     */
    public function setTargetToArchive($target_to_archive)
    {
        $this->container['target_to_archive'] = $target_to_archive;

        return $this;
    }

    /**
     * Gets force_legacy_build_system
     *
     * @return bool
     */
    public function getForceLegacyBuildSystem()
    {
        return $this->container['force_legacy_build_system'];
    }

    /**
     * Sets force_legacy_build_system
     *
     * @param bool $force_legacy_build_system Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used. By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
     *
     * @return $this
     */
    public function setForceLegacyBuildSystem($force_legacy_build_system)
    {
        $this->container['force_legacy_build_system'] = $force_legacy_build_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


