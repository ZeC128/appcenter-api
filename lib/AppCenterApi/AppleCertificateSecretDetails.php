<?php
/**
 * AppleCertificateSecretDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * AppleCertificateSecretDetails Class Doc Comment
 *
 * @category Class
 * @description Apple Certificate Secret Details
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppleCertificateSecretDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppleCertificateSecretDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base64_certificate' => 'string',
        'password' => 'string',
        'display_name' => 'string',
        'certificate_validity_start_date' => 'string',
        'certificate_validity_end_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base64_certificate' => null,
        'password' => null,
        'display_name' => null,
        'certificate_validity_start_date' => null,
        'certificate_validity_end_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base64_certificate' => 'base64Certificate',
        'password' => 'password',
        'display_name' => 'displayName',
        'certificate_validity_start_date' => 'certificateValidityStartDate',
        'certificate_validity_end_date' => 'certificateValidityEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base64_certificate' => 'setBase64Certificate',
        'password' => 'setPassword',
        'display_name' => 'setDisplayName',
        'certificate_validity_start_date' => 'setCertificateValidityStartDate',
        'certificate_validity_end_date' => 'setCertificateValidityEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base64_certificate' => 'getBase64Certificate',
        'password' => 'getPassword',
        'display_name' => 'getDisplayName',
        'certificate_validity_start_date' => 'getCertificateValidityStartDate',
        'certificate_validity_end_date' => 'getCertificateValidityEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base64_certificate'] = isset($data['base64_certificate']) ? $data['base64_certificate'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['certificate_validity_start_date'] = isset($data['certificate_validity_start_date']) ? $data['certificate_validity_start_date'] : null;
        $this->container['certificate_validity_end_date'] = isset($data['certificate_validity_end_date']) ? $data['certificate_validity_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base64_certificate'] === null) {
            $invalidProperties[] = "'base64_certificate' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['certificate_validity_start_date'] === null) {
            $invalidProperties[] = "'certificate_validity_start_date' can't be null";
        }
        if ($this->container['certificate_validity_end_date'] === null) {
            $invalidProperties[] = "'certificate_validity_end_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base64_certificate
     *
     * @return string
     */
    public function getBase64Certificate()
    {
        return $this->container['base64_certificate'];
    }

    /**
     * Sets base64_certificate
     *
     * @param string $base64_certificate The certificate contents in base 64 encoded string
     *
     * @return $this
     */
    public function setBase64Certificate($base64_certificate)
    {
        $this->container['base64_certificate'] = $base64_certificate;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password for the certificate
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The display name (CN) of the certificate
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets certificate_validity_start_date
     *
     * @return string
     */
    public function getCertificateValidityStartDate()
    {
        return $this->container['certificate_validity_start_date'];
    }

    /**
     * Sets certificate_validity_start_date
     *
     * @param string $certificate_validity_start_date The date-time from which the certificate is valid
     *
     * @return $this
     */
    public function setCertificateValidityStartDate($certificate_validity_start_date)
    {
        $this->container['certificate_validity_start_date'] = $certificate_validity_start_date;

        return $this;
    }

    /**
     * Gets certificate_validity_end_date
     *
     * @return string
     */
    public function getCertificateValidityEndDate()
    {
        return $this->container['certificate_validity_end_date'];
    }

    /**
     * Sets certificate_validity_end_date
     *
     * @param string $certificate_validity_end_date The date-time till which the certificate is valid
     *
     * @return $this
     */
    public function setCertificateValidityEndDate($certificate_validity_end_date)
    {
        $this->container['certificate_validity_end_date'] = $certificate_validity_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


