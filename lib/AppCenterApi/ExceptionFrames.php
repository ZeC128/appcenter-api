<?php
/**
 * ExceptionFrames
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\AppCenterApi;

use \ArrayAccess;
use \ZeC128\AppCenter\ObjectSerializer;

/**
 * ExceptionFrames Class Doc Comment
 *
 * @category Class
 * @description a single frame of a stack trace
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExceptionFrames implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Exception_frames';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'class_name' => 'string',
        'method' => 'string',
        'class_method' => 'bool',
        'file' => 'string',
        'line' => 'int',
        'app_code' => 'bool',
        'framework_name' => 'string',
        'code_raw' => 'string',
        'code_formatted' => 'string',
        'language' => 'string',
        'relevant' => 'bool',
        'method_params' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'class_name' => null,
        'method' => null,
        'class_method' => null,
        'file' => null,
        'line' => null,
        'app_code' => null,
        'framework_name' => null,
        'code_raw' => null,
        'code_formatted' => null,
        'language' => null,
        'relevant' => null,
        'method_params' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'class_name' => 'class_name',
        'method' => 'method',
        'class_method' => 'class_method',
        'file' => 'file',
        'line' => 'line',
        'app_code' => 'app_code',
        'framework_name' => 'framework_name',
        'code_raw' => 'code_raw',
        'code_formatted' => 'code_formatted',
        'language' => 'language',
        'relevant' => 'relevant',
        'method_params' => 'method_params'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'class_name' => 'setClassName',
        'method' => 'setMethod',
        'class_method' => 'setClassMethod',
        'file' => 'setFile',
        'line' => 'setLine',
        'app_code' => 'setAppCode',
        'framework_name' => 'setFrameworkName',
        'code_raw' => 'setCodeRaw',
        'code_formatted' => 'setCodeFormatted',
        'language' => 'setLanguage',
        'relevant' => 'setRelevant',
        'method_params' => 'setMethodParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'class_name' => 'getClassName',
        'method' => 'getMethod',
        'class_method' => 'getClassMethod',
        'file' => 'getFile',
        'line' => 'getLine',
        'app_code' => 'getAppCode',
        'framework_name' => 'getFrameworkName',
        'code_raw' => 'getCodeRaw',
        'code_formatted' => 'getCodeFormatted',
        'language' => 'getLanguage',
        'relevant' => 'getRelevant',
        'method_params' => 'getMethodParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_JAVA_SCRIPT = 'JavaScript';
    const LANGUAGE_C_SHARP = 'CSharp';
    const LANGUAGE_OBJECTIVE_C = 'Objective-C';
    const LANGUAGE_OBJECTIVE_CPP = 'Objective-Cpp';
    const LANGUAGE_CPP = 'Cpp';
    const LANGUAGE_C = 'C';
    const LANGUAGE_SWIFT = 'Swift';
    const LANGUAGE_JAVA = 'Java';
    const LANGUAGE_UNKNOWN = 'Unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_JAVA_SCRIPT,
            self::LANGUAGE_C_SHARP,
            self::LANGUAGE_OBJECTIVE_C,
            self::LANGUAGE_OBJECTIVE_CPP,
            self::LANGUAGE_CPP,
            self::LANGUAGE_C,
            self::LANGUAGE_SWIFT,
            self::LANGUAGE_JAVA,
            self::LANGUAGE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['class_name'] = isset($data['class_name']) ? $data['class_name'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['class_method'] = isset($data['class_method']) ? $data['class_method'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['line'] = isset($data['line']) ? $data['line'] : null;
        $this->container['app_code'] = isset($data['app_code']) ? $data['app_code'] : null;
        $this->container['framework_name'] = isset($data['framework_name']) ? $data['framework_name'] : null;
        $this->container['code_raw'] = isset($data['code_raw']) ? $data['code_raw'] : null;
        $this->container['code_formatted'] = isset($data['code_formatted']) ? $data['code_formatted'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['relevant'] = isset($data['relevant']) ? $data['relevant'] : null;
        $this->container['method_params'] = isset($data['method_params']) ? $data['method_params'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_code'] === null) {
            $invalidProperties[] = "'app_code' can't be null";
        }
        if ($this->container['code_raw'] === null) {
            $invalidProperties[] = "'code_raw' can't be null";
        }
        if ($this->container['code_formatted'] === null) {
            $invalidProperties[] = "'code_formatted' can't be null";
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address of the frame
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name name of the class
     *
     * @return $this
     */
    public function setClassName($class_name)
    {
        $this->container['class_name'] = $class_name;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method name of the method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets class_method
     *
     * @return bool
     */
    public function getClassMethod()
    {
        return $this->container['class_method'];
    }

    /**
     * Sets class_method
     *
     * @param bool $class_method is a class method
     *
     * @return $this
     */
    public function setClassMethod($class_method)
    {
        $this->container['class_method'] = $class_method;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file name of the file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets line
     *
     * @return int
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param int $line line number
     *
     * @return $this
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets app_code
     *
     * @return bool
     */
    public function getAppCode()
    {
        return $this->container['app_code'];
    }

    /**
     * Sets app_code
     *
     * @param bool $app_code this line isn't from any framework
     *
     * @return $this
     */
    public function setAppCode($app_code)
    {
        $this->container['app_code'] = $app_code;

        return $this;
    }

    /**
     * Gets framework_name
     *
     * @return string
     */
    public function getFrameworkName()
    {
        return $this->container['framework_name'];
    }

    /**
     * Sets framework_name
     *
     * @param string $framework_name Name of the framework
     *
     * @return $this
     */
    public function setFrameworkName($framework_name)
    {
        $this->container['framework_name'] = $framework_name;

        return $this;
    }

    /**
     * Gets code_raw
     *
     * @return string
     */
    public function getCodeRaw()
    {
        return $this->container['code_raw'];
    }

    /**
     * Sets code_raw
     *
     * @param string $code_raw Raw frame string
     *
     * @return $this
     */
    public function setCodeRaw($code_raw)
    {
        $this->container['code_raw'] = $code_raw;

        return $this;
    }

    /**
     * Gets code_formatted
     *
     * @return string
     */
    public function getCodeFormatted()
    {
        return $this->container['code_formatted'];
    }

    /**
     * Sets code_formatted
     *
     * @param string $code_formatted Formatted frame string
     *
     * @return $this
     */
    public function setCodeFormatted($code_formatted)
    {
        $this->container['code_formatted'] = $code_formatted;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language programming language of the frame
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets relevant
     *
     * @return bool
     */
    public function getRelevant()
    {
        return $this->container['relevant'];
    }

    /**
     * Sets relevant
     *
     * @param bool $relevant frame should be shown always
     *
     * @return $this
     */
    public function setRelevant($relevant)
    {
        $this->container['relevant'] = $relevant;

        return $this;
    }

    /**
     * Gets method_params
     *
     * @return string
     */
    public function getMethodParams()
    {
        return $this->container['method_params'];
    }

    /**
     * Sets method_params
     *
     * @param string $method_params parameters of the frames method
     *
     * @return $this
     */
    public function setMethodParams($method_params)
    {
        $this->container['method_params'] = $method_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


