<?php
/**
 * ErrorsApi
 * PHP version 5
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZeC128\AppCenter\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZeC128\AppCenter\ApiException;
use ZeC128\AppCenter\Configuration;
use ZeC128\AppCenter\HeaderSelector;
use ZeC128\AppCenter\ObjectSerializer;

/**
 * ErrorsApi Class Doc Comment
 *
 * @category Class
 * @package  ZeC128\AppCenter
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation errorsAppBuildsList
     *
     * @param  string $version version (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20058
     */
    public function errorsAppBuildsList($version, $start, $owner_name, $app_name, $end = null, $top = '30', $error_type = null)
    {
        list($response) = $this->errorsAppBuildsListWithHttpInfo($version, $start, $owner_name, $app_name, $end, $top, $error_type);
        return $response;
    }

    /**
     * Operation errorsAppBuildsListWithHttpInfo
     *
     * @param  string $version (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20058, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsAppBuildsListWithHttpInfo($version, $start, $owner_name, $app_name, $end = null, $top = '30', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20058';
        $request = $this->errorsAppBuildsListRequest($version, $start, $owner_name, $app_name, $end, $top, $error_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20058',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsAppBuildsListAsync
     *
     * 
     *
     * @param  string $version (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsAppBuildsListAsync($version, $start, $owner_name, $app_name, $end = null, $top = '30', $error_type = null)
    {
        return $this->errorsAppBuildsListAsyncWithHttpInfo($version, $start, $owner_name, $app_name, $end, $top, $error_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsAppBuildsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $version (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsAppBuildsListAsyncWithHttpInfo($version, $start, $owner_name, $app_name, $end = null, $top = '30', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20058';
        $request = $this->errorsAppBuildsListRequest($version, $start, $owner_name, $app_name, $end, $top, $error_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsAppBuildsList'
     *
     * @param  string $version (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsAppBuildsListRequest($version, $start, $owner_name, $app_name, $end = null, $top = '30', $error_type = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling errorsAppBuildsList'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsAppBuildsList'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsAppBuildsList'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsAppBuildsList'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsAppBuildsList, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsAppBuildsList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($error_type !== null) {
            $queryParams['errorType'] = ObjectSerializer::toQueryValue($error_type);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsAvailableVersions
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param  string $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param  string $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20057
     */
    public function errorsAvailableVersions($start, $owner_name, $app_name, $end = null, $top = '30', $skip = '0', $filter = null, $inlinecount = 'none', $error_type = null)
    {
        list($response) = $this->errorsAvailableVersionsWithHttpInfo($start, $owner_name, $app_name, $end, $top, $skip, $filter, $inlinecount, $error_type);
        return $response;
    }

    /**
     * Operation errorsAvailableVersionsWithHttpInfo
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param  string $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param  string $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20057, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsAvailableVersionsWithHttpInfo($start, $owner_name, $app_name, $end = null, $top = '30', $skip = '0', $filter = null, $inlinecount = 'none', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20057';
        $request = $this->errorsAvailableVersionsRequest($start, $owner_name, $app_name, $end, $top, $skip, $filter, $inlinecount, $error_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20057',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsAvailableVersionsAsync
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param  string $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param  string $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsAvailableVersionsAsync($start, $owner_name, $app_name, $end = null, $top = '30', $skip = '0', $filter = null, $inlinecount = 'none', $error_type = null)
    {
        return $this->errorsAvailableVersionsAsyncWithHttpInfo($start, $owner_name, $app_name, $end, $top, $skip, $filter, $inlinecount, $error_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsAvailableVersionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param  string $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param  string $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsAvailableVersionsAsyncWithHttpInfo($start, $owner_name, $app_name, $end = null, $top = '30', $skip = '0', $filter = null, $inlinecount = 'none', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20057';
        $request = $this->errorsAvailableVersionsRequest($start, $owner_name, $app_name, $end, $top, $skip, $filter, $inlinecount, $error_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsAvailableVersions'
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param  string $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param  string $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsAvailableVersionsRequest($start, $owner_name, $app_name, $end = null, $top = '30', $skip = '0', $filter = null, $inlinecount = 'none', $error_type = null)
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsAvailableVersions'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsAvailableVersions'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsAvailableVersions'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsAvailableVersions, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsAvailableVersions, must be bigger than or equal to 0.');
        }

        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ErrorsApi.errorsAvailableVersions, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($inlinecount !== null) {
            $queryParams['$inlinecount'] = ObjectSerializer::toQueryValue($inlinecount);
        }
        // query params
        if ($error_type !== null) {
            $queryParams['errorType'] = ObjectSerializer::toQueryValue($error_type);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsCountsPerDay
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20053
     */
    public function errorsCountsPerDay($start, $owner_name, $app_name, $version = null, $end = null, $app_build = null, $error_type = null)
    {
        list($response) = $this->errorsCountsPerDayWithHttpInfo($start, $owner_name, $app_name, $version, $end, $app_build, $error_type);
        return $response;
    }

    /**
     * Operation errorsCountsPerDayWithHttpInfo
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20053, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsCountsPerDayWithHttpInfo($start, $owner_name, $app_name, $version = null, $end = null, $app_build = null, $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053';
        $request = $this->errorsCountsPerDayRequest($start, $owner_name, $app_name, $version, $end, $app_build, $error_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsCountsPerDayAsync
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsCountsPerDayAsync($start, $owner_name, $app_name, $version = null, $end = null, $app_build = null, $error_type = null)
    {
        return $this->errorsCountsPerDayAsyncWithHttpInfo($start, $owner_name, $app_name, $version, $end, $app_build, $error_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsCountsPerDayAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsCountsPerDayAsyncWithHttpInfo($start, $owner_name, $app_name, $version = null, $end = null, $app_build = null, $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053';
        $request = $this->errorsCountsPerDayRequest($start, $owner_name, $app_name, $version, $end, $app_build, $error_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsCountsPerDay'
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsCountsPerDayRequest($start, $owner_name, $app_name, $version = null, $end = null, $app_build = null, $error_type = null)
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsCountsPerDay'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsCountsPerDay'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsCountsPerDay'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($app_build !== null) {
            $queryParams['app_build'] = ObjectSerializer::toQueryValue($app_build);
        }
        // query params
        if ($error_type !== null) {
            $queryParams['errorType'] = ObjectSerializer::toQueryValue($error_type);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsDeleteError
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20051
     */
    public function errorsDeleteError($error_group_id, $error_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsDeleteErrorWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsDeleteErrorWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20051, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsDeleteErrorWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20051';
        $request = $this->errorsDeleteErrorRequest($error_group_id, $error_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsDeleteErrorAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsDeleteErrorAsync($error_group_id, $error_id, $owner_name, $app_name)
    {
        return $this->errorsDeleteErrorAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsDeleteErrorAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsDeleteErrorAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20051';
        $request = $this->errorsDeleteErrorRequest($error_group_id, $error_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsDeleteError'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsDeleteErrorRequest($error_group_id, $error_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsDeleteError'
            );
        }
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsDeleteError'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsDeleteError'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsDeleteError'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorAttachmentLocation
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20043
     */
    public function errorsErrorAttachmentLocation($error_id, $attachment_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsErrorAttachmentLocationWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsErrorAttachmentLocationWithHttpInfo
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorAttachmentLocationWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043';
        $request = $this->errorsErrorAttachmentLocationRequest($error_id, $attachment_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorAttachmentLocationAsync
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentLocationAsync($error_id, $attachment_id, $owner_name, $app_name)
    {
        return $this->errorsErrorAttachmentLocationAsyncWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorAttachmentLocationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentLocationAsyncWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043';
        $request = $this->errorsErrorAttachmentLocationRequest($error_id, $attachment_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorAttachmentLocation'
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorAttachmentLocationRequest($error_id, $attachment_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorAttachmentLocation'
            );
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling errorsErrorAttachmentLocation'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorAttachmentLocation'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorAttachmentLocation'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorAttachmentText
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20042
     */
    public function errorsErrorAttachmentText($error_id, $attachment_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsErrorAttachmentTextWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsErrorAttachmentTextWithHttpInfo
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20042, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorAttachmentTextWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20042';
        $request = $this->errorsErrorAttachmentTextRequest($error_id, $attachment_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorAttachmentTextAsync
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentTextAsync($error_id, $attachment_id, $owner_name, $app_name)
    {
        return $this->errorsErrorAttachmentTextAsyncWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorAttachmentTextAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentTextAsyncWithHttpInfo($error_id, $attachment_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20042';
        $request = $this->errorsErrorAttachmentTextRequest($error_id, $attachment_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorAttachmentText'
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $attachment_id Error attachment id. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorAttachmentTextRequest($error_id, $attachment_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorAttachmentText'
            );
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling errorsErrorAttachmentText'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorAttachmentText'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorAttachmentText'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorAttachments
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20044[]
     */
    public function errorsErrorAttachments($error_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsErrorAttachmentsWithHttpInfo($error_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsErrorAttachmentsWithHttpInfo
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20044[], HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorAttachmentsWithHttpInfo($error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20044[]';
        $request = $this->errorsErrorAttachmentsRequest($error_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20044[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorAttachmentsAsync
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentsAsync($error_id, $owner_name, $app_name)
    {
        return $this->errorsErrorAttachmentsAsyncWithHttpInfo($error_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorAttachmentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorAttachmentsAsyncWithHttpInfo($error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20044[]';
        $request = $this->errorsErrorAttachmentsRequest($error_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorAttachments'
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorAttachmentsRequest($error_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorAttachments'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorAttachments'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorAttachments'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorDownload
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $format the format of the crash log (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function errorsErrorDownload($error_group_id, $error_id, $owner_name, $app_name, $format = null)
    {
        list($response) = $this->errorsErrorDownloadWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name, $format);
        return $response;
    }

    /**
     * Operation errorsErrorDownloadWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $format the format of the crash log (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorDownloadWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name, $format = null)
    {
        $returnType = 'object';
        $request = $this->errorsErrorDownloadRequest($error_group_id, $error_id, $owner_name, $app_name, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorDownloadAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $format the format of the crash log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorDownloadAsync($error_group_id, $error_id, $owner_name, $app_name, $format = null)
    {
        return $this->errorsErrorDownloadAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorDownloadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $format the format of the crash log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorDownloadAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name, $format = null)
    {
        $returnType = 'object';
        $request = $this->errorsErrorDownloadRequest($error_group_id, $error_id, $owner_name, $app_name, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorDownload'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $format the format of the crash log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorDownloadRequest($error_group_id, $error_id, $owner_name, $app_name, $format = null)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsErrorDownload'
            );
        }
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorDownload'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorDownload'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorDownload'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorFreeDevicePercentages
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string[] $versions versions (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20047
     */
    public function errorsErrorFreeDevicePercentages($start, $owner_name, $app_name, $end = null, $versions = null, $app_build = null, $error_type = null)
    {
        list($response) = $this->errorsErrorFreeDevicePercentagesWithHttpInfo($start, $owner_name, $app_name, $end, $versions, $app_build, $error_type);
        return $response;
    }

    /**
     * Operation errorsErrorFreeDevicePercentagesWithHttpInfo
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string[] $versions (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20047, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorFreeDevicePercentagesWithHttpInfo($start, $owner_name, $app_name, $end = null, $versions = null, $app_build = null, $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047';
        $request = $this->errorsErrorFreeDevicePercentagesRequest($start, $owner_name, $app_name, $end, $versions, $app_build, $error_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorFreeDevicePercentagesAsync
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string[] $versions (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorFreeDevicePercentagesAsync($start, $owner_name, $app_name, $end = null, $versions = null, $app_build = null, $error_type = null)
    {
        return $this->errorsErrorFreeDevicePercentagesAsyncWithHttpInfo($start, $owner_name, $app_name, $end, $versions, $app_build, $error_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorFreeDevicePercentagesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string[] $versions (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorFreeDevicePercentagesAsyncWithHttpInfo($start, $owner_name, $app_name, $end = null, $versions = null, $app_build = null, $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047';
        $request = $this->errorsErrorFreeDevicePercentagesRequest($start, $owner_name, $app_name, $end, $versions, $app_build, $error_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorFreeDevicePercentages'
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string[] $versions (optional)
     * @param  string $app_build app build (optional)
     * @param  string $error_type Type of error (handled vs unhandled), excluding All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorFreeDevicePercentagesRequest($start, $owner_name, $app_name, $end = null, $versions = null, $app_build = null, $error_type = null)
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsErrorFreeDevicePercentages'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorFreeDevicePercentages'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorFreeDevicePercentages'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if (is_array($versions)) {
            $queryParams['versions'] = $versions;
        } else
        if ($versions !== null) {
            $queryParams['versions'] = ObjectSerializer::toQueryValue($versions);
        }
        // query params
        if ($app_build !== null) {
            $queryParams['app_build'] = ObjectSerializer::toQueryValue($app_build);
        }
        // query params
        if ($error_type !== null) {
            $queryParams['errorType'] = ObjectSerializer::toQueryValue($error_type);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorGroupsSearch
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20055
     */
    public function errorsErrorGroupsSearch($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'matchingReportsCount', $top = '100', $skip = '0')
    {
        list($response) = $this->errorsErrorGroupsSearchWithHttpInfo($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);
        return $response;
    }

    /**
     * Operation errorsErrorGroupsSearchWithHttpInfo
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20055, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorGroupsSearchWithHttpInfo($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'matchingReportsCount', $top = '100', $skip = '0')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20055';
        $request = $this->errorsErrorGroupsSearchRequest($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20055',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorGroupsSearchAsync
     *
     * 
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorGroupsSearchAsync($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'matchingReportsCount', $top = '100', $skip = '0')
    {
        return $this->errorsErrorGroupsSearchAsyncWithHttpInfo($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorGroupsSearchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorGroupsSearchAsyncWithHttpInfo($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'matchingReportsCount', $top = '100', $skip = '0')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20055';
        $request = $this->errorsErrorGroupsSearchRequest($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorGroupsSearch'
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorGroupsSearchRequest($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'matchingReportsCount', $top = '100', $skip = '0')
    {
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorGroupsSearch'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorGroupsSearch'
            );
        }
        if ($top !== null && $top > 100) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsErrorGroupsSearch, must be smaller than or equal to 100.');
        }
        if ($top !== null && $top < 1) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsErrorGroupsSearch, must be bigger than or equal to 1.');
        }

        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ErrorsApi.errorsErrorGroupsSearch, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorLocation
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20043
     */
    public function errorsErrorLocation($error_group_id, $error_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsErrorLocationWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsErrorLocationWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorLocationWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043';
        $request = $this->errorsErrorLocationRequest($error_group_id, $error_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorLocationAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorLocationAsync($error_group_id, $error_id, $owner_name, $app_name)
    {
        return $this->errorsErrorLocationAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorLocationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorLocationAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20043';
        $request = $this->errorsErrorLocationRequest($error_group_id, $error_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorLocation'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorLocationRequest($error_group_id, $error_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsErrorLocation'
            );
        }
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorLocation'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorLocation'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorLocation'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorSearch
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to timestamp)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20045
     */
    public function errorsErrorSearch($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'timestamp', $top = '100', $skip = '0')
    {
        list($response) = $this->errorsErrorSearchWithHttpInfo($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);
        return $response;
    }

    /**
     * Operation errorsErrorSearchWithHttpInfo
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to timestamp)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20045, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorSearchWithHttpInfo($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'timestamp', $top = '100', $skip = '0')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20045';
        $request = $this->errorsErrorSearchRequest($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20045',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorSearchAsync
     *
     * 
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to timestamp)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorSearchAsync($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'timestamp', $top = '100', $skip = '0')
    {
        return $this->errorsErrorSearchAsyncWithHttpInfo($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorSearchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to timestamp)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorSearchAsyncWithHttpInfo($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'timestamp', $top = '100', $skip = '0')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20045';
        $request = $this->errorsErrorSearchRequest($owner_name, $app_name, $filter, $q, $order, $sort, $top, $skip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorSearch'
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $filter A filter as specified in OData notation (optional)
     * @param  string $q A query string (optional)
     * @param  string $order It controls the order of sorting (optional, default to desc)
     * @param  string $sort It controls the sort based on specified field (optional, default to timestamp)
     * @param  int $top The maximum number of results to return (optional, default to 100)
     * @param  int $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorSearchRequest($owner_name, $app_name, $filter = null, $q = null, $order = 'desc', $sort = 'timestamp', $top = '100', $skip = '0')
    {
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorSearch'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorSearch'
            );
        }
        if ($top !== null && $top > 100) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsErrorSearch, must be smaller than or equal to 100.');
        }
        if ($top !== null && $top < 1) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsErrorSearch, must be bigger than or equal to 1.');
        }

        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ErrorsApi.errorsErrorSearch, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsErrorStackTrace
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace
     */
    public function errorsErrorStackTrace($error_group_id, $error_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsErrorStackTraceWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsErrorStackTraceWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsErrorStackTraceWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace';
        $request = $this->errorsErrorStackTraceRequest($error_group_id, $error_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsErrorStackTraceAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorStackTraceAsync($error_group_id, $error_id, $owner_name, $app_name)
    {
        return $this->errorsErrorStackTraceAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsErrorStackTraceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsErrorStackTraceAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace';
        $request = $this->errorsErrorStackTraceRequest($error_group_id, $error_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsErrorStackTrace'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsErrorStackTraceRequest($error_group_id, $error_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsErrorStackTrace'
            );
        }
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsErrorStackTrace'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsErrorStackTrace'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsErrorStackTrace'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGetErrorDetails
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20050
     */
    public function errorsGetErrorDetails($error_group_id, $error_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsGetErrorDetailsWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsGetErrorDetailsWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20050, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGetErrorDetailsWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050';
        $request = $this->errorsGetErrorDetailsRequest($error_group_id, $error_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGetErrorDetailsAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGetErrorDetailsAsync($error_group_id, $error_id, $owner_name, $app_name)
    {
        return $this->errorsGetErrorDetailsAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGetErrorDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGetErrorDetailsAsyncWithHttpInfo($error_group_id, $error_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050';
        $request = $this->errorsGetErrorDetailsRequest($error_group_id, $error_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGetErrorDetails'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGetErrorDetailsRequest($error_group_id, $error_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGetErrorDetails'
            );
        }
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsGetErrorDetails'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGetErrorDetails'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGetErrorDetails'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGetRetentionSettings
     *
     * gets the retention settings in days
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20046
     */
    public function errorsGetRetentionSettings($owner_name, $app_name)
    {
        list($response) = $this->errorsGetRetentionSettingsWithHttpInfo($owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsGetRetentionSettingsWithHttpInfo
     *
     * gets the retention settings in days
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGetRetentionSettingsWithHttpInfo($owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20046';
        $request = $this->errorsGetRetentionSettingsRequest($owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGetRetentionSettingsAsync
     *
     * gets the retention settings in days
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGetRetentionSettingsAsync($owner_name, $app_name)
    {
        return $this->errorsGetRetentionSettingsAsyncWithHttpInfo($owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGetRetentionSettingsAsyncWithHttpInfo
     *
     * gets the retention settings in days
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGetRetentionSettingsAsyncWithHttpInfo($owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20046';
        $request = $this->errorsGetRetentionSettingsRequest($owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGetRetentionSettings'
     *
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGetRetentionSettingsRequest($owner_name, $app_name)
    {
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGetRetentionSettings'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGetRetentionSettings'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupCountsPerDay
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20053
     */
    public function errorsGroupCountsPerDay($error_group_id, $start, $owner_name, $app_name, $version = null, $end = null)
    {
        list($response) = $this->errorsGroupCountsPerDayWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $version, $end);
        return $response;
    }

    /**
     * Operation errorsGroupCountsPerDayWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20053, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupCountsPerDayWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $version = null, $end = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053';
        $request = $this->errorsGroupCountsPerDayRequest($error_group_id, $start, $owner_name, $app_name, $version, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupCountsPerDayAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupCountsPerDayAsync($error_group_id, $start, $owner_name, $app_name, $version = null, $end = null)
    {
        return $this->errorsGroupCountsPerDayAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $version, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupCountsPerDayAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupCountsPerDayAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $version = null, $end = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20053';
        $request = $this->errorsGroupCountsPerDayRequest($error_group_id, $start, $owner_name, $app_name, $version, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupCountsPerDay'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupCountsPerDayRequest($error_group_id, $start, $owner_name, $app_name, $version = null, $end = null)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupCountsPerDay'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsGroupCountsPerDay'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupCountsPerDay'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupCountsPerDay'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupDetails
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20054
     */
    public function errorsGroupDetails($error_group_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsGroupDetailsWithHttpInfo($error_group_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsGroupDetailsWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20054, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupDetailsWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054';
        $request = $this->errorsGroupDetailsRequest($error_group_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupDetailsAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupDetailsAsync($error_group_id, $owner_name, $app_name)
    {
        return $this->errorsGroupDetailsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupDetailsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054';
        $request = $this->errorsGroupDetailsRequest($error_group_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupDetails'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupDetailsRequest($error_group_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupDetails'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupDetails'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupDetails'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupErrorFreeDevicePercentages
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20047
     */
    public function errorsGroupErrorFreeDevicePercentages($error_group_id, $start, $owner_name, $app_name, $end = null)
    {
        list($response) = $this->errorsGroupErrorFreeDevicePercentagesWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end);
        return $response;
    }

    /**
     * Operation errorsGroupErrorFreeDevicePercentagesWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20047, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupErrorFreeDevicePercentagesWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047';
        $request = $this->errorsGroupErrorFreeDevicePercentagesRequest($error_group_id, $start, $owner_name, $app_name, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupErrorFreeDevicePercentagesAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupErrorFreeDevicePercentagesAsync($error_group_id, $start, $owner_name, $app_name, $end = null)
    {
        return $this->errorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20047';
        $request = $this->errorsGroupErrorFreeDevicePercentagesRequest($error_group_id, $start, $owner_name, $app_name, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupErrorFreeDevicePercentages'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupErrorFreeDevicePercentagesRequest($error_group_id, $start, $owner_name, $app_name, $end = null)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupErrorFreeDevicePercentages'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsGroupErrorFreeDevicePercentages'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupErrorFreeDevicePercentages'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupErrorFreeDevicePercentages'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupErrorStackTrace
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace
     */
    public function errorsGroupErrorStackTrace($error_group_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsGroupErrorStackTraceWithHttpInfo($error_group_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsGroupErrorStackTraceWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupErrorStackTraceWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace';
        $request = $this->errorsGroupErrorStackTraceRequest($error_group_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupErrorStackTraceAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupErrorStackTraceAsync($error_group_id, $owner_name, $app_name)
    {
        return $this->errorsGroupErrorStackTraceAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupErrorStackTraceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupErrorStackTraceAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\DiagnosticsStackTrace';
        $request = $this->errorsGroupErrorStackTraceRequest($error_group_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupErrorStackTrace'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupErrorStackTraceRequest($error_group_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupErrorStackTrace'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupErrorStackTrace'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupErrorStackTrace'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupList
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version version (optional)
     * @param  string $app_build app build (optional)
     * @param  string $group_state group_state (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20056
     */
    public function errorsGroupList($start, $owner_name, $app_name, $version = null, $app_build = null, $group_state = null, $end = null, $orderby = 'count desc', $top = '30', $error_type = null)
    {
        list($response) = $this->errorsGroupListWithHttpInfo($start, $owner_name, $app_name, $version, $app_build, $group_state, $end, $orderby, $top, $error_type);
        return $response;
    }

    /**
     * Operation errorsGroupListWithHttpInfo
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  string $app_build app build (optional)
     * @param  string $group_state (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20056, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupListWithHttpInfo($start, $owner_name, $app_name, $version = null, $app_build = null, $group_state = null, $end = null, $orderby = 'count desc', $top = '30', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20056';
        $request = $this->errorsGroupListRequest($start, $owner_name, $app_name, $version, $app_build, $group_state, $end, $orderby, $top, $error_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20056',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupListAsync
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  string $app_build app build (optional)
     * @param  string $group_state (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupListAsync($start, $owner_name, $app_name, $version = null, $app_build = null, $group_state = null, $end = null, $orderby = 'count desc', $top = '30', $error_type = null)
    {
        return $this->errorsGroupListAsyncWithHttpInfo($start, $owner_name, $app_name, $version, $app_build, $group_state, $end, $orderby, $top, $error_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupListAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  string $app_build app build (optional)
     * @param  string $group_state (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupListAsyncWithHttpInfo($start, $owner_name, $app_name, $version = null, $app_build = null, $group_state = null, $end = null, $orderby = 'count desc', $top = '30', $error_type = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20056';
        $request = $this->errorsGroupListRequest($start, $owner_name, $app_name, $version, $app_build, $group_state, $end, $orderby, $top, $error_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupList'
     *
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  string $version (optional)
     * @param  string $app_build app build (optional)
     * @param  string $group_state (optional)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  string $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $error_type Type of error (handled vs unhandled), including All (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupListRequest($start, $owner_name, $app_name, $version = null, $app_build = null, $group_state = null, $end = null, $orderby = 'count desc', $top = '30', $error_type = null)
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsGroupList'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupList'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupList'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupList, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($app_build !== null) {
            $queryParams['app_build'] = ObjectSerializer::toQueryValue($app_build);
        }
        // query params
        if ($group_state !== null) {
            $queryParams['groupState'] = ObjectSerializer::toQueryValue($group_state);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($error_type !== null) {
            $queryParams['errorType'] = ObjectSerializer::toQueryValue($error_type);
        }

        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupModelCounts
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20049
     */
    public function errorsGroupModelCounts($error_group_id, $owner_name, $app_name, $top = '30')
    {
        list($response) = $this->errorsGroupModelCountsWithHttpInfo($error_group_id, $owner_name, $app_name, $top);
        return $response;
    }

    /**
     * Operation errorsGroupModelCountsWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20049, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupModelCountsWithHttpInfo($error_group_id, $owner_name, $app_name, $top = '30')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20049';
        $request = $this->errorsGroupModelCountsRequest($error_group_id, $owner_name, $app_name, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20049',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupModelCountsAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupModelCountsAsync($error_group_id, $owner_name, $app_name, $top = '30')
    {
        return $this->errorsGroupModelCountsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupModelCountsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupModelCountsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name, $top = '30')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20049';
        $request = $this->errorsGroupModelCountsRequest($error_group_id, $owner_name, $app_name, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupModelCounts'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupModelCountsRequest($error_group_id, $owner_name, $app_name, $top = '30')
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupModelCounts'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupModelCounts'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupModelCounts'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupModelCounts, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupModelCounts, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsGroupOperatingSystemCounts
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20048
     */
    public function errorsGroupOperatingSystemCounts($error_group_id, $owner_name, $app_name, $top = '30')
    {
        list($response) = $this->errorsGroupOperatingSystemCountsWithHttpInfo($error_group_id, $owner_name, $app_name, $top);
        return $response;
    }

    /**
     * Operation errorsGroupOperatingSystemCountsWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20048, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsGroupOperatingSystemCountsWithHttpInfo($error_group_id, $owner_name, $app_name, $top = '30')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20048';
        $request = $this->errorsGroupOperatingSystemCountsRequest($error_group_id, $owner_name, $app_name, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20048',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsGroupOperatingSystemCountsAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupOperatingSystemCountsAsync($error_group_id, $owner_name, $app_name, $top = '30')
    {
        return $this->errorsGroupOperatingSystemCountsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsGroupOperatingSystemCountsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsGroupOperatingSystemCountsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name, $top = '30')
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20048';
        $request = $this->errorsGroupOperatingSystemCountsRequest($error_group_id, $owner_name, $app_name, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsGroupOperatingSystemCounts'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsGroupOperatingSystemCountsRequest($error_group_id, $owner_name, $app_name, $top = '30')
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsGroupOperatingSystemCounts'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsGroupOperatingSystemCounts'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsGroupOperatingSystemCounts'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupOperatingSystemCounts, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsGroupOperatingSystemCounts, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsLatestErrorDetails
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20050
     */
    public function errorsLatestErrorDetails($error_group_id, $owner_name, $app_name)
    {
        list($response) = $this->errorsLatestErrorDetailsWithHttpInfo($error_group_id, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsLatestErrorDetailsWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20050, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsLatestErrorDetailsWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050';
        $request = $this->errorsLatestErrorDetailsRequest($error_group_id, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsLatestErrorDetailsAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsLatestErrorDetailsAsync($error_group_id, $owner_name, $app_name)
    {
        return $this->errorsLatestErrorDetailsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsLatestErrorDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsLatestErrorDetailsAsyncWithHttpInfo($error_group_id, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20050';
        $request = $this->errorsLatestErrorDetailsRequest($error_group_id, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsLatestErrorDetails'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsLatestErrorDetailsRequest($error_group_id, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsLatestErrorDetails'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsLatestErrorDetails'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsLatestErrorDetails'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsListForGroup
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $model model (optional)
     * @param  string $os os (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20052
     */
    public function errorsListForGroup($error_group_id, $start, $owner_name, $app_name, $end = null, $top = '30', $model = null, $os = null)
    {
        list($response) = $this->errorsListForGroupWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end, $top, $model, $os);
        return $response;
    }

    /**
     * Operation errorsListForGroupWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $model (optional)
     * @param  string $os (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20052, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsListForGroupWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end = null, $top = '30', $model = null, $os = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20052';
        $request = $this->errorsListForGroupRequest($error_group_id, $start, $owner_name, $app_name, $end, $top, $model, $os);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20052',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsListForGroupAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $model (optional)
     * @param  string $os (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsListForGroupAsync($error_group_id, $start, $owner_name, $app_name, $end = null, $top = '30', $model = null, $os = null)
    {
        return $this->errorsListForGroupAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end, $top, $model, $os)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsListForGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $model (optional)
     * @param  string $os (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsListForGroupAsyncWithHttpInfo($error_group_id, $start, $owner_name, $app_name, $end = null, $top = '30', $model = null, $os = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20052';
        $request = $this->errorsListForGroupRequest($error_group_id, $start, $owner_name, $app_name, $end, $top, $model, $os);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsListForGroup'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \DateTime $start Start date time in data in ISO 8601 date time format (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $end Last date time in data in ISO 8601 date time format (optional)
     * @param  int $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param  string $model (optional)
     * @param  string $os (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsListForGroupRequest($error_group_id, $start, $owner_name, $app_name, $end = null, $top = '30', $model = null, $os = null)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsListForGroup'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling errorsListForGroup'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsListForGroup'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsListForGroup'
            );
        }
        if ($top !== null && $top > 1000) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsListForGroup, must be smaller than or equal to 1000.');
        }
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ErrorsApi.errorsListForGroup, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }

        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsListSessionLogs
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $date Date of data requested (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20041
     */
    public function errorsListSessionLogs($error_id, $owner_name, $app_name, $date = null)
    {
        list($response) = $this->errorsListSessionLogsWithHttpInfo($error_id, $owner_name, $app_name, $date);
        return $response;
    }

    /**
     * Operation errorsListSessionLogsWithHttpInfo
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $date Date of data requested (optional)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsListSessionLogsWithHttpInfo($error_id, $owner_name, $app_name, $date = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20041';
        $request = $this->errorsListSessionLogsRequest($error_id, $owner_name, $app_name, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsListSessionLogsAsync
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $date Date of data requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsListSessionLogsAsync($error_id, $owner_name, $app_name, $date = null)
    {
        return $this->errorsListSessionLogsAsyncWithHttpInfo($error_id, $owner_name, $app_name, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsListSessionLogsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $date Date of data requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsListSessionLogsAsyncWithHttpInfo($error_id, $owner_name, $app_name, $date = null)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20041';
        $request = $this->errorsListSessionLogsRequest($error_id, $owner_name, $app_name, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsListSessionLogs'
     *
     * @param  string $error_id The id of the error (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     * @param  \DateTime $date Date of data requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsListSessionLogsRequest($error_id, $owner_name, $app_name, $date = null)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorsListSessionLogs'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsListSessionLogs'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsListSessionLogs'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }

        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsPutRetentionSettings
     *
     * Creates and updates the retention settings in days
     *
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays $error_retention_in_days The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays
     */
    public function errorsPutRetentionSettings($error_retention_in_days, $owner_name, $app_name)
    {
        list($response) = $this->errorsPutRetentionSettingsWithHttpInfo($error_retention_in_days, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsPutRetentionSettingsWithHttpInfo
     *
     * Creates and updates the retention settings in days
     *
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays $error_retention_in_days The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsPutRetentionSettingsWithHttpInfo($error_retention_in_days, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays';
        $request = $this->errorsPutRetentionSettingsRequest($error_retention_in_days, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsPutRetentionSettingsAsync
     *
     * Creates and updates the retention settings in days
     *
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays $error_retention_in_days The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsPutRetentionSettingsAsync($error_retention_in_days, $owner_name, $app_name)
    {
        return $this->errorsPutRetentionSettingsAsyncWithHttpInfo($error_retention_in_days, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsPutRetentionSettingsAsyncWithHttpInfo
     *
     * Creates and updates the retention settings in days
     *
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays $error_retention_in_days The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsPutRetentionSettingsAsyncWithHttpInfo($error_retention_in_days, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays';
        $request = $this->errorsPutRetentionSettingsRequest($error_retention_in_days, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsPutRetentionSettings'
     *
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorRetentionInDays $error_retention_in_days The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsPutRetentionSettingsRequest($error_retention_in_days, $owner_name, $app_name)
    {
        // verify the required parameter 'error_retention_in_days' is set
        if ($error_retention_in_days === null || (is_array($error_retention_in_days) && count($error_retention_in_days) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_retention_in_days when calling errorsPutRetentionSettings'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsPutRetentionSettings'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsPutRetentionSettings'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($error_retention_in_days)) {
            $_tempBody = $error_retention_in_days;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorsUpdateState
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorGroupState $error_group_state The state of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ZeC128\AppCenter\AppCenterApi\InlineResponse20054
     */
    public function errorsUpdateState($error_group_id, $error_group_state, $owner_name, $app_name)
    {
        list($response) = $this->errorsUpdateStateWithHttpInfo($error_group_id, $error_group_state, $owner_name, $app_name);
        return $response;
    }

    /**
     * Operation errorsUpdateStateWithHttpInfo
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorGroupState $error_group_state The state of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \ZeC128\AppCenter\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ZeC128\AppCenter\AppCenterApi\InlineResponse20054, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorsUpdateStateWithHttpInfo($error_group_id, $error_group_state, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054';
        $request = $this->errorsUpdateStateRequest($error_group_id, $error_group_state, $owner_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZeC128\AppCenter\AppCenterApi\InlineResponseDefault2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorsUpdateStateAsync
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorGroupState $error_group_state The state of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsUpdateStateAsync($error_group_id, $error_group_state, $owner_name, $app_name)
    {
        return $this->errorsUpdateStateAsyncWithHttpInfo($error_group_id, $error_group_state, $owner_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorsUpdateStateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorGroupState $error_group_state The state of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorsUpdateStateAsyncWithHttpInfo($error_group_id, $error_group_state, $owner_name, $app_name)
    {
        $returnType = '\ZeC128\AppCenter\AppCenterApi\InlineResponse20054';
        $request = $this->errorsUpdateStateRequest($error_group_id, $error_group_state, $owner_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorsUpdateState'
     *
     * @param  string $error_group_id The id of the error group (required)
     * @param  \ZeC128\AppCenter\AppCenterApi\ErrorGroupState $error_group_state The state of the error group (required)
     * @param  string $owner_name The name of the owner (required)
     * @param  string $app_name The name of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function errorsUpdateStateRequest($error_group_id, $error_group_state, $owner_name, $app_name)
    {
        // verify the required parameter 'error_group_id' is set
        if ($error_group_id === null || (is_array($error_group_id) && count($error_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_id when calling errorsUpdateState'
            );
        }
        // verify the required parameter 'error_group_state' is set
        if ($error_group_state === null || (is_array($error_group_state) && count($error_group_state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_group_state when calling errorsUpdateState'
            );
        }
        // verify the required parameter 'owner_name' is set
        if ($owner_name === null || (is_array($owner_name) && count($owner_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_name when calling errorsUpdateState'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling errorsUpdateState'
            );
        }

        $resourcePath = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($error_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorGroupId' . '}',
                ObjectSerializer::toPathValue($error_group_id),
                $resourcePath
            );
        }
        // path params
        if ($owner_name !== null) {
            $resourcePath = str_replace(
                '{' . 'owner_name' . '}',
                ObjectSerializer::toPathValue($owner_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($error_group_state)) {
            $_tempBody = $error_group_state;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Token');
        if ($apiKey !== null) {
            $headers['X-API-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
